---
title: "Biotic and abiotic factors directly and indirectly impact the structure of non-trophic networks in a rainfall gradient"
subtitle: 'Andrés F. Ramírez-Mejía, Mary De Aquino, Michael Castaño Díaz, Juliana Hinz Wolter, Henry S. Pollock, J. Patrick Kelley, Jeferson Vizentin-Bugoni & Corey E. Tarwater'
author: "Appendix S1. Journal: Ecology"
format:
  pdf: 
    include-in-header:
      text: |
        \renewcommand{\thesection}{S\arabic{section}}
        \renewcommand{\thesubsection}{S\arabic{section}.\arabic{subsection}}
        \renewcommand{\thefigure}{S\arabic{figure}}
        \renewcommand{\thetable}{S\arabic{table}}
        \renewcommand{\thesection}{S\arabic{section}}
        \renewcommand{\thesubsection}{S\arabic{section}.\arabic{subsection}}
        \renewcommand{\thefigure}{S\arabic{figure}}
        \renewcommand{\thetable}{S\arabic{table}}
        \usepackage{fvextra}
        \DefineVerbatimEnvironment{Highlighting}{Verbatim}{
          fontsize=\footnotesize,
          baselinestretch=0.8,
          commandchars=\\\{\}  
        }
        \usepackage{xcolor} 
    toc: true
    toc-depth: 10
    number-sections: true
    colorlinks: true
    code-line-numbers: false
number-sections: true
number-depth: 100
date-format: full 
date-modified: now
code-fold: false
code-overflow: scroll
code-line-numbers: true
code-copy: true
---
# Introduction

This document reproduces the data analysis from *Ramírez-Mejía et al. Structure of army-ant-following birds interaction networks is modulated by cumulative rainfall, ant swarm and arthropod biomass at different temporal scales*. It is organized in four main sections: *introduction (1)*, *data wrangling I (2)*, *data wrangling II (3)* and *data analysis (4)*. *Section 2* holds the procedure for choosing meteorological stations to extract rainfall data. *Section 3* encompasses the curation of interaction, rainfall, ant swarm and arthropods biomass data sets. It also includes visualization of interaction networks, the estimation of the distance matrix of sampling days, the cumulative rainfall in seven temporal windows (1, 5, 10, ... and 30 days before sampling), and the calibration of measurement error in the swarm area for 2022 and 2023. *Section 4* covers the fitting procedure of all models and simulations on interventions. Here, within network metric subsections, you will find six models (one per temporal window) where we provide: (i) mathematical notation of the model, (ii) model in Stan code, (iii) MCMC algorithm execution, and (iv) model diagnostics. At the end of the network metrics subsections, we include the code for conducting interventions and reproducing Figures 2-4 from the main document.

# Data wrangling I (rainfall data)

Data was extracted from the Panama Canal Authority Meteorology and Hydrology Stations hosted by the [Smithsonian Tropical Research Institute](https://biogeodb.stri.si.edu/physical_monitoring/research/panamacanalauthority).

\\

```{r, echo=FALSE, eval=TRUE}
knitr::opts_chunk$set(warning = FALSE)
```


```{r, echo=TRUE, message=FALSE, results='hide', warning=FALSE}
sapply(c('tidyverse', 'readxl', 'magrittr', 'sf', 
         'igraph', 'cmdstanr', 'tidyverse', 'readxl', 
         'magrittr', 'animation', 'cowplot', 'moments', 
         'parallel', 'lubridate', 'ggridges', 'boot', 
         'rethinking', 'dagitty', 'ggdag', 'patchwork', 
         'scales'), 
       library, character.only = T)

source('functions_mod_diagnostics.r')

extrafont::loadfonts(device="win")
```


We loaded the coordinates of our sampling sites and meteorological stations; then we identified the five nearest stations to each sampling location.

```{r, warning=FALSE, message=FALSE}
d <- read_xlsx('birds_clime/2022-23_AntbirdAssociationNetwork_11Nov2023.xlsx', 
               sheet = 1, col_names = T, na = 'NA')

d <- unique(d[, 1:3])

stations_PosName <- 
  read_xlsx('birds_clime/ACP_Station_Names_Locations.xlsx', sheet = 1, 
            col_names = T, na = 'NA')

stations_PosName <- stations_PosName[, c(1:4, 7:8)]

for (i in 5:6) stations_PosName[[i]] <- as.numeric(stations_PosName[[i]])


sampling <- read_xlsx('birds_clime/antswarm_coordinates_2022_23.xlsx', 
                      sheet = 1)[, 1:3]

for (i in 2:3) sampling[[i]] <- as.numeric(sampling[[i]])

colnames(sampling)[2:3] <- c('utm_E', 'utm_N')

sampling <- full_join(sampling, d[, -2], by = 'observation_ID')

limsX <- quantile(sampling$utm_E, c(0, 1), na.rm = T)
limsY <- quantile(sampling$utm_N, c(0, 1), na.rm = T)

sampling <- sampling[!is.na(sampling$utm_E), ]

# ==== choosing stations ====

stations_PosName <- stations_PosName[!is.na(stations_PosName$`UTM (N)`) &
                                       !is.na(stations_PosName$`UTM (W)`), ]

sampling <- split(sampling, sampling$observation_ID)

# estimating five nearest stations to our sampling sites
filt_stations <- 
  lapply(sampling, FUN = 
           function(x) {
             tempX <- (x$utm_E - stations_PosName$`UTM (W)`)^2 +
               (x$utm_N - stations_PosName$`UTM (N)`)^2
             tempX <- sqrt(tempX)
             
             temp <- stations_PosName
             temp$dist <- tempX
             temp <- temp[order(temp$dist)[1:5], ]
             temp$observation_ID <- x$observation_ID
             temp$site <- x$site
             temp
           })

filt_stations <- do.call('rbind', filt_stations)
sampling <- do.call('rbind', sampling)

```


```{r, fig.cap= "Spatial distribution of our sampling locations (colored circles) and the meteorological stations (black circles). Red points indicate the nearest meteorological stations.", fig.height=6, fig.width=10}
sampling %$% plot(utm_E, 
                    utm_N, col = ifelse(sampling$site == 'LIMB', 'tan1', 
                                        ifelse(sampling$site == 'SHER', 'cyan4', 
                                               ifelse(sampling$site == 'PLRD', 
                                                      'yellow', 'green'))), 
                  ylim = c(95e4, 105e4), xlim = c(6e5, 685e3),
                  xlab = 'UTM (E)', ylab = 'UTM (N)')

stations_PosName %$%
  points(`UTM (W)`, `UTM (N)`, ylim = c(95e4, 105e4), xlim = c(6e5, 685e3)
  )

filt_stations %$% 
  points(`UTM (W)`, `UTM (N)`, col = 'red', pch = 16, 
                       cex = 0.5)
legend(x = 63e4, y = 98e4, 
       legend = c('LIMB', 'SHER', 'PLRD', 'JUAN', 'Stations', 
                  'Choosen\n stations'), 
       col = c('tan1', 'cyan4', 'yellow', 'green', 'black', 'red'), 
       pch = c(rep(1, 4), 1, 16), ncol = 3)

colnames(d)[2] <- 'sampling_date'


```

After identifying the stations, we programmed the functions `find_months` and `climate_data` to extract the data from the months we sampled to calculate daily rainfall.
```{r}
filt_stations <- full_join(filt_stations, d, by = c('observation_ID', 'site'))


filt_stations <- filt_stations[!is.na(filt_stations$NOMBRE), ]

filt_stations$sampling_date <- as.Date(filt_stations$sampling_date)
# ====== Functions: getting the data =====

nom_stations <- unique(filt_stations$NOMBRE)
nom_stations <- sort(nom_stations)

file_stations <- dir(paste(getwd(), '/birds_clime/clime_predictors', sep = ''))
file_stations <- paste(getwd(), 
                       '/birds_clime/clime_predictors/', 
                       file_stations,
                       sep = '')

find_months <- function(df = filt_stations, 
                        station = nom_stations[1]) {
 
  n <- unique(gsub('^(.*)(-)(.*)(-)(.*)$', '\\3', 
              df[df$NOMBRE == station, ]$sampling_date))
  message(station)
  sort(as.numeric(n))
}

climate_data <- function(file = file_stations[1], 
                       days = '([0-9]*/)',
                       extract_months = 
                         nom_stations[1], # only for our sampled months
                       extract_months2 = FALSE, # all months 
                       months_num = '([0-9]*)', # all months
                       years = '(/202[23])', 
                       name_station = nom_stations[1]) {
  
  if (extract_months2) {
    months <- months_num
  } else {
    months <- find_months(station = extract_months) 
    months <- paste('(0*[', min(months)-1, '-', max(months), '])', sep = '')
  }
  
  df <- as_tibble(read.csv(file))
  
  string <- paste(days, months, years, sep = '')
  
  df <- df[grep(string, df$date), ]
  
  df <- df[df$ra >= 0, ]
  
  df <- 
    df |> 
    group_by(date) |> 
    transmute(ra = sum(ra)) |> 
    unique() 
  
  df$date <- as.Date(df$date, '%d/%m/%Y')
  
  df$station <- name_station
  
  df
  
}

```

Finally, we loop through all files holding the raw data of each stations.
```{r, echo=TRUE, eval=FALSE}
all_clime1 <- 
  lapply(seq_along(file_stations), FUN = 
           function(x) {
             climate_data(file = file_stations[[x]], 
                          extract_months = nom_stations[[x]], 
                          extract_months2 = TRUE, 
                          name_station = nom_stations[[x]], 
                          years = '(/20[12][0-9])')
           })


saveRDS(all_clime1, 'birds_clime/all_clime_per_month.rds')

all_clime <- 
  lapply(seq_along(file_stations), FUN = 
           function(x) {
             climate_data(file = file_stations[[x]], 
                          extract_months = nom_stations[[x]], 
                          name_station = nom_stations[[x]], 
                          years = '(/20[12][0-9])')
           })

saveRDS(all_clime, 'birds_clime/all_clime.rds')

all_stations <- 
  lapply(seq_along(file_stations), FUN = 
           function(x) {
             climate_data(file = file_stations[[x]], 
                          extract_months = nom_stations[[x]], 
                          name_station = nom_stations[[x]])
           })

all_stations <- do.call('rbind', all_stations)

colnames(all_stations)[2] <- 'rainfall_mm'

d$sampling_date <- as.Date(d$sampling_date)

all_stations$year <- 
  gsub('^(202[23])(-)([0-9]*)(.*)$', '\\1', all_stations$date)
all_stations$month <- 
  gsub('^(202[23])(-)([0-9]*)(.*)$', '\\3', all_stations$date)

write.table(all_stations |> 
              group_by(year, month, station) |> 
              transmute(rainfall_mm = sum(rainfall_mm)) |> 
              unique() |> 
              print(n = 268), 
            'rainfall_month_ant_followers.txt', row.names = F, col.names = T)

saveRDS(filt_stations, 'chosen_stations.rds')
saveRDS(all_stations, 'rainfall_ant_followers.rds')
write.table(all_stations, 'rainfall_ant_followers.txt', 
            row.names = F, col.names = T)
```

## Rainfall pattern in our study area

```{r, fig.cap="Iteranual **(a)** and annual **(b)** cumulative rainfall pattern in our study zone (isthmus of Panama). Each line denotes a single meteorological station where we extracted the data. ", fig.height= 7}
# ======== Rainfall pattern =========

all_clime <- readRDS('birds_clime/all_clime_per_month.rds')

all_clime <- do.call('rbind', all_clime)

all_clime$month <- floor_date(all_clime$date, 'month')
all_clime$year <- floor_date(all_clime$date, 'year')

all_clime <- 
  all_clime |> 
  group_by(month, station) |> 
  mutate(rainfall = sum(ra)) |> 
  select(station, month, year, rainfall) |> 
  unique()

plot_clime_20_years <- 
  all_clime |> 
  ggplot(aes(month, rainfall, linetype = station)) +
  geom_line(linewidth = 0.25) +
  theme(legend.position = 'none') +
  labs(y = 'Cum. reinfal per month (mm)', x = 'Year') +
  theme_bw() +
  theme(legend.position = 'none', 
        panel.grid = element_blank())

all_clime$month_fc <- gsub('^(.*)(-)([0-9]*)(-)(.*)$', '\\3', all_clime$month)
all_clime$month_fc <- as.numeric(all_clime$month_fc)

all_clime <- 
  all_clime |> 
  group_by(station, month_fc) |> 
  transmute(mu_rainfall = median(rainfall)) |> 
  unique()

plot_clime_year <- 
  all_clime |> 
  ggplot(aes(month_fc, mu_rainfall, linetype = station)) +
  geom_line() +
  lims(y = c(0, 500)) +
  scale_x_continuous(breaks = 1:12) + 
  labs(y = 'Median rainfall per month (mm)', x = 'Month') +
  theme_bw() +
  theme(legend.position = 'none', 
        panel.grid = element_blank())

plot_grid(plot_clime_20_years, plot_clime_year, ncol = 1, 
          labels = letters[1:2])

```


```{r, fig.cap= "Cumulative rainfall between 2010 - 2023 in the four sampling sites. **Top**: cumulativevrainfall per mont. **Botton**: total cumulativerainfall per site", fig.height= 7}

all_clime1 <- readRDS('birds_clime/all_clime_per_month.rds')

all_clime1 <- 
  lapply(all_clime1, FUN = 
         function(x) {
           x |> 
             mutate(month = month(date), 
                    year = year(date)) |> 
             group_by(station, year, month) |> 
             transmute(ra = sum(ra)) |> 
             unique()
         })

all_clime1 <- do.call('rbind', all_clime1)

filt_stations2 <- unique(filt_stations[, c('observation_ID', "site", "NOMBRE")])

sum(filt_stations2$observation_ID == 'ARPEB06_15SEP2022')
sum(filt_stations2$observation_ID == 'JFCEB04_13SEP2022')

filt_stations2 <- 
  filt_stations2[filt_stations2$observation_ID != 'ARPEB06_15SEP2022' & 
               filt_stations2$observation_ID != 'JFCEB04_13SEP2022', ]

filt_stations2 <- filt_stations2[, -1]

sum(all_clime1$station == "Gatún")

colnames(filt_stations2)[2] <- 'station'

all_clime1 <- unique(full_join(all_clime1, filt_stations2, by = 'station'))

all_clime1[, c("station", 'site')] |>  
  unique() |> 
  group_by(site) |> 
  transmute(n = length(station)) |> 
  unique()

all_clime1 <- split(all_clime1, list(all_clime1$site, all_clime1$station))

all_clime1 <- all_clime1[unlist(lapply(all_clime1, function(x) nrow(x) != 0), 
                                use.names = F)]

all_clime1 <- all_clime1[-grep('SHER', names(all_clime1))[1]]

all_clime1 <- all_clime1[-grep('JUAN', names(all_clime1))[1]]

all_clime1 <- do.call('rbind', all_clime1)

all_clime1 <- 
  all_clime1 |> 
  group_by(site, month, station) |> 
  transmute(mu = mean(ra)) |> 
  ungroup() |> 
  group_by(site, month) |> 
  transmute(mu = sum(mu)) |> 
  unique()

apply(all_clime1, 2, function(x) sum(is.na(x)))

all_clime1[is.na(all_clime1$site), ]

cowplot::plot_grid(all_clime1 |> 
                     ggplot() +
                     geom_point(aes(month, mu, color = site), 
                                position = position_dodge(width = 0.5), 
                                size = 1) +
                     scale_x_continuous(breaks = 1:12) +
                     labs(y = 'Total rainfall (2010-2023)') +
                     geom_line(aes(month, mu, color = site), 
                               linewidth = 0.25, 
                               position = position_dodge(width = 0.5)), 
                   all_clime1 |> 
                     ggplot() +
                     stat_summary(aes(fct_reorder(site, mu, .fun = max), mu), 
                                  fun = 'sum', geom = 'bar') +
                     labs(y = 'Total rainfall (2010-2023)', x = NULL), 
                   ncol = 1)
```

This pattern arises due to the precipitation gradient going from east to west at the Panama isthmus. Let us show this pattern fitting a simple linear model:

```{r, echo=FALSE}

line <- sampling

line <- split(line, line$site)

line$SHER <- line$SHER[line$SHER$utm_E < 620000, ]

line$LIMB <- line$LIMB[line$LIMB$utm_E < max(line$LIMB$utm_E), ]

line <- do.call('rbind', line)

```

```{r, warning=FALSE, message=FALSE}
sub_stations <- readRDS('stations_gradiendt.rds')[[2]]
stations <- readRDS('stations_gradiendt.rds')[[3]]

stations %$% plot(utm_W, utm_N, ylim = c(950e3, 1060000), xlim = c(6e5, 69e4), 
                  xlab = 'UTM (W)', ylab = 'UTM (N)')
sub_stations %$% points(utm_W, utm_N, pch = 16, col = 'red')

stations_gradiendt <- readRDS('stations_gradiendt.rds')[[1]]

stations_gradiendt <- stations_gradiendt[stations_gradiendt$ra > 0, ]

stations_gradiendt$year <- as.factor(stations_gradiendt$year)

stations_gradiendt <- split(stations_gradiendt, stations_gradiendt$year)

stations_gradiendt <- 
  stations_gradiendt[unlist(lapply(stations_gradiendt, 
                                   function(x) nrow(x) > 1), use.names = F)]

stations_gradiendt <- do.call('rbind', stations_gradiendt)

stations_gradiendt <- 
  stations_gradiendt |> 
  filter(ra > 200)

dat <- 
  list(
    x = as.vector(scale(stations_gradiendt$utm_w)),
    y = as.vector(scale(stations_gradiendt$ra)),
    N = length(stations_gradiendt$year)
  )

cat(file = 'mod_gradient.stan', 
    "
    data{
      int N;
      vector[N] x;
      vector[N] y;
    }
    
    parameters {
      real alpha;
      real beta;
      real sigma;
    }
    
    model {
      vector[N] mu;
      alpha ~ normal(0, 1);
      beta ~ normal(0, 1);
      sigma ~ exponential(1);
    
      for (i in 1:N) {
        mu[i] = alpha + beta*x[i];
      }
    
      y ~ normal(mu, sigma);
    }
    
    generated quantities{
      vector[N] mu;
      array[N] real ppcheck;
    
      for (i in 1:N) {
        mu[i] = alpha + beta*x[i];
      }
    
      ppcheck = normal_rng(mu, sigma);
      
    }
    ")

file <- paste(getwd(), '/mod_gradient.stan', sep = '')

fit <- cmdstan_model(file, compile = T)

mod_gradient <- 
  fit$sample(
    data = dat,
    chains = 3, 
    parallel_chains = 3,
    thin = 3, 
    iter_sampling = 2000, 
    iter_warmup = 500, 
    refresh = 500, 
    seed = 123
  )

mod_gradient$summary()

post <- mod_gradient$draws(c('alpha', 'beta', 'sigma'), format = 'df')

x_seq <- seq(min(dat$x)-0.4, max(dat$x), length.out = 500)

ppcheck <- as.matrix(mod_gradient$draws(c('ppcheck'), format = 'matrix'))

plot(density(dat$y), main = '', xlab = 'Anual rainfall (z-scores)')
for (i in 1:100) lines(density(ppcheck[i, ]))
lines(density(dat$y), col = 'red', lwd = 2)

pred <- 
  sapply(x_seq, FUN = 
           function(x) {
             rnorm(1e3, 
                   post$alpha +
                     post$beta * x, 
                   post$sigma)
           })

pred <- 
  do.call('rbind', 
        apply(pred, 2, FUN = 
                function(x) {
                  tibble(li = quantile(x, 0.025), 
                         ls = quantile(x, 0.975))
                }))

est <- 
  sapply(x_seq, FUN = 
           function(x) {
             post$alpha +
               post$beta * x
           })

pred$y <- apply(est, 2, mean)

pred <- as_tibble(apply(pred, 2, FUN = 
                          function(x) {
                            mean(stations_gradiendt$ra) +
                              x * sd(stations_gradiendt$ra)
                          }))

pred$x <- mean(stations_gradiendt$utm_w) + 
  x_seq * sd(stations_gradiendt$utm_w)


```
```{r, fig.cap= "Conditional plot showing the negative trend of annual precipitation from east to west in the Panamá isthmus. Dotes are observed annual rainfall in meteorological stations across the gradient; the solid line indicates the average trend, and the light blue band shows the 95% interval of the predicted values. Vertical lines show the UTM W coordinates of our sampling locations at each site."}
lab <- 
  tibble(x = c(620e3, 630e3, 645e3, 655e3), 
         y = rep(1100, 4), 
         l = c('SHER', 'JUAN', 'LIMB', 'PLRD'))

ggplot() + 
  geom_point(data = stations_gradiendt, 
             aes(utm_w, ra), 
             color = 'tan1') +
  geom_ribbon(data = pred, 
              aes(x, ymin = li, ymax = ls), 
              alpha = 0.5, 
              fill = 'lightblue') +
  geom_line(data = pred, 
            aes(x, y), 
            color = 'lightblue3', 
            linewidth = 1.5) +
  labs(x = 'UTM (W)', 
       y = 'Anual rainfall (2002 - 2023)') + 
  geom_vline(xintercept = line$utm_E,
             color = ifelse(line$site == 'LIMB', 'green', 
                                        ifelse(line$site == 'SHER', 'cyan4', 
                                               ifelse(line$site == 'PLRD', 
                                                      'yellow3', 'tan1'))),
             linetype = 1, linewidth = 0.5) +
  geom_text(data = 
              lab,
            aes(x, y),
            label = lab$l, 
           color = c('cyan4', 'green', 'tan1', 'yellow3')) +
  theme_bw() +
  theme(panel.grid = element_blank())
```


Therefore, we classified our four sampling locations as follows: 

:::{}

1.    *PLRD = low rainfall*
2.    *LIMB = Medium-low rainfall*
3.    *JUAN = Medium-high rainfall* 
4.    *SHER = High rainfall*
:::

Those sites vary not only in total precipitation but also in vegetation and topography.

\\

SHER is located in Bosque Protector San Lorenzo, on the wetter side of the Panamanian Isthmus. Although there is significant variation across the site, the vegetation at SHER is generally denser than that at the other field sites, with incredibly dense thickets in many areas. Topography also varies at SHER, with some relatively large areas of flat, even terrain, and other areas with steep inclines. There are some precipitous rocky drop offs at SHER that prevent safe navigation by foot, and on several occasions fieldwork was adjusted to avoid these areas. There are many small streams throughout the site.

LIMB and JUAN are contiguous, and while LIMB receives slightly higher average annual precipitation than JUAN, vegetation and topography are similar between the two sites. Vegetation density is intermediate at these sites, with some thickets and some more open areas. As at SHER, topography is variable, with both flat, even terrain and steep inclines. However, LIMB and JUAN lack the precipitous drop offs found at SHER. Four small rivers and many seasonal streams run through these sites.

PLRD is the driest of the four sites. Although there are still dense thickets in some areas, vegetation at Plantation is more open than at the other field sites. PLRD is the hilliest of the four sites, with steep slopes covering almost the entire site. However, as with LIMB and JUAN, PLRD lacks the dangerous drop offs found at SHER. A medium-sized river and several small streams run through this site. See below some photos illustrating sites' vegetation.
	

	
![SHER](photos_sites/SHER.png){fig-align="center"}


![JUAN/LIMB](photos_sites/JUAN.png){fig-align="center"}

![PLRD](photos_sites/PLRD.png){fig-align="center"}

# Data wrangling II (ant followers interaction networks)

The code below conducts a data wrangling operation to curate, process, and format a data set of ant followers' interaction, swarm area, and arthropod biomass.


```{r}
net <- read_xlsx('birds_clime/2022-23_AntbirdAssociationNetwork_11Nov2023.xlsx', 
                 sheet = 1, col_names = T, na = 'NA')

# ======= data exploration and cleaning =====

net$observation_ID[grep('^(LEGEB01_01AUG)(202[3-9])$', 
                        net$observation_ID)] <- 'LEGEB01_01AUG2022'

indx <- grep('^(ARPEB02_28JUL)(2023)$', net$observation_ID)

net$observation_ID[indx] <- net$observation_ID[indx + 1]
net$date[indx] <- net$date[indx + 1]

net <- net[!is.na(net$sp1), ]
net <- net[!is.na(net$sp2), ]

net$month <- 
  as.factor(gsub('^([0-9]*)(.)([0-9]*)(.)([0-9]*)$', '\\3', net$date))
net$year <- gsub('^([0-9]*)(.)([0-9]*)(.)([0-9]*)$', '\\1', net$date)
net$day <- gsub('^([0-9]*)(.)([0-9]*)(.)([0-9]*)$', '\\5', net$date)

net <- net[, -grep('^notes$', colnames(net))]

net$tem_int <- net %$% paste(sp1, '_', sp2, sep = '')

net$frec <- 1

all_spp <- unique(c(net$sp1, net$sp2))

net <- split(net, list(net$year, net$month))

net <- net[unlist(lapply(net, function(x) nrow(x) != 0), use.names = F)] 

net <- 
  lapply(net, FUN = 
           function(z) {
             
             x <- z
             spp <- x$tem_int
             sp1 <- unique(c(x$sp1, x$sp2))
             
             t <- sapply(sp1, FUN = 
                           function(i) {
                             indx <- grep(i, spp)
                             
                             vec1 <- vector('character', length = nrow(x))
                             
                             vec1[indx] <- i
                             vec1
                           })
             
             t2 <- 
               apply(t, 2,  
                     function(j){
                       indx <- nchar(j) > 0
                       indx
                     })
             
             t4 <- 
               lapply(1:nrow(t), FUN = 
                        function(k) {
                          s <- t[k, ][t2[k, ]]
                          tibble(sp1 = s[1], sp2 = s[2], 
                                 spp = paste(s[1], s[2], sep = '_'))
                        })
             
             t4 <- do.call('rbind', t4)
             
             x$sp1 <- t4$sp1
             x$sp2 <- t4$sp2
             x$tem_int <- t4$spp
             x
           })

net <- do.call('rbind', net)

```

## Plotted networks at month level

```{r, fig.height=10, fig.align='center', fig.cap="Monthly interaction networks of ant followers birds in the tropical forest of Panama. The month and year of sampling are provided within each figure."}
# month level networks 

net2 <- 
  net |> 
  group_by(date, site, tem_int) |> 
  mutate(int = sum(frec), 
         sp1 = gsub('^(.*)(_)(.*)$', '\\1', tem_int),
         sp2 = gsub('^(.*)(_)(.*)$', '\\3', tem_int)) |> 
  ungroup() |> 
  select(date, site, month, year, day, sp1, sp2, int) |> 
  unique()

net2 <- split(net2, list(net2$month, net2$year))

net2 <- net2[unlist(lapply(net2, function(x) nrow(x) > 0))]

net2 <- 
  lapply(net2, FUN = 
           function(x) {
             edges <- 
               x[, c('sp1', 'sp2', 'int')]
             nodes <- tibble(sp = unique(c(x$sp1, x$sp2)))
             
             list(edges = edges, 
                  nodes = nodes)
           })

par(mfrow = c(4, 3), mar = c(0, 0, 1, 0))
for (i in seq_along(net2)) {
  plot_net <- graph_from_data_frame(d = net2[[i]]$edges, 
                                    vertices = net2[[i]]$nodes,
                                    directed = F)
  
  V(plot_net)$size <- 8 
  V(plot_net)$frame.color <- "white" 
  V(plot_net)$color <- "seagreen" 
  V(plot_net)$label <- ""
  #E(plot_net)$weight <- E(plot_net)$int
  V(plot_net)$size <- igraph::degree(plot_net) * 0.1
  
  l1 <- layout_with_kk(plot_net)
  
  plot(plot_net, layout = l1, 
       #edge.width =  E(plot_net)$weight/4, 
       vertex.size = degree(plot_net) * 0.14)
  text(x= 0.6, y = 0.6, names(net2)[i])
  
  
}
par(mfrow = c(1, 1), mar = c(4, 4, 2, 2))

```

## Plotted networks at day level

```{r, fig.height= 8, fig.cap="Daily interaction networks of ant followers birds in the tropical forest of Panama. Observation ID and date of sampling are provided within each figure. Only 64 networks are shown."}

# day level networks 

net2 <- 
  net |> 
  group_by(date, observation_ID, site, tem_int) |> 
  mutate(int = sum(frec), 
         sp1 = gsub('^(.*)(_)(.*)$', '\\1', tem_int),
         sp2 = gsub('^(.*)(_)(.*)$', '\\3', tem_int)) |> 
  ungroup() |> 
  select(observation_ID, date, site, month, year, day, sp1, sp2, int) |> 
  unique()

net2 <- split(net2, list(net2$observation_ID))

net2 <- net2[unlist(lapply(net2, function(x) nrow(x) > 0))]

size_network <- unlist(lapply(net2, FUN = 
                                function(x) {
                                  sp1 <- x$sp1
                                  sp2 <- x$sp2
                                  length(unique(c(sp1, sp2)))
                                }), use.names = F)

net2 <- 
  lapply(net2, FUN = 
           function(x) {
             edges <- 
               x[, c('sp1', 'sp2', 'int')]
             nodes <- tibble(sp = unique(c(x$sp1, x$sp2)))
             
             list(edges = edges, 
                  nodes = nodes)
           })

par(mfrow = c(6, 6), mar = c(0, 0, 1, 0))
for (i in 1:36) {
  plot_net <- graph_from_data_frame(d = net2[[i]]$edges, 
                                    vertices = net2[[i]]$nodes,
                                    directed = F)
  
  V(plot_net)$size <- 8 
  V(plot_net)$frame.color <- "white" 
  V(plot_net)$color <- "seagreen" 
  V(plot_net)$label <- ""
  #E(plot_net)$weight <- E(plot_net)$int
  V(plot_net)$size <- igraph::degree(plot_net) * 0.05
  
  l1 <- layout_with_kk(plot_net)
  
  plot(plot_net, layout = l1, 
       #edge.width =  E(plot_net)$weight/4, 
       vertex.size = degree(plot_net))
  text(x= 0.6, y = 0.6, names(net2)[i])
  
  
}
par(mfrow = c(1, 1), mar = c(4, 4, 2, 2))

```

## Structure of ant followers interaction data

```{r, tab.cap= "Number of swarms sampled (i.e. ant followers interaction networks) during 2022 and 2023 in the tropical forest of Panama."}
net[] <- lapply(net, function(x) if(is.character(x)) as.factor(x) else(x))

net <- net[!is.na(net$sp2), ]

net <- 
  net |> 
  group_by(observation_ID, site, year, month, day, tem_int) |> 
  mutate(inter = sum(frec), 
         sp1 = gsub('^(.*)(_)(.*)$', '\\1', tem_int),
         sp2 = gsub('^(.*)(_)(.*)$', '\\3', tem_int)) |> 
  ungroup() |> 
  select(observation_ID, date, site, year, month, day, 
         sp1, sp2, inter) |> 
  unique()

net |> 
  select(observation_ID, site, year, month) |> 
  unique() |> 
  group_by(site, year, month) |> 
  transmute(`Sampled swarms` = length(observation_ID)) |> 
  unique() |> 
  knitr::kable()
```

## Calculating cumulative rainfall (W1 to W30)
```{r, fig.cap= "Frequency of number of interactions per species in ant followers interaction networks."}
stations <- readRDS('chosen_stations.rds')
rainfall <- readRDS('rainfall_ant_followers.rds')

stations <- stations[, -c(1:3)]

windows <- do.call('cbind', lapply(c(1, seq(5, 30, by = 5)), FUN = 
                                     function(x) {
                                       d <- tibble(v = 
                                                     stations$sampling_date - x)
                                       colnames(d) <- 
                                         paste('window_', x, sep = '')
                                       d
                                     }))

windows <- as_tibble(cbind(stations, windows))
indx_win <- colnames(windows)[grep('window', colnames(windows))]

cum_rain <- 
  lapply(indx_win, FUN = 
           function(i) {
             
             r <- lapply(1:nrow(windows), FUN =
                           function(x) {
                             d1 <- windows$sampling_date[x]
                             s <- windows$NOMBRE[x]
                             d2 <- windows[, i, drop = T][x]
                             
                             sum(rainfall[rainfall$date < d1 &
                                            rainfall$date >= d2 &
                                            rainfall$station == s, ]$rainfall_mm)
                           })
             
             r <- unlist(r, use.names = F)
             
             tibble(cum_rainfall = r)
             
           })

cum_rain <- lapply(seq_along(indx_win), FUN = 
                     function(x) {
                       w <- c(1, seq(5, 30, by = 5))
                       colnames(cum_rain[[x]]) <- 
                         paste('cum_rainfall_W', w[x], sep = '')
                       cum_rain[[x]]
                     })

cum_rain <- as_tibble(do.call('cbind', cum_rain))

windows <- as_tibble(cbind(windows, cum_rain))

windows <- split(windows, windows$observation_ID)

indx <- grep('rainfall', colnames(windows$ARPEB02_28JUL2022))

windows <- 
  lapply(windows, FUN = 
           function(x) {
             vars <- x[, indx]
             vars <- do.call('cbind', 
                             lapply(vars, function(i) tibble(v = median(i))))
             colnames(vars) <- colnames(x)[indx]
             x <- unique(x[, c(5:(indx[1]-1))])
             as_tibble(cbind(x, vars))
           })

windows <- do.call('rbind', windows)

stations <- split(stations, stations$observation_ID)

net <- full_join(net, windows[, -c(3, grep('window', colnames(windows)))], 
                 by = c('observation_ID', 'site'))

net <- net[!is.na(net$inter), ]

text <- 
  'Number of interactions of\n ant follower 
species within daily interaction networks'

plot(density(net$inter), main = '', 
     xlab = text, xlim = c(0, 10))
```

## Distance matrices

Distance matrices among sampling days, months and geographical distance among sampling sites.

```{r, echo=TRUE, eval=FALSE}
d <- read_xlsx('birds_clime/2022-23_AntbirdAssociationNetwork_11Nov2023.xlsx', 
                      sheet = 1, col_names = T, na = 'NA')
d <- unique(d[, 1:3])

distance_days <- d

distance_days$date <- as.Date(distance_days$date)
distance_days$date_fct <- as.factor(distance_days$date)

distance_days$date_fct <- factor(distance_days$date_fct, 
                                 levels = 
                                   as.character(unique(sort(distance_days$date
                                                            ))))

as.numeric(distance_days$date[1] - distance_days$date[2])

distance_days$date_code <- as.numeric(distance_days$date_fct)

distance_days$month <- as.numeric(gsub('^(.*)(-)(0[1-9])(-)(.*)$', '\\3', 
                                       distance_days$date))

sampling <- read_xlsx('birds_clime/antswarm_coordinates_2022_23.xlsx', 
                      sheet = 1)[, 1:3]

distance_days <- full_join(distance_days, sampling, by = 'observation_ID')

distance_days[is.na(distance_days$GPS_UTM_easting_bivouac), ]

distance_days <- distance_days[!is.na(distance_days$GPS_UTM_northing_bivouac), ]

# day matrix 

k_days <- matrix(NA, 
                 ncol = length(levels(distance_days$date_fct)), 
                 nrow = length(levels(distance_days$date_fct)))

rownames(k_days) <- levels(distance_days$date_fct)
colnames(k_days) <- levels(distance_days$date_fct)

days <- levels(distance_days$date_fct)
d1 <- double(1)
d2 <- double(1)

for (i in 1:nrow(k_days)) for (j in 1:ncol(k_days)) {
  d1 <- unique(distance_days$date[distance_days$date == days[i]])
  d2 <- unique(distance_days$date[distance_days$date == days[j]])
  
  k_days[i, j] <- abs(d1 - d2)
}

# month matrix

months <- sort(unique(distance_days$month))

k_months <- 
          #2  3. 4. 5. 6. 7. 8. 9
  matrix(c(0, 1, 2, 3, 4, 5, 5, 4, # 2
           1, 0, 1, 2, 3, 4, 5, 6, # 3
           2, 1, 0, 1, 2, 3, 4, 5, # 3
           3, 2, 1, 0, 1, 2, 3, 4, # 5
           4, 3, 2, 1, 0, 1, 2, 3, # 6
           5, 4, 3, 2, 1, 0, 1, 2, # 7
           5, 5, 4, 3, 2, 1, 0, 1, # 8
           4, 6, 5, 4, 3, 2, 1, 0),# 9
         ncol = length(months), nrow = length(months))

colnames(k_months) <- paste('m', months, sep = '')
rownames(k_months) <- paste('m', months, sep = '')

# sampling sites matrix

distance_days$GPS_UTM_easting_bivouac <- 
  as.numeric(distance_days$GPS_UTM_easting_bivouac)
distance_days$GPS_UTM_northing_bivouac <-
  as.numeric(distance_days$GPS_UTM_northing_bivouac)


distance_days2 <- distance_days[order(distance_days$date_code), 
                                c("date", "site", "date_fct", 
                                  "date_code", "month", 
                                  "GPS_UTM_easting_bivouac", 
                                  "GPS_UTM_northing_bivouac")]

distance_days2 <- 
  distance_days2 |> 
  group_by(date, date_fct, date_code, month) |> 
  transmute(north_y = mean(GPS_UTM_northing_bivouac), 
            east_x = mean(GPS_UTM_easting_bivouac)) |> 
  unique()

distance_days3 <- split(distance_days2, distance_days2$date_fct)
distance_days3 <- 
  lapply(distance_days3, FUN = 
           function(x) {
             tempX <- (x$east_x - distance_days2$east_x)^2 +
               (x$north_y - distance_days2$north_y)^2
             tempX <- sqrt(tempX)
             
             tibble(date = distance_days2$date,
                    date_fct = distance_days2$date_fct,
                    date_code = distance_days2$date_code,
                    comp_code = x$date_code, 
                    month = distance_days2$month,
                    dist = tempX)
             
           })

distance_days3 <- do.call('rbind', distance_days3)

dist_spatial <- matrix(distance_days3$dist, 
                       ncol = length(levels(distance_days$date_fct)), 
                       nrow = length(levels(distance_days$date_fct)), 
                       byrow = F)

colnames(dist_spatial) <- levels(distance_days3$date_fct)
rownames(dist_spatial) <- levels(distance_days3$date_fct)

saveRDS(
  list(day_matrix = k_days,
       month_matrix = k_months,
       spatial_matrix = dist_spatial,
       df1 = distance_days, 
       df2 = distance_days3),
  'birds_clime/distance_matrices.rds'
)

```


# Data analysis I: estimating network metrics and mesurement error

## Network metrics

The following code indexes ant-follower interaction networks to filter those with a minimum of seven links and six nodes.


```{r}
dist_mat <- readRDS('birds_clime/distance_matrices.rds')

indx_networks <- net

indx_networks$tem_int <- indx_networks %$% paste(sp1, sp2, sep = '_')

indx_networks <- split(indx_networks, indx_networks$observation_ID)

inter <- unlist(lapply(indx_networks, nrow), use.names = F)

nodes <- unlist(lapply(indx_networks, FUN = 
                         function(x) {
                           sp <- unique(c(x$sp1, x$sp2))
                           length(sp)
                         }), use.names = F)

(cutoff_inter <- quantile(inter, seq(0, 1, by = 0.1)))
(cut_off_nodes <- quantile(nodes, seq(0, 1, by = 0.1)))

mean(((inter >= cutoff_inter[2]) + 
        (nodes >= cut_off_nodes[2])) == 2)

indx_networks <- 
  tibble(obs_ID = names(indx_networks), 
         indx = ((inter >= cutoff_inter[2]) + 
                   (nodes >= cut_off_nodes[2])) == 2)

par(mfrow = c(1, 2), mar = c(4, 4, 1, 1))
plot(density(inter), main = '', 
     xlab = 'Links per daily netwworks')
plot(density(nodes), main = "", 
     xlab = 'Nodes per daily networks')

```

Formating observed and predicted networks to estimate network size, skewness, clustering and normalized degree.

```{r}
est_nets <- net[, 1:grep('inter', colnames(net))]

est_nets$site <- as.factor(est_nets$site)

est_nets <- split(est_nets, est_nets$observation_ID)

```

```{r, eval=TRUE, echo=TRUE}
# creating networks 
t1 <- Sys.time()
plotting_nets <- 
  lapply(est_nets, FUN = 
             function(x) {
               
               edges_obs <- 
                 x[, c('sp1', 'sp2', 'inter')]
               
               nodes_obs <- tibble(sp = unique(c(x$sp1, x$sp2)))
               
               obs_nets <- graph_from_data_frame(d = edges_obs, 
                                                 vertices = nodes_obs,
                                                 directed = F)
               
               V(obs_nets)$frame.color <- "white" 
               V(obs_nets)$color <- "seagreen" 
               V(obs_nets)$label <- ""
               
               obs_nets
               
             })
Sys.time() - t1


# estimating network metrics
network_metrics <- 
  lapply(seq_along(plotting_nets), 
         function(i) {
           
           obs_net <- plotting_nets[[i]]
           
           net_size <- length(degree(obs_net))
           #network_density <- edge_density(obs_net)
           normalized_degree <- degree(obs_net)
           normalized_degree <- 
             normalized_degree / (length(normalized_degree)-1) 
           # calcula lo mismo que la funcion igraph::edge_density
           skewness_indx <- skewness(normalized_degree)
           normalized_degree <- mean(normalized_degree)
           clustering <- transitivity(obs_net)
           
           dat <- 
             tibble(net_size = net_size,
                    #net_density = network_density, 
                    norm_degree = normalized_degree, 
                    skewness = skewness_indx, 
                    clustering = clustering, 
                    type = 'Observed')
           
           
           dat$obs_ID <- est_nets[[i]]$observation_ID[1]
           dat$date <- est_nets[[i]]$date[1]
           dat$year <- est_nets[[i]]$year[1]
           dat$month <- est_nets[[i]]$month[1]
           dat$site <- est_nets[[i]]$site[1]
           
           dat
           
         })

length(network_metrics)

names(network_metrics) <- names(est_nets)


```


```{r}
network_metrics_S_OBS <- 
  do.call('rbind', 
          lapply(network_metrics, FUN = 
                   function(x) {
                     x <- x[x$type == 'Observed', ]
                     x[, -c(2:4)]
                   }))

network_metrics <- network_metrics[indx_networks$indx]


colnames(network_metrics_S_OBS)[3] <- 'observation_ID'

network_metrics_S_OBS <- 
  full_join(network_metrics_S_OBS, 
            unique(net[, c(1:2, grep('^cum', colnames(net)))]), 
            by = c('observation_ID', 'date'))

net <- split(net, net$observation_ID)
net_2 <- net[indx_networks$indx]

network_metrics <- 
  lapply(names(network_metrics), FUN = 
           function(x) {
             metrics <- network_metrics[[x]]
             rain <- net_2[[x]]
             rain <- rain[1, grep('^cum', colnames(rain))]
             as_tibble(cbind(metrics, rain))
           })

names(network_metrics) <- names(net_2)

network_metrics_obs <- network_metrics

network_metrics_obs <- do.call('rbind', network_metrics_obs)

```


## Measurement error: Swarm area calibration methods


To test differences between swarm area measurement methods, we performed a calibration test consisting of 20 trials. For each trial, we marked out a hypothetical swarm area using wooden stakes. We marked out areas that reflected the range in areas recorded in previous field seasons. For each trial, we measured swarm area using both the 2022 method (using a GPS device to create a track around the perimeter and calculating the swarm area in ArcGIS) and the 2023 method (marking the perimeter with flagging, measuring the distance and angle from a designated marking to all the other markings, and calculating the area with trigonometry). We conducted ten of the trials in a high-interference setting, with lots of building and tree cover, and ten of the trials in a low-interference setting, with minimal tree cover, to simulate variability in tree cover in the field, which can influence GPS accuracy. 


Below, we fitted a model to estimate the difference between methodologies for swarm area measurement. First, we load the observed data and the data for the calibration of both methods:

```{r}

swarm <- read_xlsx('birds_clime/swarm_traits_2022_23b.xlsx', sheet = 1, 
                   col_names = T, na = 'NA')

swarm$swarm_ID <- toupper(swarm$swarm_ID)

# ===== estimating measurement error 

swarm_calibration <- read_xlsx('swarm_area_method_calibration.xlsx', 
                               sheet = 1, col_names = T)

swarm_calibration1 <- swarm_calibration[, -3]
swarm_calibration2 <- swarm_calibration[, -2]

colnames(swarm_calibration1)[2] <- 'area'
swarm_calibration1$year <- 1

colnames(swarm_calibration2)[2] <- 'area'
swarm_calibration2$year <- 2

swarm_calibration <- rbind(swarm_calibration2, swarm_calibration1)

swarm_calibration <- lapply(swarm_calibration, function(x) x)

swarm_calibration$N <- length(swarm_calibration$trial_id)
swarm_calibration$N_year <- 2
swarm_calibration$N_trials <- 10

```

Prior probabilities for the model estimating measurement error

```{r}
plot(density(swarm_calibration$area[swarm_calibration$year==1]))
lines(density(swarm_calibration$area[swarm_calibration$year==2]), col = 'red')
lines(density(rlnorm(1e3, log(6), 1)), col = 'green')
lines(density(rgamma(1e3, shape = exp(3)/5, rate = 1/5)), col = 'blue')
```

### Matematic version of the model

The object `swarm_calibration` holds the data of experiments aimed to assess the difference in swarm area through GPS and trigonometric calculus. Let's see the mathematical definition of the model:


$$
\begin{aligned}
& sawarm~area_i \sim gamma(\frac{\mu_i}{\sigma}, ~\frac{1}{\sigma}) \\
& log(\mu_i) = \alpha_{method~i} \\
& \alpha_{method~i} = \overline{\alpha} + M[, 1] \\
& M = (diag(\sigma_{\alpha}), \rho_{cholesky}\times Z_{\alpha})^T \\
& \overline{\alpha} \sim normal(2, 1) \\
& Z_{\alpha} \sim normal(0, 1) \\
& \rho \sim LKJcorr(2) \\
& \sigma \sim exponential(1) \\
\end{aligned} 
$$

### Model in `Stan` code 

```{r}
cat(file = 'calibration_swarm.stan', 
    "
    data{
      int N;
      int N_year;
      int N_trials;
      vector[N] area;
      array[N] int trial_id;
      array[N] int year;
    }
    
    parameters{
      matrix[N_trials, N_year] z_alpha;
      cholesky_factor_corr[N_trials] rho;
      vector<lower = 0>[N_trials] sigma_alpha;
      vector[N_trials] alpha_bar;
      real<lower = 0> sigma;
    }
    
    transformed parameters{
      vector[N_year] alpha;
      matrix[N_year, N_trials] M_alpha;
      M_alpha = (diag_pre_multiply(sigma_alpha, rho) * z_alpha)';
      alpha = alpha_bar[1] + M_alpha[, 1];
    }
    
    model{
      vector[N] mu;
      to_vector(z_alpha) ~ normal(0, 1);
      rho ~ lkj_corr_cholesky(2);
      alpha_bar ~ normal(2, 1);
      sigma_alpha ~ exponential(1);
      sigma ~ exponential(1);
    
      for (i in 1:N) {
        mu[i] = exp(alpha[year[i]]);
      }
      
    area ~ gamma(mu/sigma, 1/sigma);
    
    }
    
    generated quantities{
      vector[N] mu;
      array[N] real ppcheck;
    
      for (i in 1:N) {
        mu[i] = exp(alpha[year[i]]);
      }
    
      ppcheck = gamma_rng(mu/sigma, 1/sigma);
    }
    "
)


file <- paste(getwd(), '/calibration_swarm.stan', sep = '')

swarm_fit_calibration <- cmdstan_model(file, compile = T)
```

### Running MCMC algorithm

```{r}
mod_calibration <- 
  swarm_fit_calibration$sample(
    data = swarm_calibration, 
    chains = 3,
    parallel_chains = 3, 
    iter_sampling = 4000, 
    iter_warmup = 500,
    thin = 5, 
    seed = 123,
    refresh = 500
  )

```


### Model's diagnostics

```{r}
sum_mod_calibration <- mod_calibration$summary()

mod_calibration$summary(c('alpha', 'sigma'))

ppcheck_calibration <- mod_calibration$draws('ppcheck', format = 'matrix')

dim(ppcheck_calibration)

plot(density(swarm_calibration$area), main = '', xlab = 'Swarm area', 
     ylim = c(0, 0.03))
for (i in 1:100) lines(density(ppcheck_calibration[i, ]), lwd = 0.1)

mod_diagnostics(mod_calibration, sum_mod_calibration)

post_calibration <- mod_calibration$draws('alpha', format = 'df')

post_calibration <- as_tibble(apply(post_calibration[, 1:2], 2, exp))

colnames(post_calibration) <- c('gps', 'trigonometric')

calibration_error <- post_calibration$trigonometric - post_calibration$gps

mean(calibration_error < 0)

par(mfrow = c(1, 2))
plot(density(post_calibration$gps), lwd = 2, col = 'purple', 
     main = '', xlim = c(7, 50), xlab = 'swarm area')
lines(density(post_calibration$trigonometric), 
      lwd = 2, col = 'lightblue')
legend(x = 25, y = 0.11, legend = c('gps', 'trigonometry'), 
       col = c('purple', 'lightblue'), 
       lty = 1, lwd = 2, border = 'white', box.lwd = 0, 
       title.cex = 1)
plot(density(calibration_error), lwd = 2, col = 'tomato', 
     xlab = 'Measurement error', main = '')
par(mfrow = c(1, 1))
```

### Including measurement error into observed data

```{r}
swarm <- split(swarm, swarm$year)

n_ini <- sum(!is.na(swarm$`2022`$swarm_area_inital))
n_fin <- sum(!is.na(swarm$`2022`$swarm_area_final))

set.seed(5)
error_ini <- sample(calibration_error, size = n_ini, replace = F)

set.seed(6)
error_fin <- sample(calibration_error, size = n_fin, replace = F)

indx_ini <- which(!is.na(swarm$`2022`$swarm_area_inital))
indx_fin <- which(!is.na(swarm$`2022`$swarm_area_final))

swarm$`2022`$swarm_area_inital[indx_ini] <- 
  error_ini + swarm$`2022`$swarm_area_inital[indx_ini]

swarm$`2022`$swarm_area_final[indx_fin] <- 
  error_fin + swarm$`2022`$swarm_area_final[indx_fin]


swarm <- as_tibble(do.call('rbind', swarm))

```

## Data formating to fit causal model

```{r}

swarm$date <- gsub("^(.*)(_)(.*)$", '\\3', swarm$swarm_ID)
swarm$date <- as.Date(swarm$date, '%d%b%Y')

colnames(network_metrics_S_OBS)[3] <- 'obs_ID'

colnames(swarm)[1] <- 'obs_ID'

indx_swarm_S_obs <- 
  sapply(swarm$obs_ID, FUN = 
           function(i) {
             sum(i == network_metrics_S_OBS$obs_ID) > 0
           }, USE.NAMES = F)

network_metrics_S_OBS <- 
  full_join(network_metrics_S_OBS, 
            swarm[indx_swarm_S_obs, c("obs_ID", "swarm_biomass", 
                                      "swarm_area_final", 'swarm_area_inital')], 
            by = 'obs_ID') 

indx_swarm <- 
  sapply(swarm$obs_ID, FUN = 
           function(i) {
             sum(i == network_metrics_obs$obs_ID) > 0
           }, USE.NAMES = F)

swarm$obs_ID[indx_swarm] %in% network_metrics_obs$obs_ID

swarm <- swarm[indx_swarm, ]

network_metrics_obs2 <- 
  full_join(network_metrics_obs, 
            swarm[, c("obs_ID", "swarm_biomass", 
                      "swarm_area_final", 'swarm_area_inital')], 
            by = c('obs_ID'))

network_metrics2 <- do.call('rbind', network_metrics)

network_metrics2 <- full_join(network_metrics2, 
                              network_metrics_obs2[, c("obs_ID", 
                                                       "swarm_biomass", 
                                                       "swarm_area_final", 
                                                       'swarm_area_inital')], 
                              by = 'obs_ID')

network_metrics2 <- split(network_metrics2, network_metrics2$obs_ID)

nas_swarm <- 
  unlist(lapply(network_metrics2, FUN = 
                  function(x) {
                    sum(apply(x, 2, function(i) sum(is.na(x)))) > 0
                  }), use.names = F)

(1 - mean(nas_swarm)) * 100 # ~50% percent of compleate cases

subset_network_metrics <- network_metrics2

subset_network_metrics <- do.call('rbind', subset_network_metrics)

subset_network_metrics$date_fct <- as.factor(subset_network_metrics$date)

network_metrics_S_OBS$date_fct <- 
  as.factor(network_metrics_S_OBS$date)

indx_date2 <- 
  colnames(dist_mat$day_matrix) %in%
  levels(network_metrics_S_OBS$date_fct)

indx_date <- colnames(dist_mat$day_matrix) %in% 
  levels(subset_network_metrics$date_fct)

subset_day_matrix <- dist_mat$day_matrix[indx_date, indx_date]

dist_mat$day_matrix <- dist_mat$day_matrix[indx_date2, indx_date2]

indx_dist_day2 <- 
  as.vector(sapply(colnames(dist_mat$day_matrix), FUN = 
                     function(x) sum(x == unique(network_metrics_obs2$date)) != 0))

network_metrics_obs2$date_fct <- as.factor(network_metrics_obs2$date)
network_metrics_obs2 <- network_metrics_obs2[, -c(5, 7)]
network_metrics_obs2$obs_ID <- as.factor(network_metrics_obs2$obs_ID)

network_metrics_INDX <- 
  list(obs_all = network_metrics_obs2, 
       obs_net_size = network_metrics_S_OBS)

network_metrics_obs2 <- network_metrics_INDX$obs_all

network_metrics_obs2$season <- 
  ifelse(as.numeric(as.character(network_metrics_obs2$month)) <= 4, 1, 2)

network_metrics_obs2$month <- 
  as.numeric(as.character(network_metrics_obs2$month))

network_metrics_obs2 <- lapply(network_metrics_obs2, FUN =
                                 function(i) {
                                   if (is.factor(i)) as.numeric(i)
                                   else i
                                 })

cols <- grep('^cum_', names(network_metrics_obs2))

for (i in cols) network_metrics_obs2[[i]] <- 
  as.vector(scale(network_metrics_obs2[[i]]))

network_metrics_obs2$dist_day <- subset_day_matrix
network_metrics_obs2$N <- length(network_metrics_obs2$date_fct)
network_metrics_obs2$N_day <- max(network_metrics_obs2$date_fct)
network_metrics_obs2$N_month <- max(network_metrics_obs2$month)
network_metrics_obs2$N_season <- max(network_metrics_obs2$season)
network_metrics_obs2$N_site <- max(network_metrics_obs2$site)
network_metrics_obs2$N_dim_day <- dim(subset_day_matrix)[1]

network_metrics_obs2$N_naSwarmBio <- 
  sum(is.na(network_metrics_obs2$swarm_biomass))

network_metrics_obs2$SwarmB_missindx <- 
  which(is.na(network_metrics_obs2$swarm_biomass))

network_metrics_obs2$N_naSwarmINI <- 
  sum(is.na(network_metrics_obs2$swarm_area_inital))

network_metrics_obs2$SwarmINI_missindx <- 
  which(is.na(network_metrics_obs2$swarm_area_inital))

network_metrics_obs2$N_naSwarmFIN <- 
  sum(is.na(network_metrics_obs2$swarm_area_final))

network_metrics_obs2$SwarmFIN_missindx <- 
  which(is.na(network_metrics_obs2$swarm_area_final))

names(network_metrics_obs2)[grep('date_fct', 
                                 names(network_metrics_obs2))] <- 'day'

network_metrics_obs2$swarm_biomass <- 
  sapply(network_metrics_obs2$swarm_biomass, FUN = 
           function(i) {
             if (is.na(i)) 0
             else log(i)
           })

network_metrics_obs2$swarm_area_final <- 
  sapply(network_metrics_obs2$swarm_area_final, FUN = 
           function(i) {
             if (is.na(i)) 0
             else log(i)
           })

network_metrics_obs2$swarm_area_inital <- 
  sapply(network_metrics_obs2$swarm_area_inital, FUN = 
           function(i) {
             if (is.na(i)) 0
             else log(i)
           })

network_metrics_S_OBS <- network_metrics_INDX$obs_net_size
network_metrics_S_OBS <- network_metrics_S_OBS[, -c(2, 4)]
network_metrics_S_OBS$obs_ID <- as.factor(network_metrics_S_OBS$obs_ID)

network_metrics_S_OBS$season <- 
  ifelse(as.numeric(as.character(network_metrics_S_OBS$month)) <= 4, 1, 2)

network_metrics_S_OBS$month <- 
  as.numeric(as.character(network_metrics_S_OBS$month))

network_metrics_S_OBS <- lapply(network_metrics_S_OBS, FUN =
                                  function(i) {
                                    if (is.factor(i)) as.numeric(i)
                                    else i
                                  })

cols <- grep('^cum_', names(network_metrics_S_OBS))

for (i in cols) network_metrics_S_OBS[[i]] <- 
  as.vector(scale(network_metrics_S_OBS[[i]]))

network_metrics_S_OBS$swarm_biomass <- 
  sapply(network_metrics_S_OBS$swarm_biomass, FUN = 
           function(x) {
             if (is.na(x)) NA
             else log(x)
           })

network_metrics_S_OBS$swarm_area_final <- 
  sapply(network_metrics_S_OBS$swarm_area_final, FUN = 
           function(x) {
             if (is.na(x)) NA
             else log(x)
           })

network_metrics_S_OBS$swarm_area_inital <- 
  sapply(network_metrics_S_OBS$swarm_area_inital, FUN = 
           function(x) {
             if (is.na(x)) NA
             else log(x)
           })

network_metrics_S_OBS$dist_day <- dist_mat$day_matrix
network_metrics_S_OBS$N <- length(network_metrics_S_OBS$date_fct)
network_metrics_S_OBS$N_day <- max(network_metrics_S_OBS$date_fct)
network_metrics_S_OBS$N_month <- max(network_metrics_S_OBS$month)
network_metrics_S_OBS$N_season <- max(network_metrics_S_OBS$season)
network_metrics_S_OBS$N_site <- max(network_metrics_S_OBS$site)
network_metrics_S_OBS$N_dim_day <- dim(dist_mat$day_matrix)[1]

network_metrics_S_OBS$N_naSwarmBio <- 
  sum(is.na(network_metrics_S_OBS$swarm_biomass))

network_metrics_S_OBS$SwarmB_missindx <- 
  which(is.na(network_metrics_S_OBS$swarm_biomass))

network_metrics_S_OBS$N_naSwarmINI <- 
  sum(is.na(network_metrics_S_OBS$swarm_area_inital))

network_metrics_S_OBS$SwarmINI_missindx <- 
  which(is.na(network_metrics_S_OBS$swarm_area_inital))

network_metrics_S_OBS$N_naSwarmFIN <- 
  sum(is.na(network_metrics_S_OBS$swarm_area_final))

network_metrics_S_OBS$SwarmFIN_missindx <- 
  which(is.na(network_metrics_S_OBS$swarm_area_final))

unlist(lapply(network_metrics_S_OBS, function(x) mean(is.na(x))))

names(network_metrics_S_OBS)[grep('date_fct', 
                                  names(network_metrics_S_OBS))] <- 'day'

network_metrics_S_OBS$swarm_biomass <- 
  sapply(network_metrics_S_OBS$swarm_biomass, FUN = 
           function(i) {
             if (is.na(i)) 0
             else i
           })

network_metrics_S_OBS$swarm_area_final <- 
  sapply(network_metrics_S_OBS$swarm_area_final, FUN = 
           function(i) {
             if (is.na(i)) 0
             else i
           })

network_metrics_S_OBS$swarm_area_inital <- 
  sapply(network_metrics_S_OBS$swarm_area_inital, FUN = 
           function(i) {
             if (is.na(i)) 0
             else i
           })

```

# Data analysis II: fitting causal models

## Network size models

### Mathematical version of the models

Each generative model explaining the effect of *cumulative rainfall* during temporal window *i* on *network size* was always conditioned by *cumulative rainfall* during *window i+n*. Therefore, the following model applies for the six models fitted (i.e., W1, W5, W10, W15, W20, W25) to asses when cumulative rainfall has the strongest effect on network size.

\\

The first part of the model has a combination of linear equations integrating the generative model:

$$
\begin{aligned}
& Network~size_i \sim Negative~binomial(\lambda_i, ~\phi) \\
& log(\lambda_i) = \alpha1_{[season~i, ~SL~rainfall]} + \beta1_{[season~i, ~SL~rainfall]}\times rainfall_{Wi} + \\
&~~~~~~~~~~~~~~~~ \beta2_{[season~i, ~SL~rainfall]} \times ~ swarm~area_{impute~i} + \\ &~~~~~~~~~~~~~~~~ \beta3_{[season~i, ~SL~rainfall]}  ~ arthropod~biomass_{impute~i} +\\
&~~~~~~~~~~~~~~~~ \theta1_{day~i} + \tau1_{[season~i, ~SL~rainfall]} + \psi1_{[site~i, ~month~i]} \\
& Arthropod~biomass_{impute} \sim student~t(\nu = 2, ~\mu1_i, ~\sigma1) \\
& \mu1_i = \alpha3_{[season~i, ~SL~rainfall]} + \beta5_{[season~i, ~SL~rainfall]}\times~rainfall_{Wi} + \\ 
&~~~~~~~~~~~\beta6_{[season~i, ~SL~rainfall]} \times swarm~area_{impute~i} + \\
&~~~~~~~~~~~ \theta2_{day~i} + \tau2_{[season~i, ~SL~rainfall]} + \psi2_{[site~i, ~month~i]} \\
& swarm~area_{impute} \sim student~t(\nu = 2,~\mu2, ~\sigma2) \\
& \mu2_i = \alpha4_{[season~i, ~SL~rainfall]} + \beta7_{[season~i, ~SL~rainfall]} \times rainfall_{Wi} + \theta3_{day~i} + \\
&~~~~~~~~~~~\tau3_{[season~i, ~SL~rainfall]} + \psi3_{[site~i, ~month~i]} \\
& rainfall_{Wi} \sim normal(\mu_i,~ \sigma) \\
& \mu_i = \alpha2 + \beta4\times rainfall_{Wi+n} \\
\end{aligned}
$$
In the second part, we imputed `NA` observations in *swarm area* and *arthropod biomass*.


$$
\begin{aligned}
& swarm~area_{impute} \sim normal(\nu_{imputed1}, \sigma_{imputed1}) \\
& Arthropod~biomass_{impute} \sim normal(\nu_{imputed2}, \sigma_{imputed2}) \\
& \nu_{imputed1}, \nu_{imputed2} \sim normal(3.5, 1) \\
& \sigma_{imputed1}, \sigma_{imputed2} \sim exponential(1)\\
\end{aligned}
$$

Then, we use the Gaussian process to conduct partial pooling across correlated days. To do so, we used as prior a multivariate normal distribution and a quadratic kernel ($K  = \eta^2 exp(-\rho^2D_{ij}^2) + \delta_{ij} \times 0.01 \\$) to construct the covariance matrix based on the distance among sampled days.


$$
\begin{aligned}
& \left(\begin{array}{cc}
\theta1_{day~1} \\
\theta1_{day~2} \\
 ... \\
\theta1_{day~n} \\
\end{array}\right), \left(\begin{array}{cc}
\theta2_{day~1} \\
\theta2_{day~2} \\
 ... \\
\theta2_{day~n} \\
\end{array}\right), \left(\begin{array}{cc}
\theta3_{day~1} \\
\theta3_{day~2} \\
 ... \\
\theta3_{day~n} \\
\end{array}\right) \sim MVNormal \left(\begin{array}{cc}
\begin{bmatrix}
0 \\
0 \\
... \\
0 \\
\end{bmatrix}
K \\
\end{array}\right) \\
& K  = \eta^2 exp(-\rho^2D_{ij}^2) + \delta_{ij} \times 0.01 \\
& \eta \sim exponential(3) \\
& \rho \sim exponential(0.5) \\
& \delta  \sim exponential(2) \\
\end{aligned}
$$

Finally, we assign skeptical priors of strong effects and encompassing values within the plausible range of the response variables. We used partial polling to estimate the parameters of group-level effects ($\tau$ and $\psi$ parameters) and used a non-centered parameterization to improve computational efficiency.

$$
\begin{aligned}
& \alpha1_{[season~i, ~SL~rainfall]} \sim normal(2.5, 2) \\
& \alpha2 \sim normal(0, 1) \\
& \alpha3_{[season~i, ~SL~rainfall]} \sim normal(2.5, 1) \\
& \alpha4_{[season~i, ~SL~rainfall]} \sim normal(3, 1) \\
& \beta1_{[season~i, ~SL~rainfall]}, \beta2_{[season~i, ~SL~rainfall]}, \beta3_{[season~i, ~SL~rainfall]}, \beta4 \sim normal(0, 0.5)\\
& \beta5_{[season~i, ~SL~rainfall]},\beta6_{[season~i, ~SL~rainfall]}, \beta7_{[season~i, ~SL~rainfall]} \sim normal(0, 0.5)\\
& z_{\tau1}, z_{\tau2}, z_{\tau3} \sim normal(0, 0.5) \\
& \mu_{\tau1}, \mu_{\tau2}, \mu_{\tau3} \sim normal(0, 0.5) \\
& \sigma_{\tau1}, \sigma_{\tau2}, \sigma_{\tau3} \sim exponential(1) \\
& z_{\psi1}, z_{\psi2}, z_{\psi3} \sim normal(0, 0.5) \\
& \mu_{\psi1}, \mu_{\psi2}, \mu_{\psi3} \sim normal(0, 0.5) \\
& \sigma_{\psi1}, \sigma_{\psi2}, \sigma_{\psi3} \sim exponential(1) \\
& \tau1_{[season~i, ~SL~rainfall]} = \mu_{\tau1} + z_{\tau1} \times \sigma_{\tau1} \\
& \tau2_{[season~i, ~SL~rainfall]} = \mu_{\tau2} + z_{\tau2} \times \sigma_{\tau2} \\
& \tau3_{[season~i, ~SL~rainfall]} = \mu_{\tau3} + z_{\tau3} \times \sigma_{\tau3} \\
& \psi1_{[site~i, month~i]} = {\mu_\psi1} + z_{\psi1} \times \sigma_{\psi1} \\
& \psi2_{[site~i, month~i]} = {\mu_\psi2} + z_{\psi2} \times \sigma_{\psi2} \\
& \psi3_{[site~i, month~i]} = {\mu_\psi3} + z_{\psi3} \times \sigma_{\psi3} \\
& \phi \sim exponential(1) \\
\end{aligned}
$$

\newpage

Putting it all together, we have:

$$
{\tiny
\begin{aligned}
& Network~size_i \sim Negative~binomial(\lambda_i, ~\phi) \\
& log(\lambda_i) = \alpha1_{[season~i, ~total~rainfall]} + \beta1_{[season~i, ~total~rainfall]}\times rainfall_{Wi} + \\
&~~~~~~~~~~~~~~~~ \beta2_{[season~i, ~total~rainfall]} \times ~ swarm~area_{impute~i} + \\ &~~~~~~~~~~~~~~~~ \beta3_{[season~i, ~total~rainfall]}  ~ arthropod~biomass_{impute~i} +\\
&~~~~~~~~~~~~~~~~ \theta1_{day~i} + \tau1_{[[season~i, ~total~rainfall]]} + \psi1_{[site~i, ~month~i]} \\
& Arthropod~biomass_{impute} \sim student~t(\nu = 2, ~\mu1_i, ~\sigma1) \\
& \mu1_i = \alpha3_{[season~i, ~total~rainfall]} + \beta5_{[season~i, ~total~rainfall]}\times~rainfall_{Wi} + \\ 
&~~~~~~~~~~~\beta6_{[season~i, ~total~rainfall]} \times swarm~area_{impute~i} + \\
&~~~~~~~~~~~ \theta2_{day~i} + \tau2_{[season~i, ~total~rainfall]} + \psi2_{[site~i, ~month~i]} \\
& swarm~area_{impute} \sim student~t(\nu = 2,~\mu2, ~\sigma2) \\
& \mu2_i = \alpha4_{[season~i, ~total~rainfall]} + \beta7_{[season~i, ~total~rainfall]} \times rainfall_{Wi} + \theta3_{day~i} + \\
&~~~~~~~~~~~\tau3_{[season~i, ~total~rainfall]} + \psi3_{[site~i, ~month~i]} \\
& rainfall_{Wi} \sim normal(\mu_i,~ \sigma) \\
& \mu_i = \alpha2 + \beta4\times rainfall_{Wi+n} \\
& swarm~area_{impute} \sim normal(\nu_{imputed1}, \sigma_{imputed1}) \\
& Arthropod~biomass_{impute} \sim normal(\nu_{imputed2}, \sigma_{imputed2}) \\
& \nu_{imputed1}, \nu_{imputed2} \sim normal(3.5, 1) \\
& \sigma_{imputed1}, \sigma_{imputed2} \sim exponential(1)\\
& \left(\begin{array}{cc}
\theta1_{day~1} \\
\theta1_{day~2} \\
 ... \\
\theta1_{day~n} \\
\end{array}\right), \left(\begin{array}{cc}
\theta2_{day~1} \\
\theta2_{day~2} \\
 ... \\
\theta2_{day~n} \\
\end{array}\right), \left(\begin{array}{cc}
\theta3_{day~1} \\
\theta3_{day~2} \\
 ... \\
\theta3_{day~n} \\
\end{array}\right) \sim MVNormal \left(\begin{array}{cc}
\begin{bmatrix}
0 \\
0 \\
... \\
0 \\
\end{bmatrix}
K \\
\end{array}\right) \\
& K  = \eta^2 exp(-\rho^2D_{ij}^2) + \delta_{ij} \times 0.01 \\
& \eta \sim exponential(3) \\
& \rho \sim exponential(0.5) \\
& \delta  \sim exponential(2) \\
& \alpha1_{[season~i, ~SL~rainfall]} \sim normal(2.5, 2) \\
& \alpha2 \sim normal(0, 1) \\
& \alpha3_{[season~i, ~SL~rainfall]} \sim normal(2.5, 1) \\
& \alpha4_{[season~i, ~SL~rainfall]} \sim normal(3, 1) \\
& \beta1_{[season~i, ~SL~rainfall]}, \beta2_{[season~i, ~SL~rainfall]}, \beta3_{[season~i, ~SL~rainfall]}, \beta4 \sim normal(0, 0.5)\\
& \beta5_{[season~i, ~SL~rainfall]},\beta6_{[season~i, ~SL~rainfall]}, \beta7_{[season~i, ~SL~rainfall]} \sim normal(0, 0.5)\\
& z_{\tau1}, z_{\tau2}, z_{\tau3} \sim normal(0, 0.5) \\
& \mu_{\tau1}, \mu_{\tau2}, \mu_{\tau3} \sim normal(0, 0.5) \\
& \sigma_{\tau1}, \sigma_{\tau2}, \sigma_{\tau3} \sim exponential(1) \\
& z_{\psi1}, z_{\psi2}, z_{\psi3} \sim normal(0, 0.5) \\
& \mu_{\psi1}, \mu_{\psi2}, \mu_{\psi3} \sim normal(0, 0.5) \\
& \sigma_{\psi1}, \sigma_{\psi2}, \sigma_{\psi3} \sim exponential(1) \\
& \tau1_{[season~i, ~SL~rainfall]} = \mu_{\tau1} + z_{\tau1} \times \sigma_{\tau1} \\
& \tau2_{[season~i, ~SL~rainfall]} = \mu_{\tau2} + z_{\tau2} \times \sigma_{\tau2} \\
& \tau3_{[season~i, ~SL~rainfall]} = \mu_{\tau3} + z_{\tau3} \times \sigma_{\tau3} \\
& \psi1_{[site~i, month~i]} = {\mu_\psi1} + z_{\psi1} \times \sigma_{\psi1} \\
& \psi2_{[site~i, month~i]} = {\mu_\psi2} + z_{\psi2} \times \sigma_{\psi2} \\
& \psi3_{[site~i, month~i]} = {\mu_\psi3} + z_{\psi3} \times \sigma_{\psi3} \\
& \phi \sim exponential(1) \\
\end{aligned}}
$$

### Window 1 model

#### Stan code

```{r, eval=FALSE}
cat(file = 'w1_net_size.stan', 
    "
    
    functions {
    
      vector scale(vector x) {
        int N = dims(x)[1];
        real mu = mean(x);
        real sigma = sd(x);
        vector[N] scaled_v;
    
        for (i in 1:N) {
          scaled_v[i] = (x[i] - mu) / sigma;
        }
        return scaled_v;
      }  
    
      vector merge_missing(int[] miss_indxex, vector x_obs, vector x_miss) {
                int N = dims(x_obs)[1];
                int N_miss = dims(x_miss)[1];
                vector[N] merge;
                merge = x_obs;
                for (i in 1:N_miss) {
                    merge[miss_indxex[i]] = x_miss[i];
                }
            return merge;
          }
    
    
      matrix cov_GPL2(matrix x,
                      real eta,
                      real rho,
                      real delta) {
                      
                      int N = dims(x)[1];
                      matrix[N, N] K;
    
                      for (i in 1:(N-1)) {
                        K[i, i] = eta + delta;
                        for (j in (i + 1):N) {
                          K[i, j] = eta * exp(-rho * square(x[i, j]));
                          K[j, i] = K[i, j];
                        }
                      }
                      K[N, N] = eta + delta;
                      return K;
                      }
    }
    
    data {
      int N;
      int N_day;
      int N_month;
      int N_season;
      int N_site;
      int N_dim_day;
      int N_naSwarmBio;
      int N_naSwarmINI;
      int N_naSwarmFIN;
      array[N_naSwarmBio] int SwarmB_missindx;
      array[N_naSwarmINI] int SwarmINI_missindx;
      array[N_naSwarmFIN] int SwarmFIN_missindx;
      array[N] int net_size;
      array[N] int day;
      array[N] int month;
      array[N] int season;
      array[N] int site;
      vector[N] swarm_biomass;
      vector[N] swarm_area_inital;
      vector[N] swarm_area_final;
      array[N] int cum_rainfall_W1;
      array[N] int cum_rainfall_W5;
      matrix[N_dim_day, N_dim_day] dist_day;
    }
    
    parameters {
      /////////////
      ///////////// imputed variables
      vector[N_naSwarmBio] SBiomass_impute;
      real mu_sb;
      real<lower = 0> sigma_sb;
      vector[N_naSwarmINI] SwarmINI_impute;
      real mu_sbINI;
      real<lower = 0> sigma_sbINI;
      vector[N_naSwarmFIN] SwarmFIN_impute;
      real mu_sbFIN;
      real<lower = 0> sigma_sbFIN;
    
      //////////////
      ///////////// rain_i+n -> rain_i
      real a_e1;
      real beta_rainW2_e1;
      real<lower = 0> sigma_e1;
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm
      matrix[N_site, N_season] a_e2;
      matrix[N_site, N_season] beta_rainW1_e2;
      real<lower = 0> sigma_e2;
    
      vector[N_day] z_theta_e2;
      real<lower = 0> eta_theta_e2;
      real<lower = 0> rho_theta_e2;
    
      matrix[N_season, N_month] z_tau_e2;
      real mu_tau_e2;
      real<lower = 0> sigma_tau_e2;
    
      matrix[N_site, N_month] z_psi_e2;
      real mu_psi_e2;
      real<lower = 0> sigma_psi_e2;
      
      ////////////////////
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      matrix[N_site, N_season] a_e3;
      matrix[N_site, N_season] beta_rainW1_e3;
      matrix[N_site, N_season] beta_sawrA_e3;
      real<lower = 0> sigma_e3;
    
      vector[N_day] z_theta_e3;
      real<lower = 0> eta_theta_e3;
      real<lower = 0> rho_theta_e3;
    
      matrix[N_season, N_month] z_tau_e3;
      real mu_tau_e3;
      real<lower = 0> sigma_tau_e3;
    
      matrix[N_site, N_month] z_psi_e3;
      real mu_psi_e3;
      real<lower = 0> sigma_psi_e3;
      
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      matrix[N_site, N_season] a_e4;
      matrix[N_site, N_season] beta_rainW1_e4;
      matrix[N_site, N_season] beta_sawrA_e4;
      matrix[N_site, N_season] beta_swarmB_e4;
      real<lower = 0> sigma_e4;
    
      vector[N_day] z_theta_e4;
      real<lower = 0> eta_theta_e4;
      real<lower = 0> rho_theta_e4;
    
      matrix[N_season, N_month] z_tau_e4;
      real mu_tau_e4;
      real<lower = 0> sigma_tau_e4;
    
      matrix[N_site, N_month] z_psi_e4;
      real mu_psi_e4;
      real<lower = 0> sigma_psi_e4;
      
      ////////////////////
    
      
    }
    
    transformed parameters{
      
      ///////////////////////
      ///////////////////////// imputed variables
      vector[N] swarm_area;
      vector[N] SBiomass_merge;
      SBiomass_merge = merge_missing(SwarmB_missindx, 
                                     to_vector(swarm_biomass), 
                                     SBiomass_impute);
      vector[N] swarmINI_merge;
      swarmINI_merge = merge_missing(SwarmINI_missindx, 
                                     to_vector(swarm_area_inital), 
                                     SwarmINI_impute);
      vector[N] swarmFIN_merge;
      swarmFIN_merge = merge_missing(SwarmFIN_missindx, 
                                     to_vector(swarm_area_final), 
                                     SwarmFIN_impute);
      swarm_area = (swarmINI_merge + swarmFIN_merge) / 2;
      // swarm_area = scale(swarm_area);
      // SBiomass_merge = scale(SBiomass_merge);
    
      ///////////////////
      ///////////////////////// rain_i -> swarm
      
      vector[N_day] theta_e2;
      matrix[N_dim_day, N_dim_day] sigma_theta_e2;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e2;
      sigma_theta_e2 = cov_GPL2(dist_day, eta_theta_e2, rho_theta_e2, 0.01);
      L_sigma_theta_e2 = cholesky_decompose(sigma_theta_e2);
      theta_e2 = L_sigma_theta_e2 * z_theta_e2;
    
      matrix[N_season, N_month] tau_e2;
      matrix[N_site, N_month] psi_e2;
      tau_e2 = mu_tau_e2 + z_tau_e2 * sigma_tau_e2;
      psi_e2 = mu_psi_e2 + z_psi_e2 * sigma_psi_e2;
      
      ///////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      
      vector[N_day] theta_e3;
      matrix[N_dim_day, N_dim_day] sigma_theta_e3;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e3;
      sigma_theta_e3 = cov_GPL2(dist_day, eta_theta_e3, rho_theta_e3, 0.01);
      L_sigma_theta_e3 = cholesky_decompose(sigma_theta_e3);
      theta_e3 = L_sigma_theta_e3 * z_theta_e3;
    
      matrix[N_season, N_month] tau_e3;
      matrix[N_site, N_month] psi_e3;
      tau_e3 = mu_tau_e3 + z_tau_e3 * sigma_tau_e3;
      psi_e3 = mu_psi_e3 + z_psi_e3 * sigma_psi_e3;
    
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      
      vector[N_day] theta_e4;
      matrix[N_dim_day, N_dim_day] sigma_theta_e4;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e4;
      sigma_theta_e4 = cov_GPL2(dist_day, eta_theta_e4, rho_theta_e4, 0.01);
      L_sigma_theta_e4 = cholesky_decompose(sigma_theta_e4);
      theta_e4 = L_sigma_theta_e4 * z_theta_e4;
    
      matrix[N_season, N_month] tau_e4;
      matrix[N_site, N_month] psi_e4;
      tau_e4 = mu_tau_e4 + z_tau_e4 * sigma_tau_e4;
      psi_e4 = mu_psi_e4 + z_psi_e4 * sigma_psi_e4;
    
      ///////////////////
    }
    
    model {
      ///////////////////////
      /////////////////////// imputed variables
      mu_sb ~ normal(3.5, 1);
      sigma_sb ~ exponential(1);
      SBiomass_merge ~ normal(mu_sb, sigma_sb);
      mu_sbINI ~ normal(3.5, 1);
      sigma_sbINI ~ exponential(1);
      swarmINI_merge ~ normal(mu_sbINI, sigma_sbINI);
      mu_sbFIN ~ normal(3.5, 1);
      sigma_sbFIN ~ exponential(1);
      swarmFIN_merge ~ normal(mu_sbFIN, sigma_sbFIN);
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      vector[N] mu_e1;
      a_e1 ~ normal(0, 1);
      beta_rainW2_e1 ~ normal(0, 0.5);
      sigma_e1 ~ exponential(1);
      
      ///////////////////
      /////////////////// rain_i -> swarm
      to_vector(a_e2) ~ normal(3, 1);
      sigma_e2 ~ exponential(1);
      to_vector(beta_rainW1_e2) ~ normal(0, 0.25);
    
      z_theta_e2 ~ normal(0, 0.5);     
      eta_theta_e2 ~ exponential(3);   
      rho_theta_e2 ~ exponential(0.5); 
      
      to_vector(z_tau_e2) ~ normal(0, 0.5);
      mu_tau_e2 ~ normal(0, 0.5);
      sigma_tau_e2 ~ exponential(1);
    
      to_vector(z_psi_e2) ~ normal(0, 0.5);
      mu_psi_e2 ~ normal(0, 0.5);
      sigma_psi_e2 ~ exponential(1);
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      to_vector(a_e3) ~ normal(2.5, 1);
      sigma_e3 ~ exponential(1);
      to_vector(beta_rainW1_e3) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e3) ~ normal(0, 3);
    
      z_theta_e3 ~ normal(0, 1);
      eta_theta_e3 ~ exponential(3);
      rho_theta_e3 ~ exponential(0.5);
      
      to_vector(z_tau_e3) ~ normal(0, 0.5);
      mu_tau_e3 ~ normal(0, 0.5);
      sigma_tau_e3 ~ exponential(1);
    
      to_vector(z_psi_e3) ~ normal(0, 0.5);
      mu_psi_e3 ~ normal(0, 0.5);
      sigma_psi_e3 ~ exponential(1);
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      to_vector(a_e4) ~ normal(2.5, 2);
      sigma_e4 ~ exponential(1);
      to_vector(beta_rainW1_e4) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e4) ~ normal(0, 0.5);
      to_vector(beta_swarmB_e4) ~ normal(0, 0.5);
    
      z_theta_e4 ~ normal(0, 1);
      eta_theta_e4 ~ exponential(3);
      rho_theta_e4 ~ exponential(0.5);
      
      to_vector(z_tau_e4) ~ normal(0, 0.5);
      mu_tau_e4 ~ normal(0, 0.5);
      sigma_tau_e4 ~ exponential(1);
    
      to_vector(z_psi_e4) ~ normal(0, 0.5);
      mu_psi_e4 ~ normal(0, 0.5);
      sigma_psi_e4 ~ exponential(1);
      
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      for (i in 1:N) {
        cum_rainfall_W1[i] ~ normal(a_e1 + beta_rainW2_e1 * cum_rainfall_W5[i], 
                                    sigma_e1);
      }
    
      ///////////////////
      /////////////////// rain_i -> swarm
      for (i in 1:N) {
        swarm_area[i] ~ student_t(2,
                                  a_e2[site[i], season[i]] + 
                                  beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W1[i] +
                                  theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                                  psi_e2[site[i], month[i]], 
                                  sigma_e2);
      }
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      for (i in 1:N) {
        SBiomass_merge[i] ~ student_t(2,
                                     a_e3[site[i], season[i]] + 
                                     beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W1[i] +
                                     beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                                     theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                                     psi_e3[site[i], month[i]], 
                                     sigma_e3);
      }
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      for (i in 1:N) {
        net_size[i] ~ neg_binomial_2(exp(a_e4[site[i], season[i]] + 
                                     beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W1[i] +
                                     beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                                     beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                                     theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                                     psi_e4[site[i], month[i]]),
                                     sigma_e4);
      }
    }
    
    generated quantities {
      vector[N] mu_e1;
      vector[N] mu_e2;
      vector[N] mu_e3;
      vector[N] mu_e4;
      array[N] real ppcheck_e1;
      array[N] real ppcheck_e2;
      array[N] real ppcheck_e3;
      array[N] int ppcheck_e4;
      
      for (i in 1:N) {
        mu_e1[i] = a_e1 + beta_rainW2_e1 * cum_rainfall_W5[i]; 
      }
    
      ppcheck_e1 = normal_rng(mu_e1, sigma_e1);
    
      for (i in 1:N) {
        mu_e2[i] = a_e2[site[i], season[i]] + beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W1[i] +
                   theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                   psi_e2[site[i], month[i]];
      }
      
      ppcheck_e2 = student_t_rng(2, mu_e2, sigma_e2);
    
    
      for (i in 1:N) {
        mu_e3[i] = a_e3[site[i], season[i]] + 
                   beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W1[i] +
                   beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                   theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                   psi_e3[site[i], month[i]];
      }
      
      ppcheck_e3 = student_t_rng(2, mu_e3, sigma_e3);
    
      for (i in 1:N) {
        mu_e4[i] = a_e4[site[i], season[i]] + 
                   beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W1[i] +
                   beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                   beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                   theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                   psi_e4[site[i], month[i]];
        mu_e4[i] = exp(mu_e4[i]);
      }
    
      ppcheck_e4 = neg_binomial_2_rng(mu_e4, sigma_e4);
    
    }
    ")
```

#### Running MCMC algorith

```{r, eval=FALSE}
file <- paste(getwd(), '/w1_net_size.stan', sep ='')

fit_net_sizeW1 <- cmdstan_model(file, compile = T)

mod_net_sizeW1_obs <- 
  fit_net_sizeW1$sample(
    data = network_metrics_S_OBS, 
    chains = 3, 
    parallel_chains = 3, 
    iter_sampling = 8e3, 
    iter_warmup = 500, 
    thin = 10, 
    seed = 123
  )
```


```{r, echo=FALSE}
mod_net_sizeW1_obs <- readRDS('causal_mod_net_sizeW1.rds')
```

#### Model diagnostic

```{r, fig.height=15, fig.cap="Rhat values and ess of group-level parameters from the generative model explaining the effect of cumulative rainfall during W1, on network size of ant followers birds."}

par(mfrow = c(5, 2), mar = c(4, 4, 1.5, 1))
par(mfrow = c(5, 2), mar = c(4, 4, 1.5, 1))
mod_diagnostics(mod_net_sizeW1_obs, 
                mod_net_sizeW1_obs$summary(
                  unique(paste('psi_e2[', 
                               network_metrics_S_OBS$site,
                               ',',
                               network_metrics_S_OBS$month, ']', 
                               sep = '')))) 

mod_diagnostics(mod_net_sizeW1_obs, 
                mod_net_sizeW1_obs$summary(
                  unique(paste('psi_e3[', 
                               network_metrics_S_OBS$site,
                               ',',
                               network_metrics_S_OBS$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_net_sizeW1_obs, 
                mod_net_sizeW1_obs$summary(
                  unique(paste('psi_e4[', 
                               network_metrics_S_OBS$site,
                               ',',
                               network_metrics_S_OBS$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_net_sizeW1_obs, 
                mod_net_sizeW1_obs$summary(
                  unique(paste('tau_e4[', 
                               network_metrics_S_OBS$year,
                               ',',
                               network_metrics_S_OBS$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_net_sizeW1_obs, 
                mod_net_sizeW1_obs$summary(
                  unique(paste('tau_e2[', 
                               network_metrics_S_OBS$year,
                               ',',
                               network_metrics_S_OBS$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_net_sizeW1_obs, 
                mod_net_sizeW1_obs$summary(
                  unique(paste('tau_e3[', 
                               network_metrics_S_OBS$year,
                               ',',
                               network_metrics_S_OBS$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_net_sizeW1_obs, 
                mod_net_sizeW1_obs$summary(paste('theta_e4[', 
                                                 1:network_metrics_S_OBS$N_day, ']', 
                                                 sep = '')))
mod_diagnostics(mod_net_sizeW1_obs, 
                mod_net_sizeW1_obs$summary(paste('theta_e3[', 
                                                 1:network_metrics_S_OBS$N_day, ']', 
                                                 sep = '')))

mod_diagnostics(mod_net_sizeW1_obs, 
                mod_net_sizeW1_obs$summary(paste('theta_e2[', 
                                                 1:network_metrics_S_OBS$N_day, ']', 
                                                 sep = '')))
```


```{r, fig.cap="Rhat values and ess of slope, intercept, and dispersion parameters  from the generative model explaining the effect of cumulative rainfall during W1, on network size of ant followers birds."}
summary_net_sizeW1 <- mod_net_sizeW1_obs$summary(c('beta_rainW2_e1', 
                                                   'beta_rainW1_e2',
                                                   'beta_rainW1_e3',
                                                   'beta_rainW1_e4',
                                                   'beta_sawrA_e3',
                                                   'beta_sawrA_e4',
                                                   'beta_swarmB_e4', 
                                                   'a_e1', 'a_e2', 
                                                   'a_e3', 'a_e4',
                                                   'sigma_e1', 'sigma_e2', 
                                                   'sigma_e3', 'sigma_e4', 
                                                   'swarm_area',
                                                   'SBiomass_merge',
                                                   'lp__'))


mod_diagnostics(mod_net_sizeW1_obs, summary_net_sizeW1)
```

```{r, fig.cap= "Posterior predictive checks of cumulative rainfall W1"}
post_net_sizeW1_obs <- mod_net_sizeW1_obs$draws(c('beta_rainW2_e1', 
                                                  'beta_rainW1_e2',
                                                  'beta_rainW1_e3',
                                                  'beta_rainW1_e4',
                                                  'beta_sawrA_e3',
                                                  'beta_sawrA_e4',
                                                  'beta_swarmB_e4', 
                                                  'a_e1', 'a_e2', 'a_e3', 'a_e4',
                                                  'sigma_e1', 'sigma_e2', 
                                                  'sigma_e3', 'sigma_e4',
                                                  'swarm_area',
                                                  'SBiomass_merge'
), 
format = 'df')

ppcheck_swarmA <- mod_net_sizeW1_obs$draws('ppcheck_e2', format = 'matrix')
ppcheck_swarmB <- mod_net_sizeW1_obs$draws('ppcheck_e3', format = 'matrix')
ppcheck_net_size <- mod_net_sizeW1_obs$draws('ppcheck_e4', format = 'matrix')
ppcheck_R1 <- mod_net_sizeW1_obs$draws('ppcheck_e1', format = 'matrix')

swarm_area <- apply(post_net_sizeW1_obs[, grep('swarm_area', colnames(post_net_sizeW1_obs))], 
                    2, mean)

swarm_BM <- 
  apply(post_net_sizeW1_obs[, grep('SBiomass_merge', colnames(post_net_sizeW1_obs))], 
        2, mean)

par(mfrow = c(2, 2), mar = c(4, 4, 1, 1))
plot(density(network_metrics_S_OBS$cum_rainfall_W1), 
     main = '', xlab = 'Cum rainfall W1')
for(i in 1:100) lines(density(ppcheck_R1[i, ]), lwd = 0.1)
lines(density(network_metrics_S_OBS$cum_rainfall_W1), col = 'red')

plot(density(swarm_area), main = '', xlab = 'Swarm area')
for(i in 1:100) lines(density(ppcheck_swarmA[i, ]), lwd = 0.1)
lines(density(swarm_area), col = 'red')

plot(density(swarm_BM), main = '', xlab = 'Arthropod biomass')
for(i in 1:100) lines(density(ppcheck_swarmB[i, ]), lwd = 0.1)
lines(density(swarm_BM), col = 'red')

plot(density(network_metrics_S_OBS$net_size), 
     main = '', xlab = 'Net size')
for(i in 1:100) lines(density(ppcheck_net_size[i, ]), lwd = 0.1)
lines(density(network_metrics_S_OBS$net_size), col = 'red')

post_beta_net_sizeW1 <- gather(post_net_sizeW1_obs[, grep('beta', colnames(post_net_sizeW1_obs))])

post_beta_net_sizeW1$key <- as.factor(post_beta_net_sizeW1$key)

```

### Window 5 model

#### Stan code

```{r, eval=FALSE}
cat(file = 'w5_net_size.stan', 
    "
    
    functions {
    
      vector scale(vector x) {
        int N = dims(x)[1];
        real mu = mean(x);
        real sigma = sd(x);
        vector[N] scaled_v;
    
        for (i in 1:N) {
          scaled_v[i] = (x[i] - mu) / sigma;
        }
        return scaled_v;
      }  
    
      vector merge_missing(int[] miss_indxex, vector x_obs, vector x_miss) {
                int N = dims(x_obs)[1];
                int N_miss = dims(x_miss)[1];
                vector[N] merge;
                merge = x_obs;
                for (i in 1:N_miss) {
                    merge[miss_indxex[i]] = x_miss[i];
                }
            return merge;
          }
    
    
      matrix cov_GPL2(matrix x,
                      real eta,
                      real rho,
                      real delta) {
                      
                      int N = dims(x)[1];
                      matrix[N, N] K;
    
                      for (i in 1:(N-1)) {
                        K[i, i] = eta + delta;
                        for (j in (i + 1):N) {
                          K[i, j] = eta * exp(-rho * square(x[i, j]));
                          K[j, i] = K[i, j];
                        }
                      }
                      K[N, N] = eta + delta;
                      return K;
                      }
    }
    
    data {
      int N;
      int N_day;
      int N_month;
      int N_season;
      int N_site;
      int N_dim_day;
      int N_naSwarmBio;
      int N_naSwarmINI;
      int N_naSwarmFIN;
      array[N_naSwarmBio] int SwarmB_missindx;
      array[N_naSwarmINI] int SwarmINI_missindx;
      array[N_naSwarmFIN] int SwarmFIN_missindx;
      array[N] int net_size;
      array[N] int day;
      array[N] int month;
      array[N] int season;
      array[N] int site;
      vector[N] swarm_biomass;
      vector[N] swarm_area_inital;
      vector[N] swarm_area_final;
      array[N] int cum_rainfall_W10;
      array[N] int cum_rainfall_W5;
      matrix[N_dim_day, N_dim_day] dist_day;
    }
    
    parameters {
      /////////////
      ///////////// imputed variables
      vector[N_naSwarmBio] SBiomass_impute;
      real mu_sb;
      real<lower = 0> sigma_sb;
      vector[N_naSwarmINI] SwarmINI_impute;
      real mu_sbINI;
      real<lower = 0> sigma_sbINI;
      vector[N_naSwarmFIN] SwarmFIN_impute;
      real mu_sbFIN;
      real<lower = 0> sigma_sbFIN;
    
      //////////////
      ///////////// rain_i+n -> rain_i
      real a_e1;
      real beta_rainW2_e1;
      real<lower = 0> sigma_e1;
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm
      matrix[N_site, N_season] a_e2;
      matrix[N_site, N_season] beta_rainW1_e2;
      real<lower = 0> sigma_e2;
    
      vector[N_day] z_theta_e2;
      real<lower = 0> eta_theta_e2;
      real<lower = 0> rho_theta_e2;
    
      matrix[N_season, N_month] z_tau_e2;
      real mu_tau_e2;
      real<lower = 0> sigma_tau_e2;
    
      matrix[N_site, N_month] z_psi_e2;
      real mu_psi_e2;
      real<lower = 0> sigma_psi_e2;
      
      ////////////////////
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      matrix[N_site, N_season] a_e3;
      matrix[N_site, N_season] beta_rainW1_e3;
      matrix[N_site, N_season] beta_sawrA_e3;
      real<lower = 0> sigma_e3;
    
      vector[N_day] z_theta_e3;
      real<lower = 0> eta_theta_e3;
      real<lower = 0> rho_theta_e3;
    
      matrix[N_season, N_month] z_tau_e3;
      real mu_tau_e3;
      real<lower = 0> sigma_tau_e3;
    
      matrix[N_site, N_month] z_psi_e3;
      real mu_psi_e3;
      real<lower = 0> sigma_psi_e3;
      
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      matrix[N_site, N_season] a_e4;
      matrix[N_site, N_season] beta_rainW1_e4;
      matrix[N_site, N_season] beta_sawrA_e4;
      matrix[N_site, N_season] beta_swarmB_e4;
      real<lower = 0> sigma_e4;
    
      vector[N_day] z_theta_e4;
      real<lower = 0> eta_theta_e4;
      real<lower = 0> rho_theta_e4;
    
      matrix[N_season, N_month] z_tau_e4;
      real mu_tau_e4;
      real<lower = 0> sigma_tau_e4;
    
      matrix[N_site, N_month] z_psi_e4;
      real mu_psi_e4;
      real<lower = 0> sigma_psi_e4;
      
      ////////////////////
    
      
    }
    
    transformed parameters{
      
      ///////////////////////
      ///////////////////////// imputed variables
      vector[N] swarm_area;
      vector[N] SBiomass_merge;
      SBiomass_merge = merge_missing(SwarmB_missindx, 
                                     to_vector(swarm_biomass), 
                                     SBiomass_impute);
      vector[N] swarmINI_merge;
      swarmINI_merge = merge_missing(SwarmINI_missindx, 
                                     to_vector(swarm_area_inital), 
                                     SwarmINI_impute);
      vector[N] swarmFIN_merge;
      swarmFIN_merge = merge_missing(SwarmFIN_missindx, 
                                     to_vector(swarm_area_final), 
                                     SwarmFIN_impute);
      swarm_area = (swarmINI_merge + swarmFIN_merge) / 2;
      // swarm_area = scale(swarm_area);
      // SBiomass_merge = scale(SBiomass_merge);
    
      ///////////////////
      ///////////////////////// rain_i -> swarm
      
      vector[N_day] theta_e2;
      matrix[N_dim_day, N_dim_day] sigma_theta_e2;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e2;
      sigma_theta_e2 = cov_GPL2(dist_day, eta_theta_e2, rho_theta_e2, 0.01);
      L_sigma_theta_e2 = cholesky_decompose(sigma_theta_e2);
      theta_e2 = L_sigma_theta_e2 * z_theta_e2;
    
      matrix[N_season, N_month] tau_e2;
      matrix[N_site, N_month] psi_e2;
      tau_e2 = mu_tau_e2 + z_tau_e2 * sigma_tau_e2;
      psi_e2 = mu_psi_e2 + z_psi_e2 * sigma_psi_e2;
      
      ///////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      
      vector[N_day] theta_e3;
      matrix[N_dim_day, N_dim_day] sigma_theta_e3;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e3;
      sigma_theta_e3 = cov_GPL2(dist_day, eta_theta_e3, rho_theta_e3, 0.01);
      L_sigma_theta_e3 = cholesky_decompose(sigma_theta_e3);
      theta_e3 = L_sigma_theta_e3 * z_theta_e3;
    
      matrix[N_season, N_month] tau_e3;
      matrix[N_site, N_month] psi_e3;
      tau_e3 = mu_tau_e3 + z_tau_e3 * sigma_tau_e3;
      psi_e3 = mu_psi_e3 + z_psi_e3 * sigma_psi_e3;
    
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      
      vector[N_day] theta_e4;
      matrix[N_dim_day, N_dim_day] sigma_theta_e4;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e4;
      sigma_theta_e4 = cov_GPL2(dist_day, eta_theta_e4, rho_theta_e4, 0.01);
      L_sigma_theta_e4 = cholesky_decompose(sigma_theta_e4);
      theta_e4 = L_sigma_theta_e4 * z_theta_e4;
    
      matrix[N_season, N_month] tau_e4;
      matrix[N_site, N_month] psi_e4;
      tau_e4 = mu_tau_e4 + z_tau_e4 * sigma_tau_e4;
      psi_e4 = mu_psi_e4 + z_psi_e4 * sigma_psi_e4;
    
      ///////////////////
    }
    
    model {
      ///////////////////////
      /////////////////////// imputed variables
      mu_sb ~ normal(3.5, 1);
      sigma_sb ~ exponential(1);
      SBiomass_merge ~ normal(mu_sb, sigma_sb);
      mu_sbINI ~ normal(3.5, 1);
      sigma_sbINI ~ exponential(1);
      swarmINI_merge ~ normal(mu_sbINI, sigma_sbINI);
      mu_sbFIN ~ normal(3.5, 1);
      sigma_sbFIN ~ exponential(1);
      swarmFIN_merge ~ normal(mu_sbFIN, sigma_sbFIN);
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      vector[N] mu_e1;
      a_e1 ~ normal(0, 1);
      beta_rainW2_e1 ~ normal(0, 0.5);
      sigma_e1 ~ exponential(1);
      
      ///////////////////
      /////////////////// rain_i -> swarm
      to_vector(a_e2) ~ normal(3, 1);
      sigma_e2 ~ exponential(1);
      to_vector(beta_rainW1_e2) ~ normal(0, 0.25);
    
      z_theta_e2 ~ normal(0, 0.5);     
      eta_theta_e2 ~ exponential(3);   
      rho_theta_e2 ~ exponential(0.5); 
      
      to_vector(z_tau_e2) ~ normal(0, 0.5);
      mu_tau_e2 ~ normal(0, 0.5);
      sigma_tau_e2 ~ exponential(1);
    
      to_vector(z_psi_e2) ~ normal(0, 0.5);
      mu_psi_e2 ~ normal(0, 0.5);
      sigma_psi_e2 ~ exponential(1);
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      to_vector(a_e3) ~ normal(2.5, 1);
      sigma_e3 ~ exponential(1);
      to_vector(beta_rainW1_e3) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e3) ~ normal(0, 3);
    
      z_theta_e3 ~ normal(0, 1);
      eta_theta_e3 ~ exponential(3);
      rho_theta_e3 ~ exponential(0.5);
      
      to_vector(z_tau_e3) ~ normal(0, 0.5);
      mu_tau_e3 ~ normal(0, 0.5);
      sigma_tau_e3 ~ exponential(1);
    
      to_vector(z_psi_e3) ~ normal(0, 0.5);
      mu_psi_e3 ~ normal(0, 0.5);
      sigma_psi_e3 ~ exponential(1);
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      to_vector(a_e4) ~ normal(2.5, 2);
      sigma_e4 ~ exponential(1);
      to_vector(beta_rainW1_e4) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e4) ~ normal(0, 0.5);
      to_vector(beta_swarmB_e4) ~ normal(0, 0.5);
    
      z_theta_e4 ~ normal(0, 1);
      eta_theta_e4 ~ exponential(3);
      rho_theta_e4 ~ exponential(0.5);
      
      to_vector(z_tau_e4) ~ normal(0, 0.5);
      mu_tau_e4 ~ normal(0, 0.5);
      sigma_tau_e4 ~ exponential(1);
    
      to_vector(z_psi_e4) ~ normal(0, 0.5);
      mu_psi_e4 ~ normal(0, 0.5);
      sigma_psi_e4 ~ exponential(1);
      
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      for (i in 1:N) {
        cum_rainfall_W5[i] ~ normal(a_e1 + beta_rainW2_e1 * cum_rainfall_W10[i], 
                                    sigma_e1);
      }
    
      ///////////////////
      /////////////////// rain_i -> swarm
      for (i in 1:N) {
        swarm_area[i] ~ student_t(2,
                                  a_e2[site[i], season[i]] +
                                  beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W5[i] +
                                  theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                                  psi_e2[site[i], month[i]], 
                                  sigma_e2);
      }
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      for (i in 1:N) {
        SBiomass_merge[i] ~ student_t(2,
                                     a_e3[site[i], season[i]] + 
                                     beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W5[i] +
                                     beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                                     theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                                     psi_e3[site[i], month[i]], 
                                     sigma_e3);
      }
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      for (i in 1:N) {
        net_size[i] ~ neg_binomial_2(exp(a_e4[site[i], season[i]] + 
                                     beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W5[i] +
                                     beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                                     beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                                     theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                                     psi_e4[site[i], month[i]]),
                                     sigma_e4);
      }
    }
    
    generated quantities {
      vector[N] mu_e1;
      vector[N] mu_e2;
      vector[N] mu_e3;
      vector[N] mu_e4;
      array[N] real ppcheck_e1;
      array[N] real ppcheck_e2;
      array[N] real ppcheck_e3;
      array[N] int ppcheck_e4;
      
      for (i in 1:N) {
        mu_e1[i] = a_e1 + beta_rainW2_e1 * cum_rainfall_W10[i]; 
      }
    
      ppcheck_e1 = normal_rng(mu_e1, sigma_e1);
    
      for (i in 1:N) {
        mu_e2[i] = a_e2[site[i], season[i]] + 
                   beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W5[i] +
                   theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                   psi_e2[site[i], month[i]];
      }
      
      ppcheck_e2 = student_t_rng(2, mu_e2, sigma_e2);
    
    
      for (i in 1:N) {
        mu_e3[i] = a_e3[site[i], season[i]] + 
                   beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W5[i] +
                   beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                   theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                   psi_e3[site[i], month[i]];
      }
      
      ppcheck_e3 = student_t_rng(2, mu_e3, sigma_e3);
    
      for (i in 1:N) {
        mu_e4[i] = a_e4[site[i], season[i]] + 
                   beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W5[i] +
                   beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                   beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                   theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                   psi_e4[site[i], month[i]];
        mu_e4[i] = exp(mu_e4[i]);
      }
    
      ppcheck_e4 = neg_binomial_2_rng(mu_e4, sigma_e4);
    
    }
    
    ")

```

#### Running MCMC algorithm


```{r, eval=FALSE}
file <- paste(getwd(), '/w5_net_size.stan', sep ='')

fit_net_sizeW5 <- cmdstan_model(file, compile = T)

mod_net_sizeW5_obs <- 
  fit_net_sizeW5$sample(
    data = network_metrics_S_OBS, 
    chains = 3, 
    parallel_chains = 3, 
    iter_sampling = 8e3, 
    iter_warmup = 500, 
    thin = 10, 
    seed = 123
  )

```

```{r, echo=FALSE, eval=TRUE}
mod_net_sizeW5_obs <- readRDS('causal_mod_net_sizeW5.rds')
```

#### Model diagnostics

```{r, fig.height=15, fig.cap="Rhat values and ess of group-level parameters from the generative model explaining the effect of cumulative rainfall during W5, on network size of ant followers birds."}

par(mfrow = c(5, 2), mar = c(4, 4, 1.5, 1))
mod_diagnostics(mod_net_sizeW5_obs, 
                mod_net_sizeW5_obs$summary(
                  unique(paste('psi_e2[', 
                               network_metrics_S_OBS$site,
                               ',',
                               network_metrics_S_OBS$month, ']', 
                               sep = '')))) 

mod_diagnostics(mod_net_sizeW5_obs, 
                mod_net_sizeW5_obs$summary(
                  unique(paste('psi_e3[', 
                               network_metrics_S_OBS$site,
                               ',',
                               network_metrics_S_OBS$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_net_sizeW5_obs, 
                mod_net_sizeW5_obs$summary(
                  unique(paste('psi_e4[', 
                               network_metrics_S_OBS$site,
                               ',',
                               network_metrics_S_OBS$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_net_sizeW5_obs, 
                mod_net_sizeW5_obs$summary(
                  unique(paste('tau_e4[', 
                               network_metrics_S_OBS$year,
                               ',',
                               network_metrics_S_OBS$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_net_sizeW5_obs, 
                mod_net_sizeW5_obs$summary(
                  unique(paste('tau_e2[', 
                               network_metrics_S_OBS$year,
                               ',',
                               network_metrics_S_OBS$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_net_sizeW5_obs, 
                mod_net_sizeW5_obs$summary(
                  unique(paste('tau_e3[', 
                               network_metrics_S_OBS$year,
                               ',',
                               network_metrics_S_OBS$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_net_sizeW5_obs, 
                mod_net_sizeW5_obs$summary(paste('theta_e4[', 
                                                 1:network_metrics_S_OBS$N_day, ']', 
                                                 sep = '')))
mod_diagnostics(mod_net_sizeW5_obs, 
                mod_net_sizeW5_obs$summary(paste('theta_e3[', 
                                                 1:network_metrics_S_OBS$N_day, ']', 
                                                 sep = '')))

mod_diagnostics(mod_net_sizeW5_obs, 
                mod_net_sizeW5_obs$summary(paste('theta_e2[', 
                                                 1:network_metrics_S_OBS$N_day, ']', 
                                                 sep = '')))
par(mfrow = c(1, 1))
```

```{r, fig.cap="Rhat values and ess of slope, intercept, and dispersion parameters  from the generative model explaining the effect of cumulative rainfall during W5, on network size of ant followers birds."}
summary_net_sizeW5 <- mod_net_sizeW5_obs$summary(c('beta_rainW2_e1', 
                                                   'beta_rainW1_e2',
                                                   'beta_rainW1_e3',
                                                   'beta_rainW1_e4',
                                                   'beta_sawrA_e3',
                                                   'beta_sawrA_e4',
                                                   'beta_swarmB_e4', 
                                                   'a_e1', 'a_e2', 
                                                   'a_e3', 'a_e4',
                                                   'sigma_e1', 'sigma_e2', 
                                                   'sigma_e3', 'sigma_e4', 
                                                   'swarm_area',
                                                   'SBiomass_merge',
                                                   'lp__'))


mod_diagnostics(mod_net_sizeW5_obs, summary_net_sizeW5)

```


```{r, fig.cap= "Posterior predictive checks"}
post_net_sizeW5_obs <- mod_net_sizeW5_obs$draws(c('beta_rainW2_e1', 
                                                  'beta_rainW1_e2',
                                                  'beta_rainW1_e3',
                                                  'beta_rainW1_e4',
                                                  'beta_sawrA_e3',
                                                  'beta_sawrA_e4',
                                                  'beta_swarmB_e4', 
                                                  'a_e1', 'a_e2', 'a_e3', 'a_e4',
                                                  'sigma_e1', 'sigma_e2', 
                                                  'sigma_e3', 'sigma_e4',
                                                  'swarm_area',
                                                  'SBiomass_merge'), format = 'df')

ppcheck_swarmA <- mod_net_sizeW5_obs$draws('ppcheck_e2', format = 'matrix')
ppcheck_swarmB <- mod_net_sizeW5_obs$draws('ppcheck_e3', format = 'matrix')
ppcheck_net_size <- mod_net_sizeW5_obs$draws('ppcheck_e4', format = 'matrix')
ppcheck_R1 <- mod_net_sizeW5_obs$draws('ppcheck_e1', format = 'matrix')

swarm_area <- apply(post_net_sizeW5_obs[, grep('swarm_area', colnames(post_net_sizeW5_obs))], 
                    2, mean)

swarm_BM <- 
  apply(post_net_sizeW5_obs[, grep('SBiomass_merge', colnames(post_net_sizeW5_obs))], 
        2, mean)

par(mfrow = c(2, 2), mar = c(4, 4, 1, 1))
plot(density(network_metrics_S_OBS$cum_rainfall_W5), 
     main = '', xlab = 'Cum rainfall W5')
for(i in 1:100) lines(density(ppcheck_R1[i, ]), lwd = 0.1)
lines(density(network_metrics_S_OBS$cum_rainfall_W5), col = 'red')

plot(density(swarm_area), main = '', xlab = 'Swarm area')
for(i in 1:100) lines(density(ppcheck_swarmA[i, ]), lwd = 0.1)
lines(density(swarm_area), col = 'red')

plot(density(swarm_BM), main = '', xlab = 'Arthropod biomass')
for(i in 1:100) lines(density(ppcheck_swarmB[i, ]), lwd = 0.1)
lines(density(swarm_BM), col = 'red')

plot(density(network_metrics_S_OBS$net_size), 
     main = '', xlab = 'Net size')
for(i in 1:100) lines(density(ppcheck_net_size[i, ]), lwd = 0.1)
lines(density(network_metrics_S_OBS$net_size), col = 'red')

post_beta_net_sizeW5 <- gather(post_net_sizeW5_obs[, grep('beta', colnames(post_net_sizeW5_obs))])

post_beta_net_sizeW5$key <- as.factor(post_beta_net_sizeW5$key)
```

### Window 10 model

#### Stan code

```{r, eval=FALSE}
cat(file = 'w10_net_size.stan', 
    "
    
    functions {
    
      vector scale(vector x) {
        int N = dims(x)[1];
        real mu = mean(x);
        real sigma = sd(x);
        vector[N] scaled_v;
    
        for (i in 1:N) {
          scaled_v[i] = (x[i] - mu) / sigma;
        }
        return scaled_v;
      }  
    
      vector merge_missing(int[] miss_indxex, vector x_obs, vector x_miss) {
                int N = dims(x_obs)[1];
                int N_miss = dims(x_miss)[1];
                vector[N] merge;
                merge = x_obs;
                for (i in 1:N_miss) {
                    merge[miss_indxex[i]] = x_miss[i];
                }
            return merge;
          }
    
    
      matrix cov_GPL2(matrix x,
                      real eta,
                      real rho,
                      real delta) {
                      
                      int N = dims(x)[1];
                      matrix[N, N] K;
    
                      for (i in 1:(N-1)) {
                        K[i, i] = eta + delta;
                        for (j in (i + 1):N) {
                          K[i, j] = eta * exp(-rho * square(x[i, j]));
                          K[j, i] = K[i, j];
                        }
                      }
                      K[N, N] = eta + delta;
                      return K;
                      }
    }
    
    data {
      int N;
      int N_day;
      int N_month;
      int N_season;
      int N_site;
      int N_dim_day;
      int N_naSwarmBio;
      int N_naSwarmINI;
      int N_naSwarmFIN;
      array[N_naSwarmBio] int SwarmB_missindx;
      array[N_naSwarmINI] int SwarmINI_missindx;
      array[N_naSwarmFIN] int SwarmFIN_missindx;
      array[N] int net_size;
      array[N] int day;
      array[N] int month;
      array[N] int season;
      array[N] int site;
      vector[N] swarm_biomass;
      vector[N] swarm_area_inital;
      vector[N] swarm_area_final;
      array[N] int cum_rainfall_W10;
      array[N] int cum_rainfall_W15;
      matrix[N_dim_day, N_dim_day] dist_day;
    }
    
    parameters {
      /////////////
      ///////////// imputed variables
      vector[N_naSwarmBio] SBiomass_impute;
      real mu_sb;
      real<lower = 0> sigma_sb;
      vector[N_naSwarmINI] SwarmINI_impute;
      real mu_sbINI;
      real<lower = 0> sigma_sbINI;
      vector[N_naSwarmFIN] SwarmFIN_impute;
      real mu_sbFIN;
      real<lower = 0> sigma_sbFIN;
    
      //////////////
      ///////////// rain_i+n -> rain_i
      real a_e1;
      real beta_rainW2_e1;
      real<lower = 0> sigma_e1;
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm
      matrix[N_site, N_season] a_e2;
      matrix[N_site, N_season] beta_rainW1_e2;
      real<lower = 0> sigma_e2;
    
      vector[N_day] z_theta_e2;
      real<lower = 0> eta_theta_e2;
      real<lower = 0> rho_theta_e2;
    
      matrix[N_season, N_month] z_tau_e2;
      real mu_tau_e2;
      real<lower = 0> sigma_tau_e2;
    
      matrix[N_site, N_month] z_psi_e2;
      real mu_psi_e2;
      real<lower = 0> sigma_psi_e2;
      
      ////////////////////
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      matrix[N_site, N_season] a_e3;
      matrix[N_site, N_season] beta_rainW1_e3;
      matrix[N_site, N_season] beta_sawrA_e3;
      real<lower = 0> sigma_e3;
    
      vector[N_day] z_theta_e3;
      real<lower = 0> eta_theta_e3;
      real<lower = 0> rho_theta_e3;
    
      matrix[N_season, N_month] z_tau_e3;
      real mu_tau_e3;
      real<lower = 0> sigma_tau_e3;
    
      matrix[N_site, N_month] z_psi_e3;
      real mu_psi_e3;
      real<lower = 0> sigma_psi_e3;
      
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      matrix[N_site, N_season] a_e4;
      matrix[N_site, N_season] beta_rainW1_e4;
      matrix[N_site, N_season] beta_sawrA_e4;
      matrix[N_site, N_season] beta_swarmB_e4;
      real<lower = 0> sigma_e4;
    
      vector[N_day] z_theta_e4;
      real<lower = 0> eta_theta_e4;
      real<lower = 0> rho_theta_e4;
    
      matrix[N_season, N_month] z_tau_e4;
      real mu_tau_e4;
      real<lower = 0> sigma_tau_e4;
    
      matrix[N_site, N_month] z_psi_e4;
      real mu_psi_e4;
      real<lower = 0> sigma_psi_e4;
      
      ////////////////////
    
      
    }
    
    transformed parameters{
      
      ///////////////////////
      ///////////////////////// imputed variables
      vector[N] swarm_area;
      vector[N] SBiomass_merge;
      SBiomass_merge = merge_missing(SwarmB_missindx, 
                                     to_vector(swarm_biomass), 
                                     SBiomass_impute);
      vector[N] swarmINI_merge;
      swarmINI_merge = merge_missing(SwarmINI_missindx, 
                                     to_vector(swarm_area_inital), 
                                     SwarmINI_impute);
      vector[N] swarmFIN_merge;
      swarmFIN_merge = merge_missing(SwarmFIN_missindx, 
                                     to_vector(swarm_area_final), 
                                     SwarmFIN_impute);
      swarm_area = (swarmINI_merge + swarmFIN_merge) / 2;
      // swarm_area = scale(swarm_area);
      // SBiomass_merge = scale(SBiomass_merge);
    
      ///////////////////
      ///////////////////////// rain_i -> swarm
      
      vector[N_day] theta_e2;
      matrix[N_dim_day, N_dim_day] sigma_theta_e2;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e2;
      sigma_theta_e2 = cov_GPL2(dist_day, eta_theta_e2, rho_theta_e2, 0.01);
      L_sigma_theta_e2 = cholesky_decompose(sigma_theta_e2);
      theta_e2 = L_sigma_theta_e2 * z_theta_e2;
    
      matrix[N_season, N_month] tau_e2;
      matrix[N_site, N_month] psi_e2;
      tau_e2 = mu_tau_e2 + z_tau_e2 * sigma_tau_e2;
      psi_e2 = mu_psi_e2 + z_psi_e2 * sigma_psi_e2;
      
      ///////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      
      vector[N_day] theta_e3;
      matrix[N_dim_day, N_dim_day] sigma_theta_e3;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e3;
      sigma_theta_e3 = cov_GPL2(dist_day, eta_theta_e3, rho_theta_e3, 0.01);
      L_sigma_theta_e3 = cholesky_decompose(sigma_theta_e3);
      theta_e3 = L_sigma_theta_e3 * z_theta_e3;
    
      matrix[N_season, N_month] tau_e3;
      matrix[N_site, N_month] psi_e3;
      tau_e3 = mu_tau_e3 + z_tau_e3 * sigma_tau_e3;
      psi_e3 = mu_psi_e3 + z_psi_e3 * sigma_psi_e3;
    
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      
      vector[N_day] theta_e4;
      matrix[N_dim_day, N_dim_day] sigma_theta_e4;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e4;
      sigma_theta_e4 = cov_GPL2(dist_day, eta_theta_e4, rho_theta_e4, 0.01);
      L_sigma_theta_e4 = cholesky_decompose(sigma_theta_e4);
      theta_e4 = L_sigma_theta_e4 * z_theta_e4;
    
      matrix[N_season, N_month] tau_e4;
      matrix[N_site, N_month] psi_e4;
      tau_e4 = mu_tau_e4 + z_tau_e4 * sigma_tau_e4;
      psi_e4 = mu_psi_e4 + z_psi_e4 * sigma_psi_e4;
    
      ///////////////////
    }
    
    model {
      ///////////////////////
      /////////////////////// imputed variables
      mu_sb ~ normal(3.5, 1);
      sigma_sb ~ exponential(1);
      SBiomass_merge ~ normal(mu_sb, sigma_sb);
      mu_sbINI ~ normal(3.5, 1);
      sigma_sbINI ~ exponential(1);
      swarmINI_merge ~ normal(mu_sbINI, sigma_sbINI);
      mu_sbFIN ~ normal(3.5, 1);
      sigma_sbFIN ~ exponential(1);
      swarmFIN_merge ~ normal(mu_sbFIN, sigma_sbFIN);
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      vector[N] mu_e1;
      a_e1 ~ normal(0, 1);
      beta_rainW2_e1 ~ normal(0, 0.5);
      sigma_e1 ~ exponential(1);
      
      ///////////////////
      /////////////////// rain_i -> swarm
      to_vector(a_e2) ~ normal(3, 1);
      sigma_e2 ~ exponential(1);
      to_vector(beta_rainW1_e2) ~ normal(0, 0.25);
    
      z_theta_e2 ~ normal(0, 0.5);     
      eta_theta_e2 ~ exponential(3);   
      rho_theta_e2 ~ exponential(0.5); 
      
      to_vector(z_tau_e2) ~ normal(0, 0.5);
      mu_tau_e2 ~ normal(0, 0.5);
      sigma_tau_e2 ~ exponential(1);
    
      to_vector(z_psi_e2) ~ normal(0, 0.5);
      mu_psi_e2 ~ normal(0, 0.5);
      sigma_psi_e2 ~ exponential(1);
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      to_vector(a_e3) ~ normal(2.5, 1);
      sigma_e3 ~ exponential(1);
      to_vector(beta_rainW1_e3) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e3) ~ normal(0, 3);
    
      z_theta_e3 ~ normal(0, 1);
      eta_theta_e3 ~ exponential(3);
      rho_theta_e3 ~ exponential(0.5);
      
      to_vector(z_tau_e3) ~ normal(0, 0.5);
      mu_tau_e3 ~ normal(0, 0.5);
      sigma_tau_e3 ~ exponential(1);
    
      to_vector(z_psi_e3) ~ normal(0, 0.5);
      mu_psi_e3 ~ normal(0, 0.5);
      sigma_psi_e3 ~ exponential(1);
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      to_vector(a_e4) ~ normal(2.5, 2);
      sigma_e4 ~ exponential(1);
      to_vector(beta_rainW1_e4) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e4) ~ normal(0, 0.5);
      to_vector(beta_swarmB_e4) ~ normal(0, 0.5);
    
      z_theta_e4 ~ normal(0, 1);
      eta_theta_e4 ~ exponential(3);
      rho_theta_e4 ~ exponential(0.5);
      
      to_vector(z_tau_e4) ~ normal(0, 0.5);
      mu_tau_e4 ~ normal(0, 0.5);
      sigma_tau_e4 ~ exponential(1);
    
      to_vector(z_psi_e4) ~ normal(0, 0.5);
      mu_psi_e4 ~ normal(0, 0.5);
      sigma_psi_e4 ~ exponential(1);
      
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      for (i in 1:N) {
        cum_rainfall_W10[i] ~ normal(a_e1 + beta_rainW2_e1 * cum_rainfall_W15[i], 
                                    sigma_e1);
      }
    
      ///////////////////
      /////////////////// rain_i -> swarm
      for (i in 1:N) {
        swarm_area[i] ~ student_t(2,
                                  a_e2[site[i], season[i]] + 
                                  beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W10[i] +
                                  theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                                  psi_e2[site[i], month[i]], 
                                  sigma_e2);
      }
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      for (i in 1:N) {
        SBiomass_merge[i] ~ student_t(2,
                                     a_e3[site[i], season[i]] + 
                                     beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W10[i] +
                                     beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                                     theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                                     psi_e3[site[i], month[i]], 
                                     sigma_e3);
      }
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      for (i in 1:N) {
        net_size[i] ~ neg_binomial_2(exp(a_e4[site[i], season[i]] + 
                                     beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W10[i] +
                                     beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                                     beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                                     theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                                     psi_e4[site[i], month[i]]),
                                     sigma_e4);
      }
    }
    
    generated quantities {
      vector[N] mu_e1;
      vector[N] mu_e2;
      vector[N] mu_e3;
      vector[N] mu_e4;
      array[N] real ppcheck_e1;
      array[N] real ppcheck_e2;
      array[N] real ppcheck_e3;
      array[N] int ppcheck_e4;
      
      for (i in 1:N) {
        mu_e1[i] = a_e1 + beta_rainW2_e1 * cum_rainfall_W15[i]; 
      }
    
      ppcheck_e1 = normal_rng(mu_e1, sigma_e1);
    
      for (i in 1:N) {
        mu_e2[i] = a_e2[site[i], season[i]] + 
                   beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W10[i] +
                   theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                   psi_e2[site[i], month[i]];
      }
      
      ppcheck_e2 = student_t_rng(2, mu_e2, sigma_e2);
    
    
      for (i in 1:N) {
        mu_e3[i] = a_e3[site[i], season[i]] + 
                   beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W10[i] +
                   beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                   theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                   psi_e3[site[i], month[i]];
      }
      
      ppcheck_e3 = student_t_rng(2, mu_e3, sigma_e3);
    
      for (i in 1:N) {
        mu_e4[i] = a_e4[site[i], season[i]] + 
                   beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W10[i] +
                   beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                   beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                   theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                   psi_e4[site[i], month[i]];
        mu_e4[i] = exp(mu_e4[i]);
      }
    
      ppcheck_e4 = neg_binomial_2_rng(mu_e4, sigma_e4);
    
    }
    
    ")

```

#### Running MCMC algorithm


```{r, eval=FALSE}
file <- paste(getwd(), '/w10_net_size.stan', sep ='')

fit_net_sizeW10 <- cmdstan_model(file, compile = T)

mod_net_sizeW10_obs <- 
  fit_net_sizeW10$sample(
    data = network_metrics_S_OBS, 
    chains = 3, 
    parallel_chains = 3, 
    iter_sampling = 8e3, 
    iter_warmup = 500, 
    thin = 10, 
    seed = 123
  )


```

```{r, echo=FALSE, eval=TRUE}
mod_net_sizeW10_obs <- readRDS('causal_mod_net_sizeW10.rds')
```

#### Model diagnostics

```{r, fig.height=15, fig.cap="Rhat values and ess of group-level parameters from the generative model explaining the effect of cumulative rainfall during W10, on network size of ant followers birds."}

par(mfrow = c(5, 2), mar = c(4, 4, 1.5, 1))
mod_diagnostics(mod_net_sizeW10_obs, 
                mod_net_sizeW10_obs$summary(
                  unique(paste('psi_e2[', 
                               network_metrics_S_OBS$site,
                               ',',
                               network_metrics_S_OBS$month, ']', 
                               sep = '')))) 

mod_diagnostics(mod_net_sizeW10_obs, 
                mod_net_sizeW10_obs$summary(
                  unique(paste('psi_e3[', 
                               network_metrics_S_OBS$site,
                               ',',
                               network_metrics_S_OBS$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_net_sizeW10_obs, 
                mod_net_sizeW10_obs$summary(
                  unique(paste('psi_e4[', 
                               network_metrics_S_OBS$site,
                               ',',
                               network_metrics_S_OBS$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_net_sizeW10_obs, 
                mod_net_sizeW10_obs$summary(
                  unique(paste('tau_e4[', 
                               network_metrics_S_OBS$year,
                               ',',
                               network_metrics_S_OBS$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_net_sizeW10_obs, 
                mod_net_sizeW10_obs$summary(
                  unique(paste('tau_e2[', 
                               network_metrics_S_OBS$year,
                               ',',
                               network_metrics_S_OBS$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_net_sizeW10_obs, 
                mod_net_sizeW10_obs$summary(
                  unique(paste('tau_e3[', 
                               network_metrics_S_OBS$year,
                               ',',
                               network_metrics_S_OBS$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_net_sizeW10_obs, 
                mod_net_sizeW10_obs$summary(paste('theta_e4[', 
                                                  1:network_metrics_S_OBS$N_day, ']', 
                                                  sep = '')))
mod_diagnostics(mod_net_sizeW10_obs, 
                mod_net_sizeW10_obs$summary(paste('theta_e3[', 
                                                  1:network_metrics_S_OBS$N_day, ']', 
                                                  sep = '')))

mod_diagnostics(mod_net_sizeW10_obs, 
                mod_net_sizeW10_obs$summary(paste('theta_e2[', 
                                                  1:network_metrics_S_OBS$N_day, ']', 
                                                  sep = '')))
par(mfrow = c(1, 1))
```

```{r, fig.cap="Rhat values and ess of slope, intercept, and dispersion parameters  from the generative model explaining the effect of cumulative rainfall during W10, on network size of ant followers birds."}
summary_net_sizeW10 <- mod_net_sizeW10_obs$summary(c('beta_rainW2_e1', 
                                                     'beta_rainW1_e2',
                                                     'beta_rainW1_e3',
                                                     'beta_rainW1_e4',
                                                     'beta_sawrA_e3',
                                                     'beta_sawrA_e4',
                                                     'beta_swarmB_e4', 
                                                     'a_e1', 'a_e2', 
                                                     'a_e3', 'a_e4',
                                                     'sigma_e1', 'sigma_e2', 
                                                     'sigma_e3', 'sigma_e4', 
                                                     'swarm_area',
                                                     'SBiomass_merge',
                                                     'lp__'))

mod_diagnostics(mod_net_sizeW10_obs, summary_net_sizeW10)


```


```{r, fig.cap= "Posterior predictive checks"}
post_net_sizeW10_obs <- mod_net_sizeW10_obs$draws(c('beta_rainW2_e1', 
                                                    'beta_rainW1_e2',
                                                    'beta_rainW1_e3',
                                                    'beta_rainW1_e4',
                                                    'beta_sawrA_e3',
                                                    'beta_sawrA_e4',
                                                    'beta_swarmB_e4', 
                                                    'a_e1', 'a_e2', 'a_e3', 'a_e4',
                                                    'sigma_e1', 'sigma_e2', 
                                                    'sigma_e3', 'sigma_e4',
                                                    'swarm_area',
                                                    'SBiomass_merge'), format = 'df')

ppcheck_swarmA <- mod_net_sizeW10_obs$draws('ppcheck_e2', format = 'matrix')
ppcheck_swarmB <- mod_net_sizeW10_obs$draws('ppcheck_e3', format = 'matrix')
ppcheck_net_size <- mod_net_sizeW10_obs$draws('ppcheck_e4', format = 'matrix')
ppcheck_R1 <- mod_net_sizeW10_obs$draws('ppcheck_e1', format = 'matrix')

swarm_area <- apply(post_net_sizeW10_obs[, grep('swarm_area', colnames(post_net_sizeW10_obs))], 
                    2, mean)

swarm_BM <- 
  apply(post_net_sizeW10_obs[, grep('SBiomass_merge', colnames(post_net_sizeW10_obs))], 
        2, mean)

par(mfrow = c(2, 2), mar = c(4, 4, 1, 1))
plot(density(network_metrics_S_OBS$cum_rainfall_W10), 
     main = '', xlab = 'Cum rainfall W10')
for(i in 1:100) lines(density(ppcheck_R1[i, ]), lwd = 0.1)
lines(density(network_metrics_S_OBS$cum_rainfall_W10), col = 'red')

plot(density(swarm_area), main = '', xlab = 'Swarm area')
for(i in 1:100) lines(density(ppcheck_swarmA[i, ]), lwd = 0.1)
lines(density(swarm_area), col = 'red')

plot(density(swarm_BM), main = '', xlab = 'Arthropod biomass')
for(i in 1:100) lines(density(ppcheck_swarmB[i, ]), lwd = 0.1)
lines(density(swarm_BM), col = 'red')

plot(density(network_metrics_S_OBS$net_size), 
     main = '', xlab = 'Net size')
for(i in 1:100) lines(density(ppcheck_net_size[i, ]), lwd = 0.1)
lines(density(network_metrics_S_OBS$net_size), col = 'red')

post_beta_net_sizeW10 <- gather(post_net_sizeW10_obs[, grep('beta', colnames(post_net_sizeW10_obs))])

post_beta_net_sizeW10$key <- as.factor(post_beta_net_sizeW10$key)
```

### Window 15 model

#### Stan code

```{r, eval=FALSE}
cat(file = 'w15_net_size.stan', 
    "
    
    functions {
    
      vector scale(vector x) {
        int N = dims(x)[1];
        real mu = mean(x);
        real sigma = sd(x);
        vector[N] scaled_v;
    
        for (i in 1:N) {
          scaled_v[i] = (x[i] - mu) / sigma;
        }
        return scaled_v;
      }  
    
      vector merge_missing(int[] miss_indxex, vector x_obs, vector x_miss) {
                int N = dims(x_obs)[1];
                int N_miss = dims(x_miss)[1];
                vector[N] merge;
                merge = x_obs;
                for (i in 1:N_miss) {
                    merge[miss_indxex[i]] = x_miss[i];
                }
            return merge;
          }
    
    
      matrix cov_GPL2(matrix x,
                      real eta,
                      real rho,
                      real delta) {
                      
                      int N = dims(x)[1];
                      matrix[N, N] K;
    
                      for (i in 1:(N-1)) {
                        K[i, i] = eta + delta;
                        for (j in (i + 1):N) {
                          K[i, j] = eta * exp(-rho * square(x[i, j]));
                          K[j, i] = K[i, j];
                        }
                      }
                      K[N, N] = eta + delta;
                      return K;
                      }
    }
    
    data {
      int N;
      int N_day;
      int N_month;
      int N_season;
      int N_site;
      int N_dim_day;
      int N_naSwarmBio;
      int N_naSwarmINI;
      int N_naSwarmFIN;
      array[N_naSwarmBio] int SwarmB_missindx;
      array[N_naSwarmINI] int SwarmINI_missindx;
      array[N_naSwarmFIN] int SwarmFIN_missindx;
      array[N] int net_size;
      array[N] int day;
      array[N] int month;
      array[N] int season;
      array[N] int site;
      vector[N] swarm_biomass;
      vector[N] swarm_area_inital;
      vector[N] swarm_area_final;
      array[N] int cum_rainfall_W20;
      array[N] int cum_rainfall_W15;
      matrix[N_dim_day, N_dim_day] dist_day;
    }
    
    parameters {
    
      /////////////
      ///////////// imputed variables
      vector[N_naSwarmBio] SBiomass_impute;
      real mu_sb;
      real<lower = 0> sigma_sb;
      vector[N_naSwarmINI] SwarmINI_impute;
      real mu_sbINI;
      real<lower = 0> sigma_sbINI;
      vector[N_naSwarmFIN] SwarmFIN_impute;
      real mu_sbFIN;
      real<lower = 0> sigma_sbFIN;
    
      //////////////
      ///////////// rain_i+n -> rain_i
      real a_e1;
      real beta_rainW2_e1;
      real<lower = 0> sigma_e1;
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm
      matrix[N_site, N_season] a_e2;
      matrix[N_site, N_season] beta_rainW1_e2;
      real<lower = 0> sigma_e2;
    
      vector[N_day] z_theta_e2;
      real<lower = 0> eta_theta_e2;
      real<lower = 0> rho_theta_e2;
    
      matrix[N_season, N_month] z_tau_e2;
      real mu_tau_e2;
      real<lower = 0> sigma_tau_e2;
    
      matrix[N_site, N_month] z_psi_e2;
      real mu_psi_e2;
      real<lower = 0> sigma_psi_e2;
      
      ////////////////////
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      matrix[N_site, N_season] a_e3;
      matrix[N_site, N_season] beta_rainW1_e3;
      matrix[N_site, N_season] beta_sawrA_e3;
      real<lower = 0> sigma_e3;
    
      vector[N_day] z_theta_e3;
      real<lower = 0> eta_theta_e3;
      real<lower = 0> rho_theta_e3;
    
      matrix[N_season, N_month] z_tau_e3;
      real mu_tau_e3;
      real<lower = 0> sigma_tau_e3;
    
      matrix[N_site, N_month] z_psi_e3;
      real mu_psi_e3;
      real<lower = 0> sigma_psi_e3;
      
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      matrix[N_site, N_season] a_e4;
      matrix[N_site, N_season] beta_rainW1_e4;
      matrix[N_site, N_season] beta_sawrA_e4;
      matrix[N_site, N_season] beta_swarmB_e4;
      real<lower = 0> sigma_e4;
    
      vector[N_day] z_theta_e4;
      real<lower = 0> eta_theta_e4;
      real<lower = 0> rho_theta_e4;
    
      matrix[N_season, N_month] z_tau_e4;
      real mu_tau_e4;
      real<lower = 0> sigma_tau_e4;
    
      matrix[N_site, N_month] z_psi_e4;
      real mu_psi_e4;
      real<lower = 0> sigma_psi_e4;
      
      ////////////////////
    
      
    }
    
    transformed parameters{
      
      ///////////////////////
      ///////////////////////// imputed variables
      vector[N] swarm_area;
      vector[N] SBiomass_merge;
      SBiomass_merge = merge_missing(SwarmB_missindx, 
                                     to_vector(swarm_biomass), 
                                     SBiomass_impute);
      vector[N] swarmINI_merge;
      swarmINI_merge = merge_missing(SwarmINI_missindx, 
                                     to_vector(swarm_area_inital), 
                                     SwarmINI_impute);
      vector[N] swarmFIN_merge;
      swarmFIN_merge = merge_missing(SwarmFIN_missindx, 
                                     to_vector(swarm_area_final), 
                                     SwarmFIN_impute);
      swarm_area = (swarmINI_merge + swarmFIN_merge) / 2;
      // swarm_area = scale(swarm_area);
      // SBiomass_merge = scale(SBiomass_merge);
    
      ///////////////////
      ///////////////////////// rain_i -> swarm
      
      vector[N_day] theta_e2;
      matrix[N_dim_day, N_dim_day] sigma_theta_e2;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e2;
      sigma_theta_e2 = cov_GPL2(dist_day, eta_theta_e2, rho_theta_e2, 0.01);
      L_sigma_theta_e2 = cholesky_decompose(sigma_theta_e2);
      theta_e2 = L_sigma_theta_e2 * z_theta_e2;
    
      matrix[N_season, N_month] tau_e2;
      matrix[N_site, N_month] psi_e2;
      tau_e2 = mu_tau_e2 + z_tau_e2 * sigma_tau_e2;
      psi_e2 = mu_psi_e2 + z_psi_e2 * sigma_psi_e2;
      
      ///////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      
      vector[N_day] theta_e3;
      matrix[N_dim_day, N_dim_day] sigma_theta_e3;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e3;
      sigma_theta_e3 = cov_GPL2(dist_day, eta_theta_e3, rho_theta_e3, 0.01);
      L_sigma_theta_e3 = cholesky_decompose(sigma_theta_e3);
      theta_e3 = L_sigma_theta_e3 * z_theta_e3;
    
      matrix[N_season, N_month] tau_e3;
      matrix[N_site, N_month] psi_e3;
      tau_e3 = mu_tau_e3 + z_tau_e3 * sigma_tau_e3;
      psi_e3 = mu_psi_e3 + z_psi_e3 * sigma_psi_e3;
    
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      
      vector[N_day] theta_e4;
      matrix[N_dim_day, N_dim_day] sigma_theta_e4;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e4;
      sigma_theta_e4 = cov_GPL2(dist_day, eta_theta_e4, rho_theta_e4, 0.01);
      L_sigma_theta_e4 = cholesky_decompose(sigma_theta_e4);
      theta_e4 = L_sigma_theta_e4 * z_theta_e4;
    
      matrix[N_season, N_month] tau_e4;
      matrix[N_site, N_month] psi_e4;
      tau_e4 = mu_tau_e4 + z_tau_e4 * sigma_tau_e4;
      psi_e4 = mu_psi_e4 + z_psi_e4 * sigma_psi_e4;
    
      ///////////////////
    }
    
    model {
      
      ///////////////////////
      /////////////////////// imputed variables
      mu_sb ~ normal(3.5, 1);
      sigma_sb ~ exponential(1);
      SBiomass_merge ~ normal(mu_sb, sigma_sb);
      mu_sbINI ~ normal(3.5, 1);
      sigma_sbINI ~ exponential(1);
      swarmINI_merge ~ normal(mu_sbINI, sigma_sbINI);
      mu_sbFIN ~ normal(3.5, 1);
      sigma_sbFIN ~ exponential(1);
      swarmFIN_merge ~ normal(mu_sbFIN, sigma_sbFIN);
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      vector[N] mu_e1;
      a_e1 ~ normal(0, 1);
      beta_rainW2_e1 ~ normal(0, 0.5);
      sigma_e1 ~ exponential(1);
      
      ///////////////////
      /////////////////// rain_i -> swarm
      to_vector(a_e2) ~ normal(3, 1);
      sigma_e2 ~ exponential(1);
      to_vector(beta_rainW1_e2) ~ normal(0, 0.25);
    
      z_theta_e2 ~ normal(0, 0.5);     
      eta_theta_e2 ~ exponential(3);   
      rho_theta_e2 ~ exponential(0.5); 
      
      to_vector(z_tau_e2) ~ normal(0, 0.5);
      mu_tau_e2 ~ normal(0, 0.5);
      sigma_tau_e2 ~ exponential(1);
    
      to_vector(z_psi_e2) ~ normal(0, 0.5);
      mu_psi_e2 ~ normal(0, 0.5);
      sigma_psi_e2 ~ exponential(1);
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      to_vector(a_e3) ~ normal(2.5, 1);
      sigma_e3 ~ exponential(1);
      to_vector(beta_rainW1_e3) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e3) ~ normal(0, 3);
    
      z_theta_e3 ~ normal(0, 1);
      eta_theta_e3 ~ exponential(3);
      rho_theta_e3 ~ exponential(0.5);
      
      to_vector(z_tau_e3) ~ normal(0, 0.5);
      mu_tau_e3 ~ normal(0, 0.5);
      sigma_tau_e3 ~ exponential(1);
    
      to_vector(z_psi_e3) ~ normal(0, 0.5);
      mu_psi_e3 ~ normal(0, 0.5);
      sigma_psi_e3 ~ exponential(1);
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      to_vector(a_e4) ~ normal(2.5, 2);
      sigma_e4 ~ exponential(1);
      to_vector(beta_rainW1_e4) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e4) ~ normal(0, 0.5);
      to_vector(beta_swarmB_e4) ~ normal(0, 0.5);
    
      z_theta_e4 ~ normal(0, 1);
      eta_theta_e4 ~ exponential(3);
      rho_theta_e4 ~ exponential(0.5);
      
      to_vector(z_tau_e4) ~ normal(0, 0.5);
      mu_tau_e4 ~ normal(0, 0.5);
      sigma_tau_e4 ~ exponential(1);
    
      to_vector(z_psi_e4) ~ normal(0, 0.5);
      mu_psi_e4 ~ normal(0, 0.5);
      sigma_psi_e4 ~ exponential(1);
      
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      for (i in 1:N) {
        cum_rainfall_W15[i] ~ normal(a_e1 + beta_rainW2_e1 * cum_rainfall_W20[i], 
                                     sigma_e1);
      }
    
      ///////////////////
      /////////////////// rain_i -> swarm
      for (i in 1:N) {
        swarm_area[i] ~ student_t(2,
                                  a_e2[site[i], season[i]] + 
                                  beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W15[i] + 
                                  theta_e2[day[i]] + 
                                  tau_e2[season[i], month[i]] + 
                                  psi_e2[site[i], month[i]], 
                                  sigma_e2);
      }
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      for (i in 1:N) {
        SBiomass_merge[i] ~ student_t(2,
                                     a_e3[site[i], season[i]] + 
                                     beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W15[i] +
                                     beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                                     theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                                     psi_e3[site[i], month[i]], 
                                     sigma_e3);
      }
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      for (i in 1:N) {
        net_size[i] ~ neg_binomial_2(exp(a_e4[site[i], season[i]] + 
                                     beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W15[i] +
                                     beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                                     beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                                     theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                                     psi_e4[site[i], month[i]]),
                                     sigma_e4);
      }
    }
    
    generated quantities {
      vector[N] mu_e1;
      vector[N] mu_e2;
      vector[N] mu_e3;
      vector[N] mu_e4;
      array[N] real ppcheck_e1;
      array[N] real ppcheck_e2;
      array[N] real ppcheck_e3;
      array[N] int ppcheck_e4;
      
      for (i in 1:N) {
        mu_e1[i] = a_e1 + beta_rainW2_e1 * cum_rainfall_W20[i]; 
      }
    
      ppcheck_e1 = normal_rng(mu_e1, sigma_e1);
    
      for (i in 1:N) {
        mu_e2[i] = a_e2[site[i], season[i]] + 
                   beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W15[i] + 
                   theta_e2[day[i]] + 
                   tau_e2[season[i], month[i]] + 
                   psi_e2[site[i], month[i]];
      }
      
      ppcheck_e2 = student_t_rng(2, mu_e2, sigma_e2);
    
    
      for (i in 1:N) {
        mu_e3[i] = a_e3[site[i], season[i]] + 
                   beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W15[i] +
                   beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                   theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                   psi_e3[site[i], month[i]];
      }
      
      ppcheck_e3 = student_t_rng(2, mu_e3, sigma_e3);
    
      for (i in 1:N) {
        mu_e4[i] = a_e4[site[i], season[i]] + 
                   beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W15[i] +
                   beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                   beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                   theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                   psi_e4[site[i], month[i]];
        mu_e4[i] = exp(mu_e4[i]);
      }
    
      ppcheck_e4 = neg_binomial_2_rng(mu_e4, sigma_e4);
    
    }
    
    ")

```

#### Running MCMC algorithm


```{r, eval=FALSE}
file <- paste(getwd(), '/w15_net_size.stan', sep ='')

fit_net_sizeW15 <- cmdstan_model(file, compile = T)

mod_net_sizeW15_obs <- 
  fit_net_sizeW15$sample(
    data = network_metrics_S_OBS, 
    chains = 3, 
    parallel_chains = 3, 
    iter_sampling = 10e3, 
    iter_warmup = 500, 
    thin = 30, 
    seed = 123
  )


```

```{r, echo=FALSE, eval=TRUE}
mod_net_sizeW15_obs <- readRDS('causal_mod_net_sizeW15.rds')
```

#### Model diagnostics

```{r, fig.height=15, fig.cap="Rhat values and ess of group-level parameters from the generative model explaining the effect of cumulative rainfall during W15, on network size of ant followers birds."}

par(mfrow = c(5, 2), mar = c(4, 4, 1.5, 1))
mod_diagnostics(mod_net_sizeW15_obs, 
                mod_net_sizeW15_obs$summary(
                  unique(paste('psi_e2[', 
                               network_metrics_S_OBS$site,
                               ',',
                               network_metrics_S_OBS$month, ']', 
                               sep = '')))) 

mod_diagnostics(mod_net_sizeW15_obs, 
                mod_net_sizeW15_obs$summary(
                  unique(paste('psi_e3[', 
                               network_metrics_S_OBS$site,
                               ',',
                               network_metrics_S_OBS$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_net_sizeW15_obs, 
                mod_net_sizeW15_obs$summary(
                  unique(paste('psi_e4[', 
                               network_metrics_S_OBS$site,
                               ',',
                               network_metrics_S_OBS$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_net_sizeW15_obs, 
                mod_net_sizeW15_obs$summary(
                  unique(paste('tau_e4[', 
                               network_metrics_S_OBS$year,
                               ',',
                               network_metrics_S_OBS$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_net_sizeW15_obs, 
                mod_net_sizeW15_obs$summary(
                  unique(paste('tau_e2[', 
                               network_metrics_S_OBS$year,
                               ',',
                               network_metrics_S_OBS$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_net_sizeW15_obs, 
                mod_net_sizeW15_obs$summary(
                  unique(paste('tau_e3[', 
                               network_metrics_S_OBS$year,
                               ',',
                               network_metrics_S_OBS$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_net_sizeW15_obs, 
                mod_net_sizeW15_obs$summary(paste('theta_e4[', 
                                                  1:network_metrics_S_OBS$N_day, ']', 
                                                  sep = '')))
mod_diagnostics(mod_net_sizeW15_obs, 
                mod_net_sizeW15_obs$summary(paste('theta_e3[', 
                                                  1:network_metrics_S_OBS$N_day, ']', 
                                                  sep = '')))

mod_diagnostics(mod_net_sizeW15_obs, 
                mod_net_sizeW15_obs$summary(paste('theta_e2[', 
                                                  1:network_metrics_S_OBS$N_day, ']', 
                                                  sep = '')))
par(mfrow = c(1, 1))
```

```{r, fig.cap="Rhat values and ess of slope, intercept, and dispersion parameters  from the generative model explaining the effect of cumulative rainfall during W15, on network size of ant followers birds."}
summary_net_sizeW15 <- mod_net_sizeW15_obs$summary(c('beta_rainW2_e1', 
                                                     'beta_rainW1_e2',
                                                     'beta_rainW1_e3',
                                                     'beta_rainW1_e4',
                                                     'beta_sawrA_e3',
                                                     'beta_sawrA_e4',
                                                     'beta_swarmB_e4',
                                                     'a_e1', 'a_e2', 
                                                     'a_e3', 'a_e4',
                                                     'sigma_e1', 'sigma_e2', 
                                                     'sigma_e3', 'sigma_e4', 
                                                     'swarm_area',
                                                     'SBiomass_merge',
                                                     'lp__'))

mod_diagnostics(mod_net_sizeW15_obs, summary_net_sizeW15)

```


```{r, fig.cap= "Posterior predictive checks"}
post_net_sizeW15_obs <- mod_net_sizeW15_obs$draws(c('beta_rainW2_e1', 
                                                    'beta_rainW1_e2',
                                                    'beta_rainW1_e3',
                                                    'beta_rainW1_e4',
                                                    'beta_sawrA_e3',
                                                    'beta_sawrA_e4',
                                                    'beta_swarmB_e4', 
                                                    'a_e1', 'a_e2', 'a_e3', 'a_e4',
                                                    'sigma_e1', 'sigma_e2', 
                                                    'sigma_e3', 'sigma_e4',
                                                    'swarm_area',
                                                    'SBiomass_merge'), format = 'df')

ppcheck_swarmA <- mod_net_sizeW15_obs$draws('ppcheck_e2', format = 'matrix')
ppcheck_swarmB <- mod_net_sizeW15_obs$draws('ppcheck_e3', format = 'matrix')
ppcheck_net_size <- mod_net_sizeW15_obs$draws('ppcheck_e4', format = 'matrix')
ppcheck_R1 <- mod_net_sizeW15_obs$draws('ppcheck_e1', format = 'matrix')

swarm_area <- apply(post_net_sizeW15_obs[, grep('swarm_area', colnames(post_net_sizeW15_obs))], 
                    2, mean)

swarm_BM <- 
  apply(post_net_sizeW15_obs[, grep('SBiomass_merge', colnames(post_net_sizeW15_obs))], 
        2, mean)

par(mfrow = c(2, 2), mar = c(4, 4, 1, 1))
plot(density(network_metrics_S_OBS$cum_rainfall_W15), 
     main = '', xlab = 'Cum rainfall W15')
for(i in 1:100) lines(density(ppcheck_R1[i, ]), lwd = 0.1)
lines(density(network_metrics_S_OBS$cum_rainfall_W15), col = 'red')

plot(density(swarm_area), main = '', xlab = 'Swarm area')
for(i in 1:100) lines(density(ppcheck_swarmA[i, ]), lwd = 0.1)
lines(density(swarm_area), col = 'red')

plot(density(swarm_BM), main = '', xlab = 'Arthropod biomass')
for(i in 1:100) lines(density(ppcheck_swarmB[i, ]), lwd = 0.1)
lines(density(swarm_BM), col = 'red')

plot(density(network_metrics_S_OBS$net_size), 
     main = '', xlab = 'Net size')
for(i in 1:100) lines(density(ppcheck_net_size[i, ]), lwd = 0.1)
lines(density(network_metrics_S_OBS$net_size), col = 'red') 

post_beta_net_sizeW15 <- gather(post_net_sizeW15_obs[, grep('beta', colnames(post_net_sizeW15_obs))])

post_beta_net_sizeW15$key <- as.factor(post_beta_net_sizeW15$key)
```

### Window 20 model

#### Stan code

```{r, eval=FALSE}
cat(file = 'w20_net_size.stan', 
    "
    
    functions {
    
      vector scale(vector x) {
        int N = dims(x)[1];
        real mu = mean(x);
        real sigma = sd(x);
        vector[N] scaled_v;
    
        for (i in 1:N) {
          scaled_v[i] = (x[i] - mu) / sigma;
        }
        return scaled_v;
      }  
    
      vector merge_missing(int[] miss_indxex, vector x_obs, vector x_miss) {
                int N = dims(x_obs)[1];
                int N_miss = dims(x_miss)[1];
                vector[N] merge;
                merge = x_obs;
                for (i in 1:N_miss) {
                    merge[miss_indxex[i]] = x_miss[i];
                }
            return merge;
          }
    
    
      matrix cov_GPL2(matrix x,
                      real eta,
                      real rho,
                      real delta) {
                      
                      int N = dims(x)[1];
                      matrix[N, N] K;
    
                      for (i in 1:(N-1)) {
                        K[i, i] = eta + delta;
                        for (j in (i + 1):N) {
                          K[i, j] = eta * exp(-rho * square(x[i, j]));
                          K[j, i] = K[i, j];
                        }
                      }
                      K[N, N] = eta + delta;
                      return K;
                      }
    }
    
    data {
      int N;
      int N_day;
      int N_month;
      int N_season;
      int N_site;
      int N_dim_day;
      int N_naSwarmBio;
      int N_naSwarmINI;
      int N_naSwarmFIN;
      array[N_naSwarmBio] int SwarmB_missindx;
      array[N_naSwarmINI] int SwarmINI_missindx;
      array[N_naSwarmFIN] int SwarmFIN_missindx;
      array[N] int net_size;
      array[N] int day;
      array[N] int month;
      array[N] int season;
      array[N] int site;
      vector[N] swarm_biomass;
      vector[N] swarm_area_inital;
      vector[N] swarm_area_final;
      array[N] int cum_rainfall_W20;
      array[N] int cum_rainfall_W25;
      matrix[N_dim_day, N_dim_day] dist_day;
    }
    
    parameters {
      /////////////
      ///////////// imputed variables
      vector[N_naSwarmBio] SBiomass_impute;
      real mu_sb;
      real<lower = 0> sigma_sb;
      vector[N_naSwarmINI] SwarmINI_impute;
      real mu_sbINI;
      real<lower = 0> sigma_sbINI;
      vector[N_naSwarmFIN] SwarmFIN_impute;
      real mu_sbFIN;
      real<lower = 0> sigma_sbFIN;
    
      //////////////
      ///////////// rain_i+n -> rain_i
      real a_e1;
      real beta_rainW2_e1;
      real<lower = 0> sigma_e1;
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm
      matrix[N_site, N_season] a_e2;
      matrix[N_site, N_season] beta_rainW1_e2;
      real<lower = 0> sigma_e2;
    
      vector[N_day] z_theta_e2;
      real<lower = 0> eta_theta_e2;
      real<lower = 0> rho_theta_e2;
    
      matrix[N_season, N_month] z_tau_e2;
      real mu_tau_e2;
      real<lower = 0> sigma_tau_e2;
    
      matrix[N_site, N_month] z_psi_e2;
      real mu_psi_e2;
      real<lower = 0> sigma_psi_e2;
      
      ////////////////////
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      matrix[N_site, N_season] a_e3;
      matrix[N_site, N_season] beta_rainW1_e3;
      matrix[N_site, N_season] beta_sawrA_e3;
      real<lower = 0> sigma_e3;
    
      vector[N_day] z_theta_e3;
      real<lower = 0> eta_theta_e3;
      real<lower = 0> rho_theta_e3;
    
      matrix[N_season, N_month] z_tau_e3;
      real mu_tau_e3;
      real<lower = 0> sigma_tau_e3;
    
      matrix[N_site, N_month] z_psi_e3;
      real mu_psi_e3;
      real<lower = 0> sigma_psi_e3;
      
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      matrix[N_site, N_season] a_e4;
      matrix[N_site, N_season] beta_rainW1_e4;
      matrix[N_site, N_season] beta_sawrA_e4;
      matrix[N_site, N_season] beta_swarmB_e4;
      real<lower = 0> sigma_e4;
    
      vector[N_day] z_theta_e4;
      real<lower = 0> eta_theta_e4;
      real<lower = 0> rho_theta_e4;
    
      matrix[N_season, N_month] z_tau_e4;
      real mu_tau_e4;
      real<lower = 0> sigma_tau_e4;
    
      matrix[N_site, N_month] z_psi_e4;
      real mu_psi_e4;
      real<lower = 0> sigma_psi_e4;
      
      ////////////////////
    
      
    }
    
    transformed parameters{
      
      ///////////////////////
      ///////////////////////// imputed variables
      vector[N] swarm_area;
      vector[N] SBiomass_merge;
      SBiomass_merge = merge_missing(SwarmB_missindx, 
                                     to_vector(swarm_biomass), 
                                     SBiomass_impute);
      vector[N] swarmINI_merge;
      swarmINI_merge = merge_missing(SwarmINI_missindx, 
                                     to_vector(swarm_area_inital), 
                                     SwarmINI_impute);
      vector[N] swarmFIN_merge;
      swarmFIN_merge = merge_missing(SwarmFIN_missindx, 
                                     to_vector(swarm_area_final), 
                                     SwarmFIN_impute);
      swarm_area = (swarmINI_merge + swarmFIN_merge) / 2;
      // swarm_area = scale(swarm_area);
      // SBiomass_merge = scale(SBiomass_merge);
    
      ///////////////////
      ///////////////////////// rain_i -> swarm
      
      vector[N_day] theta_e2;
      matrix[N_dim_day, N_dim_day] sigma_theta_e2;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e2;
      sigma_theta_e2 = cov_GPL2(dist_day, eta_theta_e2, rho_theta_e2, 0.01);
      L_sigma_theta_e2 = cholesky_decompose(sigma_theta_e2);
      theta_e2 = L_sigma_theta_e2 * z_theta_e2;
    
      matrix[N_season, N_month] tau_e2;
      matrix[N_site, N_month] psi_e2;
      tau_e2 = mu_tau_e2 + z_tau_e2 * sigma_tau_e2;
      psi_e2 = mu_psi_e2 + z_psi_e2 * sigma_psi_e2;
      
      ///////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      
      vector[N_day] theta_e3;
      matrix[N_dim_day, N_dim_day] sigma_theta_e3;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e3;
      sigma_theta_e3 = cov_GPL2(dist_day, eta_theta_e3, rho_theta_e3, 0.01);
      L_sigma_theta_e3 = cholesky_decompose(sigma_theta_e3);
      theta_e3 = L_sigma_theta_e3 * z_theta_e3;
    
      matrix[N_season, N_month] tau_e3;
      matrix[N_site, N_month] psi_e3;
      tau_e3 = mu_tau_e3 + z_tau_e3 * sigma_tau_e3;
      psi_e3 = mu_psi_e3 + z_psi_e3 * sigma_psi_e3;
    
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      
      vector[N_day] theta_e4;
      matrix[N_dim_day, N_dim_day] sigma_theta_e4;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e4;
      sigma_theta_e4 = cov_GPL2(dist_day, eta_theta_e4, rho_theta_e4, 0.01);
      L_sigma_theta_e4 = cholesky_decompose(sigma_theta_e4);
      theta_e4 = L_sigma_theta_e4 * z_theta_e4;
    
      matrix[N_season, N_month] tau_e4;
      matrix[N_site, N_month] psi_e4;
      tau_e4 = mu_tau_e4 + z_tau_e4 * sigma_tau_e4;
      psi_e4 = mu_psi_e4 + z_psi_e4 * sigma_psi_e4;
    
      ///////////////////
    }
    
    model {
      ///////////////////////
      /////////////////////// imputed variables
      mu_sb ~ normal(3.5, 1);
      sigma_sb ~ exponential(1);
      SBiomass_merge ~ normal(mu_sb, sigma_sb);
      mu_sbINI ~ normal(3.5, 1);
      sigma_sbINI ~ exponential(1);
      swarmINI_merge ~ normal(mu_sbINI, sigma_sbINI);
      mu_sbFIN ~ normal(3.5, 1);
      sigma_sbFIN ~ exponential(1);
      swarmFIN_merge ~ normal(mu_sbFIN, sigma_sbFIN);
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      vector[N] mu_e1;
      a_e1 ~ normal(0, 1);
      beta_rainW2_e1 ~ normal(0, 0.5);
      sigma_e1 ~ exponential(1);
      
      ///////////////////
      /////////////////// rain_i -> swarm
      to_vector(a_e2) ~ normal(3, 1);
      sigma_e2 ~ exponential(1);
      to_vector(beta_rainW1_e2) ~ normal(0, 0.25);
    
      z_theta_e2 ~ normal(0, 0.5);     
      eta_theta_e2 ~ exponential(3);   
      rho_theta_e2 ~ exponential(0.5); 
      
      to_vector(z_tau_e2) ~ normal(0, 0.5);
      mu_tau_e2 ~ normal(0, 0.5);
      sigma_tau_e2 ~ exponential(1);
    
      to_vector(z_psi_e2) ~ normal(0, 0.5);
      mu_psi_e2 ~ normal(0, 0.5);
      sigma_psi_e2 ~ exponential(1);
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      to_vector(a_e3) ~ normal(2.5, 1);
      sigma_e3 ~ exponential(1);
      to_vector(beta_rainW1_e3) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e3) ~ normal(0, 3);
    
      z_theta_e3 ~ normal(0, 1);
      eta_theta_e3 ~ exponential(3);
      rho_theta_e3 ~ exponential(0.5);
      
      to_vector(z_tau_e3) ~ normal(0, 0.5);
      mu_tau_e3 ~ normal(0, 0.5);
      sigma_tau_e3 ~ exponential(1);
    
      to_vector(z_psi_e3) ~ normal(0, 0.5);
      mu_psi_e3 ~ normal(0, 0.5);
      sigma_psi_e3 ~ exponential(1);
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      to_vector(a_e4) ~ normal(2.5, 2);
      sigma_e4 ~ exponential(1);
      to_vector(beta_rainW1_e4) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e4) ~ normal(0, 0.5);
      to_vector(beta_swarmB_e4) ~ normal(0, 0.5);
    
      z_theta_e4 ~ normal(0, 1);
      eta_theta_e4 ~ exponential(3);
      rho_theta_e4 ~ exponential(0.5);
      
      to_vector(z_tau_e4) ~ normal(0, 0.5);
      mu_tau_e4 ~ normal(0, 0.5);
      sigma_tau_e4 ~ exponential(1);
    
      to_vector(z_psi_e4) ~ normal(0, 0.5);
      mu_psi_e4 ~ normal(0, 0.5);
      sigma_psi_e4 ~ exponential(1);
      
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      for (i in 1:N) {
        cum_rainfall_W20[i] ~ normal(a_e1 + beta_rainW2_e1 * cum_rainfall_W25[i], 
                                     sigma_e1);
      }
    
      ///////////////////
      /////////////////// rain_i -> swarm
      for (i in 1:N) {
        swarm_area[i] ~ student_t(2,
                                  a_e2[site[i], season[i]] + 
                                  beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W20[i] +
                                  theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                                  psi_e2[site[i], month[i]], 
                                  sigma_e2);
      }
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      for (i in 1:N) {
        SBiomass_merge[i] ~ student_t(2,
                                     a_e3[site[i], season[i]] + 
                                     beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W20[i] +
                                     beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                                     theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                                     psi_e3[site[i], month[i]], 
                                     sigma_e3);
      }
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      for (i in 1:N) {
        net_size[i] ~ neg_binomial_2(exp(a_e4[site[i], season[i]] + 
                                     beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W20[i] +
                                     beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                                     beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                                     theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                                     psi_e4[site[i], month[i]]),
                                     sigma_e4);
      }
    }
    
    generated quantities {
      vector[N] mu_e1;
      vector[N] mu_e2;
      vector[N] mu_e3;
      vector[N] mu_e4;
      array[N] real ppcheck_e1;
      array[N] real ppcheck_e2;
      array[N] real ppcheck_e3;
      array[N] int ppcheck_e4;
      
      for (i in 1:N) {
        mu_e1[i] = a_e1 + beta_rainW2_e1 * cum_rainfall_W25[i]; 
      }
    
      ppcheck_e1 = normal_rng(mu_e1, sigma_e1);
    
      for (i in 1:N) {
        mu_e2[i] = a_e2[site[i], season[i]] + 
                   beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W20[i] +
                   theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                   psi_e2[site[i], month[i]];
      }
      
      ppcheck_e2 = student_t_rng(2, mu_e2, sigma_e2);
    
    
      for (i in 1:N) {
        mu_e3[i] = a_e3[site[i], season[i]] + 
                   beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W20[i] +
                   beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                   theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                   psi_e3[site[i], month[i]];
      }
      
      ppcheck_e3 = student_t_rng(2, mu_e3, sigma_e3);
    
      for (i in 1:N) {
        mu_e4[i] = a_e4[site[i], season[i]] + 
                   beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W20[i] +
                   beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                   beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                   theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                   psi_e4[site[i], month[i]];
        mu_e4[i] = exp(mu_e4[i]);
      }
    
      ppcheck_e4 = neg_binomial_2_rng(mu_e4, sigma_e4);
    
    }
    
    ")

```

#### Running MCMC algorithm


```{r, eval=FALSE}
file <- paste(getwd(), '/w20_net_size.stan', sep ='')

fit_net_sizeW20 <- cmdstan_model(file, compile = T)

mod_net_sizeW20_obs <- 
  fit_net_sizeW20$sample(
    data = network_metrics_S_OBS, 
    chains = 3, 
    parallel_chains = 3, 
    iter_sampling = 8e3, 
    iter_warmup = 500, 
    thin = 10, 
    seed = 123
  )

```

```{r, echo=FALSE, eval=TRUE}
mod_net_sizeW20_obs <- readRDS('causal_mod_net_sizeW20.rds')
```

#### Model diagnostics

```{r, fig.height=15, fig.cap="Rhat values and ess of group-level parameters from the generative model explaining the effect of cumulative rainfall during W20, on network size of ant followers birds."}

par(mfrow = c(5, 2), mar = c(4, 4, 1.5, 1))
mod_diagnostics(mod_net_sizeW20_obs, 
                mod_net_sizeW20_obs$summary(
                  unique(paste('psi_e2[', 
                               network_metrics_S_OBS$site,
                               ',',
                               network_metrics_S_OBS$month, ']', 
                               sep = '')))) 

mod_diagnostics(mod_net_sizeW20_obs, 
                mod_net_sizeW20_obs$summary(
                  unique(paste('psi_e3[', 
                               network_metrics_S_OBS$site,
                               ',',
                               network_metrics_S_OBS$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_net_sizeW20_obs, 
                mod_net_sizeW20_obs$summary(
                  unique(paste('psi_e4[', 
                               network_metrics_S_OBS$site,
                               ',',
                               network_metrics_S_OBS$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_net_sizeW20_obs, 
                mod_net_sizeW20_obs$summary(
                  unique(paste('tau_e4[', 
                               network_metrics_S_OBS$year,
                               ',',
                               network_metrics_S_OBS$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_net_sizeW20_obs, 
                mod_net_sizeW20_obs$summary(
                  unique(paste('tau_e2[', 
                               network_metrics_S_OBS$year,
                               ',',
                               network_metrics_S_OBS$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_net_sizeW20_obs, 
                mod_net_sizeW20_obs$summary(
                  unique(paste('tau_e3[', 
                               network_metrics_S_OBS$year,
                               ',',
                               network_metrics_S_OBS$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_net_sizeW20_obs, 
                mod_net_sizeW20_obs$summary(paste('theta_e4[', 
                                                  1:network_metrics_S_OBS$N_day, ']', 
                                                  sep = '')))
mod_diagnostics(mod_net_sizeW20_obs, 
                mod_net_sizeW20_obs$summary(paste('theta_e3[', 
                                                  1:network_metrics_S_OBS$N_day, ']', 
                                                  sep = '')))

mod_diagnostics(mod_net_sizeW20_obs, 
                mod_net_sizeW20_obs$summary(paste('theta_e2[', 
                                                  1:network_metrics_S_OBS$N_day, ']', 
                                                  sep = '')))
par(mfrow = c(1, 1))
```

```{r, fig.cap="Rhat values and ess of slope, intercept, and dispersion parameters  from the generative model explaining the effect of cumulative rainfall during W20, on network size of ant followers birds."}
summary_net_sizeW20 <- mod_net_sizeW20_obs$summary(c('beta_rainW2_e1', 
                                                     'beta_rainW1_e2',
                                                     'beta_rainW1_e3',
                                                     'beta_rainW1_e4',
                                                     'beta_sawrA_e3',
                                                     'beta_sawrA_e4',
                                                     'beta_swarmB_e4', 
                                                     'a_e1', 'a_e2', 
                                                     'a_e3', 'a_e4',
                                                     'sigma_e1', 'sigma_e2', 
                                                     'sigma_e3', 'sigma_e4', 
                                                     'swarm_area',
                                                     'SBiomass_merge',
                                                     'lp__'))

mod_diagnostics(mod_net_sizeW20_obs, summary_net_sizeW20)
```


```{r, fig.cap= "Posterior predictive checks"}
post_net_sizeW20_obs <- mod_net_sizeW20_obs$draws(c('beta_rainW2_e1', 
                                                    'beta_rainW1_e2',
                                                    'beta_rainW1_e3',
                                                    'beta_rainW1_e4',
                                                    'beta_sawrA_e3',
                                                    'beta_sawrA_e4',
                                                    'beta_swarmB_e4', 
                                                    'a_e1', 'a_e2', 'a_e3', 'a_e4',
                                                    'sigma_e1', 'sigma_e2', 
                                                    'sigma_e3', 'sigma_e4',
                                                    'swarm_area',
                                                    'SBiomass_merge'), format = 'df')

ppcheck_swarmA <- mod_net_sizeW20_obs$draws('ppcheck_e2', format = 'matrix')
ppcheck_swarmB <- mod_net_sizeW20_obs$draws('ppcheck_e3', format = 'matrix')
ppcheck_net_size <- mod_net_sizeW20_obs$draws('ppcheck_e4', format = 'matrix')
ppcheck_R1 <- mod_net_sizeW20_obs$draws('ppcheck_e1', format = 'matrix')

swarm_area <- apply(post_net_sizeW20_obs[, grep('swarm_area', colnames(post_net_sizeW20_obs))], 
                    2, mean)

swarm_BM <- 
  apply(post_net_sizeW20_obs[, grep('SBiomass_merge', colnames(post_net_sizeW20_obs))], 
        2, mean)

par(mfrow = c(2, 2), mar = c(4, 4, 1, 1))
plot(density(network_metrics_S_OBS$cum_rainfall_W20), 
     main = '', xlab = 'Cum rainfall W20')
for(i in 1:100) lines(density(ppcheck_R1[i, ]), lwd = 0.1)
lines(density(network_metrics_S_OBS$cum_rainfall_W20), col = 'red')

plot(density(swarm_area), main = '', xlab = 'Swarm area')
for(i in 1:100) lines(density(ppcheck_swarmA[i, ]), lwd = 0.1)
lines(density(swarm_area), col = 'red')

plot(density(swarm_BM), main = '', xlab = 'Arthropod biomass')
for(i in 1:100) lines(density(ppcheck_swarmB[i, ]), lwd = 0.1)
lines(density(swarm_BM), col = 'red')

plot(density(network_metrics_S_OBS$net_size), 
     main = '', xlab = 'Net size')
for(i in 1:100) lines(density(ppcheck_net_size[i, ]), lwd = 0.1)
lines(density(network_metrics_S_OBS$net_size), col = 'red')

post_beta_net_sizeW20 <- gather(post_net_sizeW20_obs[, grep('beta', colnames(post_net_sizeW20_obs))])

post_beta_net_sizeW20$key <- as.factor(post_beta_net_sizeW20$key)
```

### Window 25 model

#### Stan code

```{r, eval=FALSE}
cat(file = 'w25_net_size.stan', 
    "
    
    functions {
    
      vector scale(vector x) {
        int N = dims(x)[1];
        real mu = mean(x);
        real sigma = sd(x);
        vector[N] scaled_v;
    
        for (i in 1:N) {
          scaled_v[i] = (x[i] - mu) / sigma;
        }
        return scaled_v;
      }  
    
      vector merge_missing(int[] miss_indxex, vector x_obs, vector x_miss) {
                int N = dims(x_obs)[1];
                int N_miss = dims(x_miss)[1];
                vector[N] merge;
                merge = x_obs;
                for (i in 1:N_miss) {
                    merge[miss_indxex[i]] = x_miss[i];
                }
            return merge;
          }
    
    
      matrix cov_GPL2(matrix x,
                      real eta,
                      real rho,
                      real delta) {
                      
                      int N = dims(x)[1];
                      matrix[N, N] K;
    
                      for (i in 1:(N-1)) {
                        K[i, i] = eta + delta;
                        for (j in (i + 1):N) {
                          K[i, j] = eta * exp(-rho * square(x[i, j]));
                          K[j, i] = K[i, j];
                        }
                      }
                      K[N, N] = eta + delta;
                      return K;
                      }
    }
    
    data {
      int N;
      int N_day;
      int N_month;
      int N_season;
      int N_site;
      int N_dim_day;
      int N_naSwarmBio;
      int N_naSwarmINI;
      int N_naSwarmFIN;
      array[N_naSwarmBio] int SwarmB_missindx;
      array[N_naSwarmINI] int SwarmINI_missindx;
      array[N_naSwarmFIN] int SwarmFIN_missindx;
      array[N] int net_size;
      array[N] int day;
      array[N] int month;
      array[N] int season;
      array[N] int site;
      vector[N] swarm_biomass;
      vector[N] swarm_area_inital;
      vector[N] swarm_area_final;
      array[N] int cum_rainfall_W30;
      array[N] int cum_rainfall_W25;
      matrix[N_dim_day, N_dim_day] dist_day;
    }
    
    parameters {
      /////////////
      ///////////// imputed variables
      vector[N_naSwarmBio] SBiomass_impute;
      real mu_sb;
      real<lower = 0> sigma_sb;
      vector[N_naSwarmINI] SwarmINI_impute;
      real mu_sbINI;
      real<lower = 0> sigma_sbINI;
      vector[N_naSwarmFIN] SwarmFIN_impute;
      real mu_sbFIN;
      real<lower = 0> sigma_sbFIN;
    
      //////////////
      ///////////// rain_i+n -> rain_i
      real a_e1;
      real beta_rainW2_e1;
      real<lower = 0> sigma_e1;
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm
      matrix[N_site, N_season] a_e2;
      matrix[N_site, N_season] beta_rainW1_e2;
      real<lower = 0> sigma_e2;
    
      vector[N_day] z_theta_e2;
      real<lower = 0> eta_theta_e2;
      real<lower = 0> rho_theta_e2;
    
      matrix[N_season, N_month] z_tau_e2;
      real mu_tau_e2;
      real<lower = 0> sigma_tau_e2;
    
      matrix[N_site, N_month] z_psi_e2;
      real mu_psi_e2;
      real<lower = 0> sigma_psi_e2;
      
      ////////////////////
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      matrix[N_site, N_season] a_e3;
      matrix[N_site, N_season] beta_rainW1_e3;
      matrix[N_site, N_season] beta_sawrA_e3;
      real<lower = 0> sigma_e3;
    
      vector[N_day] z_theta_e3;
      real<lower = 0> eta_theta_e3;
      real<lower = 0> rho_theta_e3;
    
      matrix[N_season, N_month] z_tau_e3;
      real mu_tau_e3;
      real<lower = 0> sigma_tau_e3;
    
      matrix[N_site, N_month] z_psi_e3;
      real mu_psi_e3;
      real<lower = 0> sigma_psi_e3;
      
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      matrix[N_site, N_season] a_e4;
      matrix[N_site, N_season] beta_rainW1_e4;
      matrix[N_site, N_season] beta_sawrA_e4;
      matrix[N_site, N_season] beta_swarmB_e4;
      real<lower = 0> sigma_e4;
    
      vector[N_day] z_theta_e4;
      real<lower = 0> eta_theta_e4;
      real<lower = 0> rho_theta_e4;
    
      matrix[N_season, N_month] z_tau_e4;
      real mu_tau_e4;
      real<lower = 0> sigma_tau_e4;
    
      matrix[N_site, N_month] z_psi_e4;
      real mu_psi_e4;
      real<lower = 0> sigma_psi_e4;
      
      ////////////////////
    
      
    }
    
    transformed parameters{
      
      ///////////////////////
      ///////////////////////// imputed variables
      vector[N] swarm_area;
      vector[N] SBiomass_merge;
      SBiomass_merge = merge_missing(SwarmB_missindx, 
                                     to_vector(swarm_biomass), 
                                     SBiomass_impute);
      vector[N] swarmINI_merge;
      swarmINI_merge = merge_missing(SwarmINI_missindx, 
                                     to_vector(swarm_area_inital), 
                                     SwarmINI_impute);
      vector[N] swarmFIN_merge;
      swarmFIN_merge = merge_missing(SwarmFIN_missindx, 
                                     to_vector(swarm_area_final), 
                                     SwarmFIN_impute);
      swarm_area = (swarmINI_merge + swarmFIN_merge) / 2;
      // swarm_area = scale(swarm_area);
      // SBiomass_merge = scale(SBiomass_merge);
    
      ///////////////////
      ///////////////////////// rain_i -> swarm
      
      vector[N_day] theta_e2;
      matrix[N_dim_day, N_dim_day] sigma_theta_e2;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e2;
      sigma_theta_e2 = cov_GPL2(dist_day, eta_theta_e2, rho_theta_e2, 0.01);
      L_sigma_theta_e2 = cholesky_decompose(sigma_theta_e2);
      theta_e2 = L_sigma_theta_e2 * z_theta_e2;
    
      matrix[N_season, N_month] tau_e2;
      matrix[N_site, N_month] psi_e2;
      tau_e2 = mu_tau_e2 + z_tau_e2 * sigma_tau_e2;
      psi_e2 = mu_psi_e2 + z_psi_e2 * sigma_psi_e2;
      
      ///////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      
      vector[N_day] theta_e3;
      matrix[N_dim_day, N_dim_day] sigma_theta_e3;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e3;
      sigma_theta_e3 = cov_GPL2(dist_day, eta_theta_e3, rho_theta_e3, 0.01);
      L_sigma_theta_e3 = cholesky_decompose(sigma_theta_e3);
      theta_e3 = L_sigma_theta_e3 * z_theta_e3;
    
      matrix[N_season, N_month] tau_e3;
      matrix[N_site, N_month] psi_e3;
      tau_e3 = mu_tau_e3 + z_tau_e3 * sigma_tau_e3;
      psi_e3 = mu_psi_e3 + z_psi_e3 * sigma_psi_e3;
    
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      
      vector[N_day] theta_e4;
      matrix[N_dim_day, N_dim_day] sigma_theta_e4;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e4;
      sigma_theta_e4 = cov_GPL2(dist_day, eta_theta_e4, rho_theta_e4, 0.01);
      L_sigma_theta_e4 = cholesky_decompose(sigma_theta_e4);
      theta_e4 = L_sigma_theta_e4 * z_theta_e4;
    
      matrix[N_season, N_month] tau_e4;
      matrix[N_site, N_month] psi_e4;
      tau_e4 = mu_tau_e4 + z_tau_e4 * sigma_tau_e4;
      psi_e4 = mu_psi_e4 + z_psi_e4 * sigma_psi_e4;
    
      ///////////////////
    }
    
    model {
      ///////////////////////
      /////////////////////// imputed variables
      mu_sb ~ normal(3.5, 1);
      sigma_sb ~ exponential(1);
      SBiomass_merge ~ normal(mu_sb, sigma_sb);
      mu_sbINI ~ normal(3.5, 1);
      sigma_sbINI ~ exponential(1);
      swarmINI_merge ~ normal(mu_sbINI, sigma_sbINI);
      mu_sbFIN ~ normal(3.5, 1);
      sigma_sbFIN ~ exponential(1);
      swarmFIN_merge ~ normal(mu_sbFIN, sigma_sbFIN);
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      vector[N] mu_e1;
      a_e1 ~ normal(0, 1);
      beta_rainW2_e1 ~ normal(0, 0.5);
      sigma_e1 ~ exponential(1);
      
      ///////////////////
      /////////////////// rain_i -> swarm
      to_vector(a_e2) ~ normal(3, 1);
      sigma_e2 ~ exponential(1);
      to_vector(beta_rainW1_e2) ~ normal(0, 0.25);
    
      z_theta_e2 ~ normal(0, 0.5);     
      eta_theta_e2 ~ exponential(3);   
      rho_theta_e2 ~ exponential(0.5); 
      
      to_vector(z_tau_e2) ~ normal(0, 0.5);
      mu_tau_e2 ~ normal(0, 0.5);
      sigma_tau_e2 ~ exponential(1);
    
      to_vector(z_psi_e2) ~ normal(0, 0.5);
      mu_psi_e2 ~ normal(0, 0.5);
      sigma_psi_e2 ~ exponential(1);
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      to_vector(a_e3) ~ normal(2.5, 1);
      sigma_e3 ~ exponential(1);
      to_vector(beta_rainW1_e3) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e3) ~ normal(0, 3);
    
      z_theta_e3 ~ normal(0, 1);
      eta_theta_e3 ~ exponential(3);
      rho_theta_e3 ~ exponential(0.5);
      
      to_vector(z_tau_e3) ~ normal(0, 0.5);
      mu_tau_e3 ~ normal(0, 0.5);
      sigma_tau_e3 ~ exponential(1);
    
      to_vector(z_psi_e3) ~ normal(0, 0.5);
      mu_psi_e3 ~ normal(0, 0.5);
      sigma_psi_e3 ~ exponential(1);
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      to_vector(a_e4) ~ normal(2.5, 2);
      sigma_e4 ~ exponential(1);
      to_vector(beta_rainW1_e4) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e4) ~ normal(0, 0.5);
      to_vector(beta_swarmB_e4) ~ normal(0, 0.5);
    
      z_theta_e4 ~ normal(0, 1);
      eta_theta_e4 ~ exponential(3);
      rho_theta_e4 ~ exponential(0.5);
      
      to_vector(z_tau_e4) ~ normal(0, 0.5);
      mu_tau_e4 ~ normal(0, 0.5);
      sigma_tau_e4 ~ exponential(1);
    
      to_vector(z_psi_e4) ~ normal(0, 0.5);
      mu_psi_e4 ~ normal(0, 0.5);
      sigma_psi_e4 ~ exponential(1);
      
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      for (i in 1:N) {
        cum_rainfall_W25[i] ~ normal(a_e1 + beta_rainW2_e1 * cum_rainfall_W30[i], 
                                     sigma_e1);
      }
    
      ///////////////////
      /////////////////// rain_i -> swarm
      for (i in 1:N) {
        swarm_area[i] ~ student_t(2,
                                  a_e2[site[i], season[i]] + 
                                  beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W25[i] +
                                  theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                                  psi_e2[site[i], month[i]], 
                                  sigma_e2);
      }
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      for (i in 1:N) {
        SBiomass_merge[i] ~ student_t(2,
                                     a_e3[site[i], season[i]] + 
                                     beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W25[i] +
                                     beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                                     theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                                     psi_e3[site[i], month[i]], 
                                     sigma_e3);
      }
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      for (i in 1:N) {
        net_size[i] ~ neg_binomial_2(exp(a_e4[site[i], season[i]] + 
                                     beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W25[i] +
                                     beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                                     beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                                     theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                                     psi_e4[site[i], month[i]]),
                                     sigma_e4);
      }
    }
    
    generated quantities {
      vector[N] mu_e1;
      vector[N] mu_e2;
      vector[N] mu_e3;
      vector[N] mu_e4;
      array[N] real ppcheck_e1;
      array[N] real ppcheck_e2;
      array[N] real ppcheck_e3;
      array[N] int ppcheck_e4;
      
      for (i in 1:N) {
        mu_e1[i] = a_e1 + beta_rainW2_e1 * cum_rainfall_W30[i]; 
      }
    
      ppcheck_e1 = normal_rng(mu_e1, sigma_e1);
    
      for (i in 1:N) {
        mu_e2[i] = a_e2[site[i], season[i]] + 
                   beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W25[i] +
                   theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                   psi_e2[site[i], month[i]];
      }
      
      ppcheck_e2 = student_t_rng(2, mu_e2, sigma_e2);
    
    
      for (i in 1:N) {
        mu_e3[i] = a_e3[site[i], season[i]] + 
                   beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W25[i] +
                   beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                   theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                   psi_e3[site[i], month[i]];
      }
      
      ppcheck_e3 = student_t_rng(2, mu_e3, sigma_e3);
    
      for (i in 1:N) {
        mu_e4[i] = a_e4[site[i], season[i]] + 
                   beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W25[i] +
                   beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                   beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                   theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                   psi_e4[site[i], month[i]];
        mu_e4[i] = exp(mu_e4[i]);
      }
    
      ppcheck_e4 = neg_binomial_2_rng(mu_e4, sigma_e4);
    
    }
    
    ")
```

#### Running MCMC algorithm


```{r, eval=FALSE}
file <- paste(getwd(), '/w25_net_size.stan', sep ='')

fit_net_sizeW25 <- cmdstan_model(file, compile = T)

mod_net_sizeW25_obs <- 
  fit_net_sizeW25$sample(
    data = network_metrics_S_OBS, 
    chains = 3, 
    parallel_chains = 3, 
    iter_sampling = 8e3, 
    iter_warmup = 500, 
    thin = 10, 
    seed = 123
  )

```

```{r, echo=FALSE, eval=TRUE}
mod_net_sizeW25_obs <- readRDS('causal_mod_net_sizeW25.rds')
```

#### Model diagnostics

```{r, fig.height=15, fig.cap="Rhat values and ess of group-level parameters from the generative model explaining the effect of cumulative rainfall during W20, on network size of ant followers birds."}

par(mfrow = c(5, 2), mar = c(4, 4, 1.5, 1))
mod_diagnostics(mod_net_sizeW25_obs, 
                mod_net_sizeW25_obs$summary(
                  unique(paste('psi_e2[', 
                               network_metrics_S_OBS$site,
                               ',',
                               network_metrics_S_OBS$month, ']', 
                               sep = '')))) 

mod_diagnostics(mod_net_sizeW25_obs, 
                mod_net_sizeW25_obs$summary(
                  unique(paste('psi_e3[', 
                               network_metrics_S_OBS$site,
                               ',',
                               network_metrics_S_OBS$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_net_sizeW25_obs, 
                mod_net_sizeW25_obs$summary(
                  unique(paste('psi_e4[', 
                               network_metrics_S_OBS$site,
                               ',',
                               network_metrics_S_OBS$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_net_sizeW25_obs, 
                mod_net_sizeW25_obs$summary(
                  unique(paste('tau_e4[', 
                               network_metrics_S_OBS$year,
                               ',',
                               network_metrics_S_OBS$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_net_sizeW25_obs, 
                mod_net_sizeW25_obs$summary(
                  unique(paste('tau_e2[', 
                               network_metrics_S_OBS$year,
                               ',',
                               network_metrics_S_OBS$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_net_sizeW25_obs, 
                mod_net_sizeW25_obs$summary(
                  unique(paste('tau_e3[', 
                               network_metrics_S_OBS$year,
                               ',',
                               network_metrics_S_OBS$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_net_sizeW25_obs, 
                mod_net_sizeW25_obs$summary(paste('theta_e4[', 
                                                  1:network_metrics_S_OBS$N_day, ']', 
                                                  sep = '')))
mod_diagnostics(mod_net_sizeW25_obs, 
                mod_net_sizeW25_obs$summary(paste('theta_e3[', 
                                                  1:network_metrics_S_OBS$N_day, ']', 
                                                  sep = '')))

mod_diagnostics(mod_net_sizeW25_obs, 
                mod_net_sizeW25_obs$summary(paste('theta_e2[', 
                                                  1:network_metrics_S_OBS$N_day, ']', 
                                                  sep = '')))
par(mfrow = c(1, 1))
```

```{r, fig.cap="Rhat values and ess of slope, intercept, and dispersion parameters  from the generative model explaining the effect of cumulative rainfall during W25, on network size of ant followers birds."}
summary_net_sizeW25 <- mod_net_sizeW25_obs$summary(c('beta_rainW2_e1', 
                                                     'beta_rainW1_e2',
                                                     'beta_rainW1_e3',
                                                     'beta_rainW1_e4',
                                                     'beta_sawrA_e3',
                                                     'beta_sawrA_e4',
                                                     'beta_swarmB_e4', 
                                                     'a_e1', 'a_e2', 
                                                     'a_e3', 'a_e4',
                                                     'sigma_e1', 'sigma_e2', 
                                                     'sigma_e3', 'sigma_e4', 
                                                     'swarm_area',
                                                     'SBiomass_merge',
                                                     'lp__'))

mod_diagnostics(mod_net_sizeW25_obs, summary_net_sizeW25)
```


```{r, fig.cap= "Posterior predictive checks"}
post_net_sizeW25_obs <- mod_net_sizeW25_obs$draws(c('beta_rainW2_e1', 
                                                    'beta_rainW1_e2',
                                                    'beta_rainW1_e3',
                                                    'beta_rainW1_e4',
                                                    'beta_sawrA_e3',
                                                    'beta_sawrA_e4',
                                                    'beta_swarmB_e4', 
                                                    'a_e1', 'a_e2', 'a_e3', 'a_e4',
                                                    'sigma_e1', 'sigma_e2', 
                                                    'sigma_e3', 'sigma_e4',
                                                    'swarm_area',
                                                    'SBiomass_merge'), format = 'df')

ppcheck_swarmA <- mod_net_sizeW25_obs$draws('ppcheck_e2', format = 'matrix')
ppcheck_swarmB <- mod_net_sizeW25_obs$draws('ppcheck_e3', format = 'matrix')
ppcheck_net_size <- mod_net_sizeW25_obs$draws('ppcheck_e4', format = 'matrix')
ppcheck_R1 <- mod_net_sizeW25_obs$draws('ppcheck_e1', format = 'matrix')

swarm_area <- apply(post_net_sizeW25_obs[, grep('swarm_area', colnames(post_net_sizeW25_obs))], 
                    2, mean)

swarm_BM <- 
  apply(post_net_sizeW25_obs[, grep('SBiomass_merge', colnames(post_net_sizeW25_obs))], 
        2, mean)

par(mfrow = c(2, 2), mar = c(4, 4, 1, 1))
plot(density(network_metrics_S_OBS$cum_rainfall_W25), 
     main = '', xlab = 'Cum rainfall W25')
for(i in 1:100) lines(density(ppcheck_R1[i, ]), lwd = 0.1)
lines(density(network_metrics_S_OBS$cum_rainfall_W25), col = 'red')

plot(density(swarm_area), main = '', xlab = 'Swarm area')
for(i in 1:100) lines(density(ppcheck_swarmA[i, ]), lwd = 0.1)
lines(density(swarm_area), col = 'red')

plot(density(swarm_BM), main = '', xlab = 'Arthropod biomass')
for(i in 1:100) lines(density(ppcheck_swarmB[i, ]), lwd = 0.1)
lines(density(swarm_BM), col = 'red')

plot(density(network_metrics_S_OBS$net_size), 
     main = '', xlab = 'Net size')
for(i in 1:100) lines(density(ppcheck_net_size[i, ]), lwd = 0.1)
lines(density(network_metrics_S_OBS$net_size), col = 'red')

post_beta_net_sizeW25 <- gather(post_net_sizeW25_obs[, grep('beta', colnames(post_net_sizeW25_obs))])

post_beta_net_sizeW25$key <- as.factor(post_beta_net_sizeW25$key)
```

## Plotting network size models

### Main effects

```{r}
t <- paste('W', c(1, seq(5, 25, by = 5)), sep = '')

plot_beta_net_size <- vector('list', length(t))

for (i in seq_along(t)) {
  cadena <- paste('^(.*)beta_net(.*)', t[i], '$', sep = '')
  cadena2 <- paste('post_net_size', t[i], '_obs', sep = '')
  df <- get(ls()[grepl(cadena, ls())])
  temp <- get(ls()[grepl(cadena2, ls())])
  
  temp <- temp[, grep('^beta', colnames(temp))]
  
  temp <- apply(temp, 2, function(x) mean(x > 0))
  
  temp <- tibble(p = temp, key = names(temp))
  
  df <- 
    df |> 
    group_by(key) |> 
    transmute(li = quantile(value, 0.025), 
              ls = quantile(value, 0.975), 
              mu = mean(value), 
              window = t[i]) |> 
    unique()
  
  n <- c(1, seq(5, 25, by = 5))[i]
  
  df <- df[!grepl(n + 4, df$key), ]
  
  df <- full_join(df, temp, by = 'key')
  
  plot_beta_net_size[[i]] <- df
  print(i)
}

plot_beta_net_size <- do.call('rbind', plot_beta_net_size)

plot_beta_net_size <- plot_beta_net_size[!grepl('W2', plot_beta_net_size$key),]

plot_beta_net_size$window <- as.factor(plot_beta_net_size$window)

plot_beta_net_size$season <- 
  ifelse(grepl('^(.*)(..,1.)$', plot_beta_net_size$key), 'Dry', 'Wet')

plot_beta_net_size$site <- 
  ifelse(grepl('^(.*)(.1,..)$', plot_beta_net_size$key), '1', 
         ifelse(grepl('^(.*)(.2,..)$', plot_beta_net_size$key), '2', 
                ifelse(grepl('^(.*)(.3,..)$', plot_beta_net_size$key), '3', '4')))

plot_beta_net_size$site <- as.factor(plot_beta_net_size$site)

plot_beta_net_size$site <- 
  factor(plot_beta_net_size$site, 
         labels = levels(network_metrics_INDX$obs_net_size$site))

plot_beta_net_size$rainfall_level <- 
  factor(plot_beta_net_size$site, 
         labels = c('Medium-high rainfall', 'Medium-low rainfall', 
                    'Low rainfall', 'High rainfall'))

plot_beta_net_size$rainfall_level <- 
  factor(plot_beta_net_size$rainfall_level, 
         levels = c('Low rainfall', 'Medium-low rainfall', 
                    'Medium-high rainfall', 'High rainfall'))


plot_beta_net_size$key <- gsub('^(.*)(.....)$', '\\1', plot_beta_net_size$key)

plot_beta_net_sizeWET <- plot_beta_net_size[plot_beta_net_size$season == 'Wet',]

plot_beta_net_sizeWET$key <- factor(plot_beta_net_sizeWET$key) 

plot_beta_net_sizeWET$code <- 
  plot_beta_net_sizeWET %$% paste(key, window, rainfall_level, sep = '_')

sum(plot_beta_net_sizeWET$code == "beta_rainW1_e2_W15_Medium-low rainfall" |
      plot_beta_net_sizeWET$code == "beta_sawrA_e4_W15_Medium-low rainfall")

levels(plot_beta_net_sizeWET$key)

levels(plot_beta_net_sizeWET$rainfall_level)
levels(plot_beta_net_sizeWET$site)

plot_beta_net_sizeWET$key <- 
  factor(plot_beta_net_sizeWET$key, 
         levels = 
           c("beta_rainW1_e2", 
             "beta_rainW1_e3",
             "beta_sawrA_e3", 
             "beta_rainW1_e4",
             "beta_sawrA_e4",
             "beta_swarmB_e4"))


plot_effects_net_sizeWET <- 
  plot_beta_net_sizeWET |> 
  ggplot() +
  geom_vline(xintercept = 0, linetype = 3, col = 'red') +
  geom_errorbar(aes(y = key, xmin = li, 
                    xmax = ls, color = window), 
                width = 0, position = position_dodge(width = 0.8)) +
  geom_point(aes(mu, key, color = window, shape = window), 
             position = position_dodge(width = 0.8)) +
  scale_color_manual(values = c(rep('lightblue3', 2), 
                                'lightblue3', 
                                rep('lightblue3', 3))) +
  facet_wrap(~ rainfall_level, ncol = 1) +
  scale_y_discrete(limits =
                     c(
                       "beta_swarmB_e4",
                       "beta_sawrA_e4",
                       "beta_rainW1_e4",
                       "beta_sawrA_e3",
                       "beta_rainW1_e3",
                       "beta_rainW1_e2"),
                   labels = c(expression('Arthropod biomass' %->% 'Network size'),
                              expression('Swarm area' %->% 'Network size'),
                              expression('Rainfall' %->% 'Network size'),
                              expression('Swarm area' %->% 'Arthropod biomass'),
                              expression('Rainfall' %->% 'Arthropod biomass'),
                              expression('Rainfall' %->% 'Swarm area'))) +
  labs(x = expression(beta), y = 'Effect', title = 'Wet season') +
  theme_bw() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    strip.background = element_blank(),
    panel.border = element_rect(colour = "black", fill = NA),
    legend.title = element_blank(),
    legend.background = element_blank(),
    legend.position = c(0.10, 0.09), 
    legend.box.background = element_blank(), 
    legend.key.size = unit(2.5, 'mm')
  )


plot_beta_net_sizeDRY <- plot_beta_net_size[plot_beta_net_size$season == 'Dry',]

plot_beta_net_sizeDRY$key <- factor(plot_beta_net_sizeDRY$key)

levels(plot_beta_net_sizeDRY$key)

levels(plot_beta_net_sizeDRY$site)

plot_beta_net_sizeDRY$key <- 
  factor(plot_beta_net_sizeDRY$key, 
         levels = 
           c("beta_rainW1_e2", 
             "beta_rainW1_e3",
             "beta_sawrA_e3", 
             "beta_rainW1_e4",
             "beta_sawrA_e4",
             "beta_swarmB_e4"))

plot_effects_net_sizeDRY <- 
  plot_beta_net_sizeDRY |> 
  ggplot() +
  geom_vline(xintercept = 0, linetype = 3, col = 'red') +
  geom_errorbar(aes(y = key, xmin = li, 
                    xmax = ls, color = window), 
                width = 0, position = position_dodge(width = 0.8)) +
  geom_point(aes(mu, key, color = window, shape = window), 
             position = position_dodge(width = 0.8)) +
  scale_color_manual(values = c(rep('lightblue3', 2), 
                                'lightblue3', 
                                rep('lightblue3', 3))) +
  facet_wrap(~ rainfall_level, ncol = 1) +
  scale_y_discrete(limits =
                     c(
                       "beta_swarmB_e4",
                       "beta_sawrA_e4",
                       "beta_rainW1_e4",
                       "beta_sawrA_e3",
                       "beta_rainW1_e3",
                       "beta_rainW1_e2"),
                   labels = c(expression('Arthropod biomass' %->% 'Network size'),
                              expression('Swarm area' %->% 'Network size'),
                              expression('Rainfall' %->% 'Network size'),
                              expression('Swarm area' %->% 'Arthropod biomass'),
                              expression('Rainfall' %->% 'Arthropod biomass'),
                              expression('Rainfall' %->% 'Swarm area'))) +
  labs(x = expression(beta), y = 'Effect', title = 'Dry season') +
  theme_bw() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    strip.background = element_blank(),
    panel.border = element_rect(colour = "black", fill = NA),
    legend.title = element_blank(),
    legend.background = element_blank(),
    legend.position = c(0.10, 0.10), 
    legend.box.background = element_blank(), 
    legend.key.size = unit(2.5, 'mm'), 
    axis.text.y = element_blank()
  )

```



```{r, fig.cap="Slope coefficients of causal models explaining the effect of biotic and abiotic factors on the structure of ant-followers interaction networks", fig.height=20, fig.width=15}
plot_effects_net_sizeWET | plot_effects_net_sizeDRY +
  plot_layout(ncol = 1)
```

### Conditional effect of arthropod biomass and swarm area

```{r, warning=FALSE, message=FALSE}
s <- network_metrics_INDX$obs_net_size
s <- s[, -c(2, 4)]

s$season <- 
  ifelse(as.numeric(as.character(s$month)) <= 4, 1, 2)

s <- 
  s %$% 
  aggregate(net_size ~ season + site, FUN = length)

s

s2 <- network_metrics_INDX$obs_net_size
s2 <- s2[, -c(2, 4)]
s2$obs_ID <- as.factor(s2$obs_ID)

unique(tibble(x = network_metrics_INDX$obs_net_size$site, 
              x1 = as.numeric(network_metrics_INDX$obs_net_size$site)))

plot_beta_net_size[plot_beta_net_size$p >= 0.9 |
                     plot_beta_net_size$p <= 0.1, ] |> print(n = 100)

effects_net_size <- 
  plot_beta_net_size[plot_beta_net_size$p >= 0.9 |
                       plot_beta_net_size$p <= 0.1, ]

effects_net_size <- split(effects_net_size, 
                          list(effects_net_size$window, 
                               effects_net_size$season, 
                               effects_net_size$site))

effects_net_size <- effects_net_size[unlist(lapply(effects_net_size, function(x) nrow(x) > 0), 
                                            use.names = F)]

# ==== site JUAN ====
for (i in grep('JUAN', names(effects_net_size))) print(effects_net_size[[i]])
# JUAN swarm area --> swarm biomass --> net size (independent of the window)

swarm_area <- 
  sapply(ls()[grep('post_net_size', ls())], FUN = 
           function(x) {
             df <- get(x)
             sa <- df[, grep('swarm_area', colnames(df))]
             apply(sa, 2, mean)
           }, simplify = 'matrix')

swarm_area <- as.vector(apply(swarm_area, 1, mean))

swarm_BM <- 
  sapply(ls()[grep('post_net_size', ls())], FUN = 
           function(x) {
             df <- get(x)
             sa <- df[, grep('SBiomass_merge', colnames(df))]
             apply(sa, 2, mean)
           }, simplify = 'matrix')

swarm_BM <- as.vector(apply(swarm_BM, 1, mean))


# counterfactual (medium-high rainfall - JUAN)

sites <- 
  tibble(site = network_metrics_S_OBS$site, 
         day = network_metrics_S_OBS$day, 
         month = network_metrics_S_OBS$month, 
         season = network_metrics_S_OBS$season)

day <- unique(sites[sites$site == 1 & sites$season == 2, ]$day)
month <- unique(sites[sites$site == 1 & sites$season == 2, ]$month)

day <- sites[, c('site', 'month')]
month <- sites[, c('season', 'month')]

psi_e3W15MHR <- 
  mod_net_sizeW15_obs$draws(
    unique(paste('psi_e3[', 
                 day$site,
                 ',',
                 day$month, ']', 
                 sep = '')), format = 'matrix') |> 
  apply(1, mean)

psi_e4W15MHR <- 
  mod_net_sizeW15_obs$draws(
    unique(paste('psi_e4[', 
                 day$site,
                 ',',
                 day$month, ']',  
                 sep = '')), format = 'matrix') |> 
  apply(1, mean)

tau_e3W15MHR <- 
  mod_net_sizeW15_obs$draws(
    unique(paste('tau_e3[', 
                 month$season,
                 ',',
                 month$month, ']', 
                 sep = '')), format = 'matrix') |> 
  apply(1, mean)

tau_e4W15MHR <- 
  mod_net_sizeW15_obs$draws(
    unique(paste('tau_e4[', 
                 month$season,
                 ',',
                 month$month, ']', 
                 sep = '')), format = 'matrix') |> 
  apply(1, mean)

theta_e3W15MHR <- 
  mod_net_sizeW15_obs$draws(paste('theta_e3[', 
                                  unique(sites$day), ']', 
                                  sep = ''), format = 'matrix') |> 
  apply(1, mean)


theta_e4W15MHR <- 
  mod_net_sizeW15_obs$draws(paste('theta_e4[', 
                                  unique(sites$day), ']', 
                                  sep = ''), format = 'matrix') |> 
  apply(1, mean)

x_W15 <- seq(min(swarm_area), max(swarm_area), length.out = 1000)

est_counterSB <- 
  sapply(x_W15, FUN = 
           function(x) {
             
             s_BM <- 
               post_net_sizeW15_obs$`a_e3[1,2]` + 
               post_net_sizeW15_obs$`beta_rainW1_e3[1,2]`*0 +
               post_net_sizeW15_obs$`beta_sawrA_e3[1,2]`*x +
               psi_e3W15MHR + theta_e3W15MHR + tau_e3W15MHR
             
             rstudent(2400, nu = 2, mu = s_BM, sigma = post_net_sizeW15_obs$sigma_e3)
             
           })


est_counterSB_MU <- 
  sapply(x_W15, FUN = 
           function(x) {
             
             s_BM <- 
               post_net_sizeW15_obs$`a_e3[1,2]` + 
               post_net_sizeW15_obs$`beta_rainW1_e3[1,2]`*0 +
               post_net_sizeW15_obs$`beta_sawrA_e3[1,2]`*x +
               psi_e3W15MHR + theta_e3W15MHR + tau_e3W15MHR
             
             s_BM
             
           })

est_counterSB <- 
  do.call('rbind', 
          apply(est_counterSB, 2, function(x) {
            tibble(li = quantile(x, 0.025), 
                   ls = quantile(x, 0.975))
          }, simplify = 'list'))

est_counterSB$x <- x_W15
est_counterSB$season <- 'Wet season'
est_counterSB$mu <- apply(est_counterSB_MU, 2, mean)

dat <- tibble(x = swarm_area, 
              y = swarm_BM, 
              season = network_metrics_S_OBS$season, 
              site = network_metrics_S_OBS$site, 
              net_size = network_metrics_S_OBS$net_size)

dat

plot_swarm_biomas_NS_JUAN <- 
  ggplot() +
  geom_point(
    data = dat[dat$site == 1 & dat$season == 2,],
    aes(x, y), color = 'lightblue3'
  ) + 
  geom_ribbon(
    data = est_counterSB, 
    aes(x, ymin = li, ymax = ls), alpha = 0.25, 
    fill = 'tan1'
  ) +
  geom_line(
    data = est_counterSB, aes(x, mu), linewidth = 1, 
    color = 'tan1'
  ) +
  labs(x = 'Swarm area', 
       y = 'Arthropod biomass') +
  theme_bw() +
  theme(panel.grid = element_blank(),
        legend.background = element_blank(), 
        legend.position = 'none', 
        axis.text = element_text(size = 11), 
        axis.title = element_text(size = 15))

x_W15_2 <- seq(min(swarm_BM), max(swarm_BM), length.out = 1000)

est_counterNET_SIZE <- 
  sapply(x_W15_2, FUN = 
           function(x) {
             
             NS <- 
               post_net_sizeW15_obs$`a_e4[1,2]` + 
               post_net_sizeW15_obs$`beta_rainW1_e4[1,2]`*0 +
               post_net_sizeW15_obs$`beta_sawrA_e4[1,2]`*mean(swarm_area) +
               post_net_sizeW15_obs$`beta_swarmB_e4[1,2]`*x +
               psi_e4W15MHR + theta_e4W15MHR + tau_e4W15MHR
             
             rnbinom(2400, mu = exp(NS), size = post_net_sizeW15_obs$sigma_e4)
             
           })


est_counterNET_SIZE_mu <- 
  sapply(x_W15_2, FUN = 
           function(x) {
             
             NS <- 
               post_net_sizeW15_obs$`a_e4[1,2]` + 
               post_net_sizeW15_obs$`beta_rainW1_e4[1,2]`*0 +
               post_net_sizeW15_obs$`beta_sawrA_e4[1,2]`*mean(swarm_area) +
               post_net_sizeW15_obs$`beta_swarmB_e4[1,2]`*x +
               psi_e4W15MHR + theta_e4W15MHR + tau_e4W15MHR
             
             exp(NS)
             
           })

est_counterNET_SIZE <- 
  do.call('rbind', 
          apply(est_counterNET_SIZE, 2, function(x) {
            tibble(li = quantile(x, 0.025), 
                   ls = quantile(x, 0.975))
          }, simplify = 'list'))

est_counterNET_SIZE$x <- x_W15_2
est_counterNET_SIZE$season <- 'Wet season'
est_counterNET_SIZE$mu <- apply(est_counterNET_SIZE_mu, 2, mean)


plot_NS_JUAN <- 
  ggplot() +
  geom_point(
    data = dat[dat$site == 1 & dat$season == 2,],
    aes(y, net_size), color = 'lightblue3'
  ) + 
  geom_ribbon(
    data = est_counterNET_SIZE, 
    aes(x, ymin = li, ymax = ls), alpha = 0.25, 
    fill = 'tan1'
  ) +
  geom_line(
    data = est_counterNET_SIZE, aes(x, mu), linewidth = 1, 
    color = 'tan1'
  ) +
  labs(y = 'Network size', 
       x = 'Arthropod biomass') +
  theme_bw() +
  theme(panel.grid = element_blank(),
        legend.background = element_blank(), 
        legend.position = 'none', 
        axis.text = element_text(size = 11), 
        axis.title = element_text(size = 15))
```

```{r, fig.cap='Conditional plots of main biotic and abiotic predictors affecting size of ant-followers interaction networks'}
(plot_swarm_biomas_NS_JUAN | plot_NS_JUAN) 
```

$\beta$ parameter of $swarm~area \rightarrow arthropod~biomass$

```{r}
mean(post_net_sizeW15_obs$`beta_sawrA_e3[1,2]`)
sd(post_net_sizeW15_obs$`beta_sawrA_e3[1,2]`)
mean(post_net_sizeW15_obs$`beta_sawrA_e3[1,2]` > 0)
```

$\beta$ parameter of $arthropod~biomass \rightarrow network~ size$

```{r}
mean(post_net_sizeW15_obs$`beta_swarmB_e4[1,2]`)
sd(post_net_sizeW15_obs$`beta_swarmB_e4[1,2]`)
mean(post_net_sizeW15_obs$`beta_swarmB_e4[1,2]` > 0)
```

### Contrast between seasons

```{r}
# ==== contrast seasons ======

posteriors <- ls()[grep('^(post_net_size)(W[0-9]*)', ls())]

df_seasons <- 
  lapply(posteriors, FUN = 
         function(draws) {
           
           p <- get(draws)
           
           w <- gsub('^(.*)(W[0-9]*)(.*)$', '\\2', draws)
           
           post_season <- 
             p[, colnames(p)[grep('^a_e4', colnames(post_net_sizeW1_obs))]] |> 
             gather() 
           
           post_season <- split(post_season, post_season$key)  
           
           sites <- rep(c('Medium-high rainfall', 
                          'Medium-low rainfall', 
                          'low rainfall', 
                          'High rainfall'), each = 2)
           
           season <- rep(c('Dry', 'Wet'), 4)
           
           for (i in seq_along(sites)) {
             post_season[[i]]$site <- sites[[i]]
             post_season[[i]]$season <- season[[i]]
             post_season[[i]] <- post_season[[i]][, -1]
           }
           
           post_season <- do.call('rbind', post_season)
           post_season <- split(post_season, post_season$site)
           
           post_season <- 
             lapply(post_season, FUN = 
                      function(x) {
                        j <- 
                          exp(x[x$season == 'Dry', ]$value) - 
                          exp(x[x$season == 'Wet', ]$value)
                        
                        tibble(site = x$site[1], 
                               contrast = j, 
                               p = mean(j > 0))
                      })
           
           post_season <- do.call('rbind', post_season)
           
           post_season$model <- w
           
           post_season
         })

df_seasons <- do.call('rbind', df_seasons)

```

```{r, fig.cap="Contrast of posterior distributions of network size during the wet and dry seasons at the sites with different levels of annual rainfall. Each panel shows the contrast for each model at temporal windows of cumulative rainfall: (i.e. from 1, 5, 10, 15, 20 and 25 days after sampling)"}
df_seasons |> 
  ggplot(aes(contrast, fill = site)) +
  geom_density(alpha = 0.5) +
  geom_vline(xintercept = 0, linetype = 3, col = 'red') +
  labs(x = 'Network size\n (contrast between wet and dry season)') +
  lims(x = c(-40, 80)) +
  facet_wrap(~model)
```

### Causal effect arthropod biomass and swarm area

```{r, warning=FALSE}
counterfact_net_size_JUAN <- 
  function(.fun = mean, mu = T, year = 2022, effect = 'swarm') {
    
    if (effect == 'swarm') {
      s_BM <- 
        post_net_sizeW15_obs$`a_e3[1,2]` + 
        post_net_sizeW15_obs$`beta_rainW1_e3[1,2]`*0 +
        post_net_sizeW15_obs$`beta_sawrA_e3[1,2]`*.fun(swarm_area) + 
        psi_e3W15MHR + theta_e3W15MHR + tau_e3W15MHR
      
      NS <- 
        post_net_sizeW15_obs$`a_e4[1,2]` + 
        post_net_sizeW15_obs$`beta_rainW1_e4[1,2]`*0 +
        post_net_sizeW15_obs$`beta_sawrA_e4[1,2]`*mean(swarm_area) +
        post_net_sizeW15_obs$`beta_swarmB_e4[1,2]`*s_BM +
        psi_e4W15MHR + theta_e4W15MHR + tau_e4W15MHR
      
    } else {
      NS <- 
        post_net_sizeW15_obs$`a_e4[1,2]` + 
        post_net_sizeW15_obs$`beta_rainW1_e4[1,2]`*0 +
        post_net_sizeW15_obs$`beta_sawrA_e4[1,2]`*mean(swarm_area) +
        post_net_sizeW15_obs$`beta_swarmB_e4[1,2]`*.fun(swarm_BM) +
        psi_e4W15MHR + theta_e4W15MHR + tau_e4W15MHR
    }
    
    if (mu) {
      exp(NS)
    } else {
      set.seed(123)
      rnbinom(length(NS), mu = exp(NS), 
              size = post_net_sizeW15_obs$sigma_e4)
    }
  } 

net_size_counterFAC_contrast_JUAN_SWARM <- 
  tibble(mu_val = c(counterfact_net_size_JUAN(max, F) - counterfact_net_size_JUAN(min, F)), 
         Intervention = 'Causal effect of\n swarm area  ')

net_size_counterFAC_contrast_JUAN_ARTH <- 
  tibble(mu_val = c(counterfact_net_size_JUAN(max, F, effect = 'n') - 
                      counterfact_net_size_JUAN(min, F, effect = 'n')), 
         Intervention = 'Causal effect of  \n arthropod biomass')

net_size_counter_JUAN <- 
  rbind(net_size_counterFAC_contrast_JUAN_SWARM,
        net_size_counterFAC_contrast_JUAN_ARTH)

plot_contrast_net_sawrm_JUAN <- 
  ggplot() +
  geom_boxplot(data = net_size_counter_JUAN, 
               aes(x = mu_val, y = Intervention), 
               alpha = 0.3, color = 'tan1', 
               fill = 'tan1', width = 0.2) +
  geom_vline(xintercept = 0, linetype = 2, color = 'red') +
  labs(x = 'Contrast between\n interventions (min - max)', 
       y = NULL) +
  theme_bw() +
  lims(x = c(-30, 55)) +
  theme(panel.grid = element_blank(), 
        legend.title = element_blank(), 
        legend.position = c(0.2, 0.8), 
        legend.background = element_blank(), 
        legend.key.size = unit(2, 'mm'), 
        axis.text = element_text(size = 15), 
        axis.title = element_text(size = 18))
```

```{r, fig.cap='Causal effect of intervening arthropod biomass on network size of ant-followers'}
plot_contrast_net_sawrm_JUAN
```

Probability of the causal effect being above zero, average increase, SD, and percentage of increase given the swarm area intervention
```{r}
mean(net_size_counterFAC_contrast_JUAN_SWARM$mu_val > 0)
mean(net_size_counterFAC_contrast_JUAN_SWARM$mu_val)
sd(net_size_counterFAC_contrast_JUAN_SWARM$mu_val)


(mean(counterfact_net_size_JUAN(min, mu = F)) * 100)/
  mean(counterfact_net_size_JUAN(max, mu = F))
```

Probability of the causal effect being above zero, average increase, SD, and percentage of increase given the arthropod biomass intervention
```{r}
mean(net_size_counterFAC_contrast_JUAN_ARTH$mu_val)
sd(net_size_counterFAC_contrast_JUAN_ARTH$mu_val)
mean(net_size_counterFAC_contrast_JUAN_ARTH$mu_val > 0)

(median(counterfact_net_size_JUAN(min, mu = F, effect = 'n')) * 100)/
  median(counterfact_net_size_JUAN(max, mu = F, effect = 'n'))
```

### Conditional effect swarm area
```{r, warning=FALSE}
for (i in grep('PLRD', names(effects_net_size))) print(effects_net_size[[i]])
# PLRD swarm area --> net size (independent of the window)

swarm_area <- 
  sapply(ls()[grep('post_net_size', ls())], FUN = 
           function(x) {
             df <- get(x)
             sa <- df[, grep('swarm_area', colnames(df))]
             apply(sa, 2, mean)
           }, simplify = 'matrix')

swarm_area <- as.vector(apply(swarm_area, 1, mean))

swarm_BM <- 
  sapply(ls()[grep('post_net_size', ls())], FUN = 
           function(x) {
             df <- get(x)
             sa <- df[, grep('SBiomass_merge', colnames(df))]
             apply(sa, 2, mean)
           }, simplify = 'matrix')

swarm_BM <- as.vector(apply(swarm_BM, 1, mean))


# counterfactual (medium-high rainfall - JUAN)

sites <- 
  tibble(site = network_metrics_S_OBS$site, 
         day = network_metrics_S_OBS$day, 
         month = network_metrics_S_OBS$month, 
         season = network_metrics_S_OBS$season)

day <- unique(sites[sites$site == 3 & sites$season == 2, ]$day)
month <- unique(sites[sites$site == 3 & sites$season == 2, ]$month)

day <- sites[, c('site', 'month')]
month <- sites[, c('season', 'month')]

psi_e4W15LR <- 
  mod_net_sizeW15_obs$draws(
    unique(paste('psi_e4[', 
                 day$site,
                 ',',
                 day$month, ']', 
                 sep = '')), format = 'matrix') |> 
  apply(1, mean)


tau_e4W15LR <- 
  mod_net_sizeW15_obs$draws(
    unique(paste('tau_e4[', 
                 month$season,
                 ',',
                 month$month, ']', 
                 sep = '')), format = 'matrix') |> 
  apply(1, mean)

theta_e4W15LR <- 
  mod_net_sizeW15_obs$draws(paste('theta_e4[', 
                                  unique(sites$day), ']', 
                                  sep = ''), format = 'matrix') |> 
  apply(1, mean)

x_W15 <- seq(min(swarm_area), max(swarm_area), length.out = 1000)

est_counterNS <- 
  sapply(x_W15, FUN = 
           function(x) {
             
             NS <- 
               post_net_sizeW15_obs$`a_e4[3,2]` + 
               post_net_sizeW15_obs$`beta_rainW1_e4[3,2]`*0 +
               post_net_sizeW15_obs$`beta_sawrA_e4[3,2]`*x +
               post_net_sizeW15_obs$`beta_swarmB_e4[3,2]`*mean(swarm_BM) +
               psi_e4W15LR + theta_e4W15LR + tau_e4W15LR
             
             rnbinom(length(NS), mu = exp(NS), size = post_net_sizeW15_obs$sigma_e4)
             
           })


est_counterNS_MU <- 
  sapply(x_W15, FUN = 
           function(x) {
             
             NS <- 
               post_net_sizeW15_obs$`a_e4[3,2]` + 
               post_net_sizeW15_obs$`beta_rainW1_e4[3,2]`*0 +
               post_net_sizeW15_obs$`beta_sawrA_e4[3,2]`*x +
               post_net_sizeW15_obs$`beta_swarmB_e4[3,2]`*mean(swarm_BM) +
               psi_e4W15LR + theta_e4W15LR + tau_e4W15LR
             
             exp(NS)
             
           })

est_counterNS <- 
  do.call('rbind', 
          apply(est_counterNS, 2, function(x) {
            tibble(li = quantile(x, 0.025), 
                   ls = quantile(x, 0.975))
          }, simplify = 'list'))

est_counterNS$x <- x_W15
est_counterNS$season <- 'Wet season'
est_counterNS$mu <- apply(est_counterNS_MU, 2, mean)

dat <- tibble(x = swarm_area, 
              y = swarm_BM, 
              season = network_metrics_S_OBS$season, 
              site = network_metrics_S_OBS$site, 
              net_size = network_metrics_S_OBS$net_size)

plot_NS_PLR <- 
  ggplot() +
  geom_point(
    data = dat[dat$site == 1 & dat$season == 2,],
    aes(x, net_size), color = 'lightblue3'
  ) + 
  geom_ribbon(
    data = est_counterNS, 
    aes(x, ymin = li, ymax = ls), alpha = 0.25, 
    fill = 'tomato3'
  ) +
  geom_line(
    data = est_counterNS, aes(x, mu), linewidth = 1, 
    color = 'tomato3'
  ) +
  labs(x = 'Swarm area', 
       y = 'Network size') +
  theme_bw() +
  theme(panel.grid = element_blank(),
        legend.background = element_blank(), 
        legend.position = 'none', 
        axis.text = element_text(size = 11), 
        axis.title = element_text(size = 16))

```

```{r, fig.cap='Conditional plots of main biotic and abiotic predictors affecting size of ant-followers interaction networks'}
plot_NS_PLR
```

$\beta$ parameter of $swarm~area \rightarrow network~size$

```{r}
mean(post_net_sizeW15_obs$`beta_sawrA_e4[3,2]`)
sd(post_net_sizeW15_obs$`beta_sawrA_e4[3,2]`)
mean(post_net_sizeW15_obs$`beta_sawrA_e4[3,2]` > 0)
```


### Causal effect of swarm area

```{r, warning=FALSE}
counterfact_net_size_PRL <- 
  function(.fun = mean, mu = T, year = 2022) {
    
    NS <- 
      post_net_sizeW15_obs$`a_e4[3,2]` + 
      post_net_sizeW15_obs$`beta_rainW1_e4[3,2]`*0 +
      post_net_sizeW15_obs$`beta_sawrA_e4[3,2]`*.fun(swarm_area) +
      post_net_sizeW15_obs$`beta_swarmB_e4[3,2]`*mean(swarm_BM) +
      psi_e4W15LR + theta_e4W15LR + tau_e4W15LR 
    
    if (mu) {
      exp(NS)
    } else {
      set.seed(123)
      rnbinom(length(NS), mu = exp(NS), 
              size = post_net_sizeW15_obs$sigma_e4)
    }
  } 

net_size_counter_PRL <- 
  tibble(mu_val = c(counterfact_net_size_PRL(max, F) - counterfact_net_size_PRL(min, F)), 
         Intervention = 'Causal effect of\n swarm area  ')


plot_contrast_net_sawrm_PRL <- 
  ggplot() +
  geom_boxplot(data = net_size_counter_PRL, 
               aes(x = mu_val, y = Intervention), 
               alpha = 0.3, color = 'tomato3', 
               fill = 'tomato3', width = 0.2) +
  geom_vline(xintercept = 0, linetype = 2, color = 'red') +
  labs(x = 'Contrast between\n interventions (min - max)', 
       y = NULL) +
  theme_bw() +
  theme(panel.grid = element_blank(), 
        legend.title = element_blank(), 
        legend.position = c(0.2, 0.8), 
        legend.background = element_blank(), 
        legend.key.size = unit(2, 'mm'), 
        axis.text = element_text(size = 16), 
        axis.title = element_text(size = 18))

```

```{r, fig.cap='Causal effect of intervining swarm area on network size of ant-followers'}
plot_contrast_net_sawrm_PRL
```

Probability of the causal effect being above zero, average increase, SD, and percentage of increase given the swarm area intervention
```{r}
mean(net_size_counter_PRL$mu_val > 0)
mean(net_size_counter_PRL$mu_val)
sd(net_size_counter_PRL$mu_val)

(mean(counterfact_net_size_PRL(min, F)) * 100) /
  mean(counterfact_net_size_PRL(max, F))
```

### Conditional direct and indirect effect of rainfall (W15)

```{r, warning=FALSE}

for (i in grep('LIMB', names(effects_net_size))) print(effects_net_size[[i]])

unique(tibble(x = network_metrics_INDX$obs_net_size$site, 
              x1 = as.numeric(network_metrics_INDX$obs_net_size$site)))

swarm_area <- 
  sapply(ls()[grep('post_net_size', ls())], FUN = 
           function(x) {
             df <- get(x)
             sa <- df[, grep('swarm_area', colnames(df))]
             apply(sa, 2, mean)
           }, simplify = 'matrix')

swarm_area <- as.vector(apply(swarm_area, 1, mean))

swarm_BM <- 
  sapply(ls()[grep('post_net_size', ls())], FUN = 
           function(x) {
             df <- get(x)
             sa <- df[, grep('SBiomass_merge', colnames(df))]
             apply(sa, 2, mean)
           }, simplify = 'matrix')

swarm_BM <- as.vector(apply(swarm_BM, 1, mean))


# counterfactual (medium-high rainfall - JUAN)

sites <- 
  tibble(site = network_metrics_S_OBS$site, 
         day = network_metrics_S_OBS$day, 
         month = network_metrics_S_OBS$month, 
         season = network_metrics_S_OBS$season, 
         rainW15 = network_metrics_S_OBS$cum_rainfall_W15)

day <- unique(sites[sites$site == 2 & sites$season == 2, ]$day)
month <- unique(sites[sites$site == 2 & sites$season == 2, ]$month)

day <- sites[, c('site', 'month')]
month <- sites[, c('season', 'month')]

psi_e2W15MLR <- 
  mod_net_sizeW15_obs$draws(
    unique(paste('psi_e2[', 
                 day$site,
                 ',',
                 day$month, ']', 
                 sep = '')), format = 'matrix') |> 
  apply(1, mean)

psi_e4W15MLR <- 
  mod_net_sizeW15_obs$draws(
    unique(paste('psi_e4[', 
                 day$site,
                 ',',
                 day$month, ']', 
                 sep = '')), format = 'matrix') |> 
  apply(1, mean)

tau_e2W15MLR <- 
  mod_net_sizeW15_obs$draws(
    unique(paste('tau_e2[', 
                 month$season,
                 ',',
                 month$month, ']', 
                 sep = '')), format = 'matrix') |> 
  apply(1, mean)


tau_e4W15MLR <- 
  mod_net_sizeW15_obs$draws(
    unique(paste('tau_e4[', 
                 month$season,
                 ',',
                 month$month, ']', 
                 sep = '')), format = 'matrix') |> 
  apply(1, mean)
unique(sites$day)
theta_e2W15MLR <- 
  mod_net_sizeW15_obs$draws(paste('theta_e2[', 
                                  unique(sites$day), ']', 
                                  sep = ''), format = 'matrix') |> 
  apply(1, mean)


theta_e4W15MLR <- 
  mod_net_sizeW15_obs$draws(paste('theta_e4[', 
                                  unique(sites$day), ']', 
                                  sep = ''), format = 'matrix') |> 
  apply(1, mean)

x_W15_1 <- seq(min(network_metrics_S_OBS$cum_rainfall_W15), 
               max(network_metrics_S_OBS$cum_rainfall_W15), length.out = 1000)

est_counterSA <- 
  sapply(x_W15_1, FUN = 
           function(x) {
             
             SA <- 
               post_net_sizeW15_obs$`a_e2[2,2]` + 
               post_net_sizeW15_obs$`beta_rainW1_e2[2,2]`*x +
               psi_e2W15MLR + theta_e2W15MLR + tau_e2W15MLR
             
             rstudent(2400, nu = 2, mu = SA, sigma = post_net_sizeW15_obs$sigma_e2)
             
           })


est_counterSA_MU <- 
  sapply(x_W15_1, FUN = 
           function(x) {
             
             SA <- 
               post_net_sizeW15_obs$`a_e2[2,2]` + 
               post_net_sizeW15_obs$`beta_rainW1_e2[2,2]`*x +
               psi_e2W15MLR + theta_e2W15MLR + tau_e2W15MLR
             
             SA
             
           })

est_counterSA <- 
  do.call('rbind', 
          apply(est_counterSA, 2, function(x) {
            tibble(li = quantile(x, 0.025), 
                   ls = quantile(x, 0.975))
          }, simplify = 'list'))

est_counterSA$x <- x_W15_1
est_counterSA$season <- 'Wet season'
est_counterSA$mu <- apply(est_counterSA_MU, 2, mean)

dat <- tibble(x = swarm_area, 
              y = swarm_BM, 
              season = network_metrics_S_OBS$season, 
              site = network_metrics_S_OBS$site, 
              net_size = network_metrics_S_OBS$net_size, 
              rainW15 = network_metrics_S_OBS$cum_rainfall_W15)


plot_swarm_area_LIMB <- 
  ggplot() +
  geom_point(
    data = dat[dat$site == 2 & dat$season == 2,],
    aes(x = rainW15, y = x), color = 'lightblue3'
  ) + 
  geom_ribbon(
    data = est_counterSA, 
    aes(x, ymin = li, ymax = ls), alpha = 0.25, 
    fill = 'purple4'
  ) +
  geom_line(
    data = est_counterSA, aes(x, mu), linewidth = 1, 
    color = 'purple4'
  ) +
  labs(y = 'Swarm area', 
       x = 'Rainfall W15') +
  theme_bw() +
  theme(panel.grid = element_blank(),
        legend.background = element_blank(), 
        legend.position = 'none', 
        axis.text = element_text(size = 14), 
        axis.title = element_text(size = 16))

x_W15_2 <- seq(min(swarm_area), max(swarm_area), length.out = 1000)

est_counterNS <- 
  sapply(x_W15_2, FUN = 
           function(x) {
             
             NS <- 
               post_net_sizeW15_obs$`a_e4[2,2]` + 
               post_net_sizeW15_obs$`beta_rainW1_e4[2,2]`*0 +
               post_net_sizeW15_obs$`beta_swarmB_e4[2,2]`*mean(swarm_BM) +
               post_net_sizeW15_obs$`beta_sawrA_e4[2,2]`*x +
               psi_e4W15MLR + theta_e4W15MLR + tau_e4W15MLR
             
             rnbinom(length(NS), mu = exp(NS), size = post_net_sizeW15_obs$sigma_e4)
             
           })


est_counterNS_MU <- 
  sapply(x_W15_2, FUN = 
           function(x) {
             
             NS <- 
               post_net_sizeW15_obs$`a_e4[2,2]` + 
               post_net_sizeW15_obs$`beta_rainW1_e4[2,2]`*0 +
               post_net_sizeW15_obs$`beta_swarmB_e4[2,2]`*mean(swarm_BM) +
               post_net_sizeW15_obs$`beta_sawrA_e4[2,2]`*x +
               psi_e4W15MLR + theta_e4W15MLR + tau_e4W15MLR
             
             exp(NS)
             
           })

est_counterNS <- 
  do.call('rbind', 
          apply(est_counterNS, 2, function(x) {
            tibble(li = quantile(x, 0.025), 
                   ls = quantile(x, 0.975))
          }, simplify = 'list'))

est_counterNS$x <- x_W15_2
est_counterNS$season <- 'Wet season'
est_counterNS$mu <- apply(est_counterNS_MU, 2, mean)


plot_NS_LIMB <- 
  ggplot() +
  geom_point(
    data = dat[dat$site == 2 & dat$season == 2,],
    aes(x, net_size), color = 'lightblue3'
  ) + 
  geom_ribbon(
    data = est_counterNS, 
    aes(x, ymin = li, ymax = ls), alpha = 0.25, 
    fill = 'purple4'
  ) +
  geom_line(
    data = est_counterNS, aes(x, mu), linewidth = 1, 
    color = 'purple4'
  ) +
  labs(y = 'Network size', 
       x = 'Swarm area') +
  theme_bw() +
  theme(panel.grid = element_blank(),
        legend.background = element_blank(), 
        legend.position = 'none', 
        axis.text = element_text(size = 14), 
        axis.title = element_text(size = 16))

est_counterNS2 <- 
  sapply(x_W15_1, FUN = 
           function(x) {
             
             NS <- 
               post_net_sizeW15_obs$`a_e4[2,2]` + 
               post_net_sizeW15_obs$`beta_rainW1_e4[2,2]`*x +
               post_net_sizeW15_obs$`beta_swarmB_e4[2,2]`*mean(swarm_BM) +
               post_net_sizeW15_obs$`beta_sawrA_e4[2,2]`*mean(swarm_area) +
               psi_e4W15MLR + theta_e4W15MLR + tau_e4W15MLR
             
             rnbinom(length(NS), mu = exp(NS), size = post_net_sizeW15_obs$sigma_e4)
             
           })


est_counterNS2_MU <- 
  sapply(x_W15_1, FUN = 
           function(x) {
             
             NS <- 
               post_net_sizeW15_obs$`a_e4[2,2]` + 
               post_net_sizeW15_obs$`beta_rainW1_e4[2,2]`*x +
               post_net_sizeW15_obs$`beta_swarmB_e4[2,2]`*mean(swarm_BM) +
               post_net_sizeW15_obs$`beta_sawrA_e4[2,2]`*mean(swarm_area) +
               psi_e4W15MLR + theta_e4W15MLR + tau_e4W15MLR
             
             exp(NS)
             
           })

est_counterNS2 <- 
  do.call('rbind', 
          apply(est_counterNS2, 2, function(x) {
            tibble(li = quantile(x, 0.025), 
                   ls = quantile(x, 0.975))
          }, simplify = 'list'))

est_counterNS2$x <- x_W15_1
est_counterNS2$season <- 'Wet season'
est_counterNS2$mu <- apply(est_counterNS2_MU, 2, mean)


plot_NS_RAIN_LIMB <- 
  ggplot() +
  geom_point(
    data = dat[dat$site == 2 & dat$season == 2,],
    aes(rainW15, net_size), color = 'lightblue3'
  ) + 
  geom_ribbon(
    data = est_counterNS2, 
    aes(x, ymin = li, ymax = ls), alpha = 0.25, 
    fill = 'purple4'
  ) +
  geom_line(
    data = est_counterNS2, aes(x, mu), linewidth = 1, 
    color = 'purple4'
  ) +
  labs(y = NULL, 
       x = 'Rainfall W15') +
  theme_bw() +
  theme(panel.grid = element_blank(),
        legend.background = element_blank(), 
        legend.position = 'none', 
        axis.text = element_text(size = 14), 
        axis.title = element_text(size = 16))

```

```{r, fig.cap='Conditional plot of rainfall (W15) affecting directly and indirectly network size of ant-followers'}
plot_swarm_area_LIMB +
  plot_NS_LIMB + 
  plot_NS_RAIN_LIMB +
  plot_layout(nrow = 1)
```

$\beta$ parameter of $rainfall~W15 \rightarrow network~size$\

```{r}
mean(post_net_sizeW15_obs$`beta_rainW1_e4[2,2]`)
sd(post_net_sizeW15_obs$`beta_rainW1_e4[2,2]`)
mean(post_net_sizeW15_obs$`beta_rainW1_e4[2,2]` > 0)
```

$\beta$ parameter of $rainfall~W15 \rightarrow swarm~area$

```{r}
mean(post_net_sizeW15_obs$`beta_rainW1_e2[2,2]`)
sd(post_net_sizeW15_obs$`beta_rainW1_e2[2,2]`)
mean(post_net_sizeW15_obs$`beta_rainW1_e2[2,2]` > 0)
```

$\beta$ parameter of $swarm~area \rightarrow network~size$

```{r}
mean(post_net_sizeW15_obs$`beta_sawrA_e4[2,2]`)
sd(post_net_sizeW15_obs$`beta_sawrA_e4[2,2]`)
mean(post_net_sizeW15_obs$`beta_sawrA_e4[2,2]` > 0)
```



### Causal direct and inditect effect of rainfall (W15)
```{r, warning=FALSE}
counterfact_net_size_LIMB <- 
  function(.fun = mean, mu = T, year = 2022, effect = 'rain1') {
    
    rain <- network_metrics_S_OBS$cum_rainfall_W15
    
    if (effect == 'rain1') {
      
      SA <- 
        post_net_sizeW15_obs$`a_e2[2,2]` + 
        post_net_sizeW15_obs$`beta_rainW1_e2[2,2]`*.fun(rain) +
        psi_e2W15MLR + theta_e2W15MLR + tau_e2W15MLR
      
      NS <- 
        post_net_sizeW15_obs$`a_e4[2,2]` + 
        post_net_sizeW15_obs$`beta_rainW1_e4[2,2]`*0 +
        post_net_sizeW15_obs$`beta_swarmB_e4[2,2]`*.fun(swarm_BM) +
        post_net_sizeW15_obs$`beta_sawrA_e4[2,2]`*SA +
        psi_e4W15MLR + theta_e4W15MLR + tau_e4W15MLR
      
      
    } 
    
    if (effect == 'n') {
      NS <- 
        post_net_sizeW15_obs$`a_e4[2,2]` + 
        post_net_sizeW15_obs$`beta_rainW1_e4[2,2]`*.fun(rain) +
        post_net_sizeW15_obs$`beta_swarmB_e4[2,2]`*mean(swarm_BM) +
        post_net_sizeW15_obs$`beta_sawrA_e4[2,2]`*mean(swarm_area) +
        psi_e4W15MLR + theta_e4W15MLR + tau_e4W15MLR
    }
    
    if (effect == 'swarm') {
      NS <- 
        post_net_sizeW15_obs$`a_e4[2,2]` + 
        post_net_sizeW15_obs$`beta_rainW1_e4[2,2]`*0 +
        post_net_sizeW15_obs$`beta_swarmB_e4[2,2]`*mean(swarm_BM) +
        post_net_sizeW15_obs$`beta_sawrA_e4[2,2]`*.fun(swarm_area) +
        psi_e4W15MLR + theta_e4W15MLR + tau_e4W15MLR
    }
    
    if (mu) {
      exp(NS)
    } else {
      set.seed(123)
      rnbinom(length(NS), mu = exp(NS), 
              size = post_net_sizeW15_obs$sigma_e4)
    }
  } 

net_size_counterFAC_contrast_LIMB_SWARM <- 
  tibble(mu_val = c(counterfact_net_size_LIMB(max, F) - counterfact_net_size_LIMB(min, F)), 
         Intervention = 'Causal effect of    \n rainfall W15 (indirect)')

net_size_counterFAC_contrast_LIMB_ARTH <- 
  tibble(mu_val = c(counterfact_net_size_LIMB(max, F, effect = 'n') - 
                      counterfact_net_size_LIMB(min, F, effect = 'n')), 
         Intervention = 'Causal effect of    \n rainfall W15 (direct)')

net_size_counterFAC_contrast_LIMB_SWARM2 <- 
  tibble(mu_val = c(counterfact_net_size_LIMB(max, F, effect = 'swarm') - 
                      counterfact_net_size_LIMB(min, F, effect = 'swarm')), 
         Intervention = 'Causal effect of    \n swarm area')

net_size_counter_LIMB <- 
  rbind(net_size_counterFAC_contrast_LIMB_SWARM,
        net_size_counterFAC_contrast_LIMB_ARTH, 
        net_size_counterFAC_contrast_LIMB_SWARM2)

plot_contrast_net_sawrm_LIMB <- 
  ggplot() +
  geom_boxplot(data = net_size_counter_LIMB, 
               aes(x = mu_val, y = Intervention), 
               alpha = 0.3, color = 'purple4', 
               fill = 'purple4', width = 0.2) +
  geom_vline(xintercept = 0, linetype = 2, color = 'red') +
  labs(x = 'Contrast between\n interventions (min - max)', 
       y = NULL) +
  theme_bw() +
  theme(panel.grid = element_blank(), 
        legend.title = element_blank(), 
        legend.position = c(0.2, 0.8), 
        legend.background = element_blank(), 
        legend.key.size = unit(2, 'mm'), 
        axis.text = element_text(size = 15), 
        axis.title = element_text(size = 17))

```

```{r, fig.cap= 'Causal direct and indirect effects of intervening rainfall (W15) on network size of ant-followers'}
plot_contrast_net_sawrm_LIMB
```

Probability of the causal effect being above zero, average increase, SD, and percentage of increase given the cumulative rainfall (W15) intervention (indirect effect)
```{r}
mean(net_size_counterFAC_contrast_LIMB_SWARM$mu_val > 0)
mean(net_size_counterFAC_contrast_LIMB_SWARM$mu_val)
sd(net_size_counterFAC_contrast_LIMB_SWARM$mu_val)

(mean(counterfact_net_size_LIMB(min, F)) * 100) /
  mean(counterfact_net_size_LIMB(max, F))
```

Probability of the causal effect being above zero, average increase, SD, and percentage of increase given the cumulative rainfall (W15) intervention (direct effect)
```{r}
mean(net_size_counterFAC_contrast_LIMB_ARTH$mu_val > 0)
mean(net_size_counterFAC_contrast_LIMB_ARTH$mu_val)
sd(net_size_counterFAC_contrast_LIMB_ARTH$mu_val)

(mean(counterfact_net_size_LIMB(min, F, effect = 'n')) * 100) /
  mean(counterfact_net_size_LIMB(max, F, effect = 'n'))
```

Probability of swarm effect

```{r}
mean(net_size_counterFAC_contrast_LIMB_SWARM2$mu_val)
mean(net_size_counterFAC_contrast_LIMB_SWARM2$mu_val > 0)
```

## Clustering models

### Mathematical version of the models

Each generative model explaining the effect of *cumulative rainfall* during temporal window *i* on *network clustering* was always conditioned by *cumulative rainfall* during *window i+n*. Therefore, the following model applies for the six models fitted (i.e., W1, W5, W10, W15, W20, W25) to asses when cumulative rainfall has the strongest effect on network clustering.

\\

The first part of the model has a combination of linear equations integrating the generative model:
  
$$
\begin{aligned}
& Clustering_i \sim beta(P1_i, ~P2_i) \\
& P1_i = \mu_i \times \sigma_i \\
& P2_i = (1 - \mu_i) \times \sigma_i\\
& logit(\mu_i) = \alpha1_{[season~i, ~SL~rainfall]} + \beta1_{[season~i, ~SL~rainfall]}\times rainfall_{Wi} + \\
&~~~~~~~~~~~~~~~~ \beta2_{[season~i, ~SL~rainfall]} \times ~ swarm~area_{impute~i} + \\ &~~~~~~~~~~~~~~~~ \beta3_{[season~i, ~SL~rainfall]}  ~ arthropod~biomass_{impute~i} +\\
&~~~~~~~~~~~~~~~~ \theta1_{day~i} + \tau1_{[season~i, ~SL~rainfall]} + \psi1_{[site~i, ~month~i]} \\
& Arthropod~biomass_{impute} \sim student~t(\nu = 2, ~\mu1_i, ~\sigma1) \\
& \mu1_i = \alpha3_{[season~i, ~SL~rainfall]} + \beta5_{[season~i, ~SL~rainfall]}\times~rainfall_{Wi} + \\ 
&~~~~~~~~~~~\beta6_{[season~i, ~SL~rainfall]} \times swarm~area_{impute~i} + \\
&~~~~~~~~~~~ \theta2_{day~i} + \tau2_{[season~i, ~SL~rainfall]} + \psi2_{[site~i, ~month~i]} \\
& swarm~area_{impute} \sim student~t(\nu = 2,~\mu2, ~\sigma2) \\
& \mu2_i = \alpha4_{[season~i, ~SL~rainfall]} + \beta7_{[season~i, ~SL~rainfall]} \times rainfall_{Wi} + \theta3_{day~i} + \\
&~~~~~~~~~~~\tau3_{[season~i, ~SL~rainfall]} + \psi3_{[site~i, ~month~i]} \\
& rainfall_{Wi} \sim normal(\mu_i,~ \sigma) \\
& \mu_i = \alpha2 + \beta4\times rainfall_{Wi+n} \\
\end{aligned}
$$
In the second part, we imputed `NA` observations in *swarm area* and *arthropod biomass*
  
  
$$
\begin{aligned}
& swarm~area_{impute} \sim normal(\nu_{imputed1}, \sigma_{imputed1}) \\
& Arthropod~biomass_{impute} \sim normal(\nu_{imputed2}, \sigma_{imputed2}) \\
& \nu_{imputed1}, \nu_{imputed2} \sim normal(3.5, 1) \\
& \sigma_{imputed1}, \sigma_{imputed2} \sim exponential(1)\\
\end{aligned}
$$
  
Then, we use the Gaussian process to conduct partial pooling across correlated days. To do so, we used as prior a multivariate normal distribution and a quadratic kernel ($K  = \eta^2 exp(-\rho^2D_{ij}^2) + \delta_{ij} \times 0.01 \\$) to construct the covariance matrix based on the distance among sampled days.


$$
\begin{aligned}
& \left(\begin{array}{cc}
\theta1_{day~1} \\
\theta1_{day~2} \\
... \\
\theta1_{day~n} \\
\end{array}\right), \left(\begin{array}{cc}
\theta2_{day~1} \\
\theta2_{day~2} \\
... \\
\theta2_{day~n} \\
\end{array}\right), \left(\begin{array}{cc}
\theta3_{day~1} \\
\theta3_{day~2} \\
... \\
\theta3_{day~n} \\
\end{array}\right) \sim MVNormal \left(\begin{array}{cc}
\begin{bmatrix}
0 \\
0 \\
... \\
0 \\
\end{bmatrix}
K \\
\end{array}\right) \\
& K  = \eta^2 exp(-\rho^2D_{ij}^2) + \delta_{ij} \times 0.01 \\
& \eta \sim exponential(3) \\
& \rho \sim exponential(0.5) \\
& \delta  \sim exponential(2) \\
\end{aligned}
$$
  
Finally, we assign skeptical priors of strong effects and encompassing values within the plausible range of the response variables. We used partial polling to estimate the parameters of group-level effects ($\tau$ and $\psi$ parameters) and used a non-centered parameterization to improve computational efficiency.

$$
\begin{aligned}
& \alpha1_{[season~i, ~SL~rainfall]} \sim normal(0.25, 0.5) \\
& \alpha2 \sim normal(0, 1) \\
& \alpha3_{[season~i, ~SL~rainfall]} \sim normal(2.5, 1) \\
& \alpha4_{[season~i, ~SL~rainfall]} \sim normal(3, 1) \\
& \beta1_{[season~i, ~SL~rainfall]}, \beta2_{[season~i, ~SL~rainfall]}, \beta3_{[season~i, ~SL~rainfall]}, \beta4 \sim normal(0, 0.5)\\
& \beta5_{[season~i, ~SL~rainfall]},\beta6_{[season~i, ~SL~rainfall]}, \beta7_{[season~i, ~SL~rainfall]} \sim normal(0, 0.5)\\
& z_{\tau1}, z_{\tau2}, z_{\tau3} \sim normal(0, 0.5) \\
& \mu_{\tau1}, \mu_{\tau2}, \mu_{\tau3} \sim normal(0, 0.5) \\
& \sigma_{\tau1}, \sigma_{\tau2}, \sigma_{\tau3} \sim exponential(1) \\
& z_{\psi1}, z_{\psi2}, z_{\psi3} \sim normal(0, 0.5) \\
& \mu_{\psi1}, \mu_{\psi2}, \mu_{\psi3} \sim normal(0, 0.5) \\
& \sigma_{\psi1}, \sigma_{\psi2}, \sigma_{\psi3} \sim exponential(1) \\
& \tau1_{[season~i, ~SL~rainfall]} = \mu_{\tau1} + z_{\tau1} \times \sigma_{\tau1} \\
& \tau2_{[season~i, ~SL~rainfall]} = \mu_{\tau2} + z_{\tau2} \times \sigma_{\tau2} \\
& \tau3_{[season~i, ~SL~rainfall]} = \mu_{\tau3} + z_{\tau3} \times \sigma_{\tau3} \\
& \psi1_{[site~i, month~i]} = {\mu_\psi1} + z_{\psi1} \times \sigma_{\psi1} \\
& \psi2_{[site~i, month~i]} = {\mu_\psi2} + z_{\psi2} \times \sigma_{\psi2} \\
& \psi3_{[site~i, month~i]} = {\mu_\psi3} + z_{\psi3} \times \sigma_{\psi3} \\
\end{aligned}
$$
  
\newpage

Putting it all together, we have:
  
$$
{\tiny
\begin{aligned}
& Clustering_i \sim beta(P1_i, ~P2_i) \\
& P1_i = \mu_i \times \sigma_i \\
& P2_i = (1 - \mu_i) \times \sigma_i\\
& logit(\mu_i) = \alpha1_{[season~i, ~total~rainfall]} + \beta1_{[season~i, ~total~rainfall]}\times rainfall_{Wi} + \\
&~~~~~~~~~~~~~~~~ \beta2_{[season~i, ~total~rainfall]} \times ~ swarm~area_{impute~i} + \\ &~~~~~~~~~~~~~~~~ \beta3_{[season~i, ~total~rainfall]}  ~ arthropod~biomass_{impute~i} +\\
&~~~~~~~~~~~~~~~~ \theta1_{day~i} + \tau1_{[[season~i, ~total~rainfall]]} + \psi1_{[site~i, ~month~i]} \\
& Arthropod~biomass_{impute} \sim student~t(\nu = 2, ~\mu1_i, ~\sigma1) \\
& \mu1_i = \alpha3_{[season~i, ~total~rainfall]} + \beta5_{[season~i, ~total~rainfall]}\times~rainfall_{Wi} + \\ 
&~~~~~~~~~~~\beta6_{[season~i, ~total~rainfall]} \times swarm~area_{impute~i} + \\
&~~~~~~~~~~~ \theta2_{day~i} + \tau2_{[season~i, ~total~rainfall]} + \psi2_{[site~i, ~month~i]} \\
& swarm~area_{impute} \sim student~t(\nu = 2,~\mu2, ~\sigma2) \\
& \mu2_i = \alpha4_{[season~i, ~total~rainfall]} + \beta7_{[season~i, ~total~rainfall]} \times rainfall_{Wi} + \theta3_{day~i} + \\
&~~~~~~~~~~~\tau3_{[season~i, ~total~rainfall]} + \psi3_{[site~i, ~month~i]} \\
& rainfall_{Wi} \sim normal(\mu_i,~ \sigma) \\
& \mu_i = \alpha2 + \beta4\times rainfall_{Wi+n} \\
& swarm~area_{impute} \sim normal(\nu_{imputed1}, \sigma_{imputed1}) \\
& Arthropod~biomass_{impute} \sim normal(\nu_{imputed2}, \sigma_{imputed2}) \\
& \nu_{imputed1}, \nu_{imputed2} \sim normal(3.5, 1) \\
& \sigma_{imputed1}, \sigma_{imputed2} \sim exponential(1)\\
& \left(\begin{array}{cc}
\theta1_{day~1} \\
\theta1_{day~2} \\
... \\
\theta1_{day~n} \\
\end{array}\right), \left(\begin{array}{cc}
\theta2_{day~1} \\
\theta2_{day~2} \\
... \\
\theta2_{day~n} \\
\end{array}\right), \left(\begin{array}{cc}
\theta3_{day~1} \\
\theta3_{day~2} \\
... \\
\theta3_{day~n} \\
\end{array}\right) \sim MVNormal \left(\begin{array}{cc}
                                                                                            \begin{bmatrix}
0 \\
0 \\
... \\
0 \\
\end{bmatrix}
K \\
\end{array}\right) \\
& K  = \eta^2 exp(-\rho^2D_{ij}^2) + \delta_{ij} \times 0.01 \\
& \eta \sim exponential(3) \\
& \rho \sim exponential(0.5) \\
& \delta  \sim exponential(2) \\
& \alpha1_{[season~i, ~SL~rainfall]} \sim normal(0.25, 0.5) \\
& \alpha2 \sim normal(0, 1) \\
& \alpha3_{[season~i, ~SL~rainfall]} \sim normal(2.5, 1) \\
& \alpha4_{[season~i, ~SL~rainfall]} \sim normal(3, 1) \\
& \beta1_{[season~i, ~SL~rainfall]}, \beta2_{[season~i, ~SL~rainfall]}, \beta3_{[season~i, ~SL~rainfall]}, \beta4 \sim normal(0, 0.5)\\
& \beta5_{[season~i, ~SL~rainfall]},\beta6_{[season~i, ~SL~rainfall]}, \beta7_{[season~i, ~SL~rainfall]} \sim normal(0, 0.5)\\
& z_{\tau1}, z_{\tau2}, z_{\tau3} \sim normal(0, 0.5) \\
& \mu_{\tau1}, \mu_{\tau2}, \mu_{\tau3} \sim normal(0, 0.5) \\
& \sigma_{\tau1}, \sigma_{\tau2}, \sigma_{\tau3} \sim exponential(1) \\
& z_{\psi1}, z_{\psi2}, z_{\psi3} \sim normal(0, 0.5) \\
& \mu_{\psi1}, \mu_{\psi2}, \mu_{\psi3} \sim normal(0, 0.5) \\
& \sigma_{\psi1}, \sigma_{\psi2}, \sigma_{\psi3} \sim exponential(1) \\
& \tau1_{[season~i, ~SL~rainfall]} = \mu_{\tau1} + z_{\tau1} \times \sigma_{\tau1} \\
& \tau2_{[season~i, ~SL~rainfall]} = \mu_{\tau2} + z_{\tau2} \times \sigma_{\tau2} \\
& \tau3_{[season~i, ~SL~rainfall]} = \mu_{\tau3} + z_{\tau3} \times \sigma_{\tau3} \\
& \psi1_{[site~i, month~i]} = {\mu_\psi1} + z_{\psi1} \times \sigma_{\psi1} \\
& \psi2_{[site~i, month~i]} = {\mu_\psi2} + z_{\psi2} \times \sigma_{\psi2} \\
& \psi3_{[site~i, month~i]} = {\mu_\psi3} + z_{\psi3} \times \sigma_{\psi3} \\
\end{aligned}}
$$
  
### Window 1 model
  
#### Stan code

```{r}
network_metrics_obs2$clustering <- 
  sapply(network_metrics_obs2$clustering, FUN = 
           function(x) {
             if(x >= 1) 0.999
             else x
           })
```


```{r, eval=FALSE}

cat(file = 'w1_clustering.stan', 
    "
    
    functions {
    
      vector scale(vector x) {
        int N = dims(x)[1];
        real mu = mean(x);
        real sigma = sd(x);
        vector[N] scaled_v;
    
        for (i in 1:N) {
          scaled_v[i] = (x[i] - mu) / sigma;
        }
        return scaled_v;
      }  
    
      vector merge_missing(int[] miss_indxex, vector x_obs, vector x_miss) {
                int N = dims(x_obs)[1];
                int N_miss = dims(x_miss)[1];
                vector[N] merge;
                merge = x_obs;
                for (i in 1:N_miss) {
                    merge[miss_indxex[i]] = x_miss[i];
                }
            return merge;
          }
    
    
      matrix cov_GPL2(matrix x,
                      real eta,
                      real rho,
                      real delta) {
                      
                      int N = dims(x)[1];
                      matrix[N, N] K;
    
                      for (i in 1:(N-1)) {
                        K[i, i] = eta + delta;
                        for (j in (i + 1):N) {
                          K[i, j] = eta * exp(-rho * square(x[i, j]));
                          K[j, i] = K[i, j];
                        }
                      }
                      K[N, N] = eta + delta;
                      return K;
                      }
    }
    
    data {
      int N;
      int N_day;
      int N_month;
      int N_season;
      int N_site;
      int N_dim_day;
      int N_naSwarmBio;
      int N_naSwarmINI;
      int N_naSwarmFIN;
      array[N_naSwarmBio] int SwarmB_missindx;
      array[N_naSwarmINI] int SwarmINI_missindx;
      array[N_naSwarmFIN] int SwarmFIN_missindx;
      vector<lower=0,upper=1>[N] clustering;
      array[N] int day;
      array[N] int month;
      array[N] int season;
      array[N] int site;
      vector[N] swarm_biomass;
      vector[N] swarm_area_inital;
      vector[N] swarm_area_final;
      array[N] int cum_rainfall_W1;
      array[N] int cum_rainfall_W5;
      matrix[N_dim_day, N_dim_day] dist_day;
    }
    
    parameters {
      /////////////
      ///////////// imputed variables
      vector[N_naSwarmBio] SBiomass_impute;
      real mu_sb;
      real<lower = 0> sigma_sb;
      vector[N_naSwarmINI] SwarmINI_impute;
      real mu_sbINI;
      real<lower = 0> sigma_sbINI;
      vector[N_naSwarmFIN] SwarmFIN_impute;
      real mu_sbFIN;
      real<lower = 0> sigma_sbFIN;
    
      //////////////
      ///////////// rain_i+n -> rain_i
      real a_e1;
      real beta_rainW2_e1;
      real<lower = 0> sigma_e1;
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm
      matrix[N_site, N_season] a_e2;
      matrix[N_site, N_season] beta_rainW1_e2;
      real<lower = 0> sigma_e2;
    
      vector[N_day] z_theta_e2;
      real<lower = 0> eta_theta_e2;
      real<lower = 0> rho_theta_e2;
    
      matrix[N_season, N_month] z_tau_e2;
      real mu_tau_e2;
      real<lower = 0> sigma_tau_e2;
    
      matrix[N_site, N_month] z_psi_e2;
      real mu_psi_e2;
      real<lower = 0> sigma_psi_e2;
      
      ////////////////////
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      matrix[N_site, N_season] a_e3;
      matrix[N_site, N_season] beta_rainW1_e3;
      matrix[N_site, N_season] beta_sawrA_e3;
      real<lower = 0> sigma_e3;
    
      vector[N_day] z_theta_e3;
      real<lower = 0> eta_theta_e3;
      real<lower = 0> rho_theta_e3;
    
      matrix[N_season, N_month] z_tau_e3;
      real mu_tau_e3;
      real<lower = 0> sigma_tau_e3;
    
      matrix[N_site, N_month] z_psi_e3;
      real mu_psi_e3;
      real<lower = 0> sigma_psi_e3;
      
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      matrix[N_site, N_season] a_e4;
      matrix[N_site, N_season] beta_rainW1_e4;
      matrix[N_site, N_season] beta_sawrA_e4;
      matrix[N_site, N_season] beta_swarmB_e4;
      real<lower = 0> sigma_e4;
    
      vector[N_day] z_theta_e4;
      real<lower = 0> eta_theta_e4;
      real<lower = 0> rho_theta_e4;
    
      matrix[N_season, N_month] z_tau_e4;
      real mu_tau_e4;
      real<lower = 0> sigma_tau_e4;
    
      matrix[N_site, N_month] z_psi_e4;
      real mu_psi_e4;
      real<lower = 0> sigma_psi_e4;
      
      ////////////////////
    
      
    }
    
    transformed parameters{
      
      ///////////////////////
      ///////////////////////// imputed variables
      vector[N] swarm_area;
      vector[N] SBiomass_merge;
      SBiomass_merge = merge_missing(SwarmB_missindx, 
                                     to_vector(swarm_biomass), 
                                     SBiomass_impute);
      vector[N] swarmINI_merge;
      swarmINI_merge = merge_missing(SwarmINI_missindx, 
                                     to_vector(swarm_area_inital), 
                                     SwarmINI_impute);
      vector[N] swarmFIN_merge;
      swarmFIN_merge = merge_missing(SwarmFIN_missindx, 
                                     to_vector(swarm_area_final), 
                                     SwarmFIN_impute);
      swarm_area = (swarmINI_merge + swarmFIN_merge) / 2;
      // swarm_area = scale(swarm_area);
      // SBiomass_merge = scale(SBiomass_merge);
    
      ///////////////////
      ///////////////////////// rain_i -> swarm
      
      vector[N_day] theta_e2;
      matrix[N_dim_day, N_dim_day] sigma_theta_e2;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e2;
      sigma_theta_e2 = cov_GPL2(dist_day, eta_theta_e2, rho_theta_e2, 0.01);
      L_sigma_theta_e2 = cholesky_decompose(sigma_theta_e2);
      theta_e2 = L_sigma_theta_e2 * z_theta_e2;
    
      matrix[N_season, N_month] tau_e2;
      matrix[N_site, N_month] psi_e2;
      tau_e2 = mu_tau_e2 + z_tau_e2 * sigma_tau_e2;
      psi_e2 = mu_psi_e2 + z_psi_e2 * sigma_psi_e2;
      
      ///////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      
      vector[N_day] theta_e3;
      matrix[N_dim_day, N_dim_day] sigma_theta_e3;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e3;
      sigma_theta_e3 = cov_GPL2(dist_day, eta_theta_e3, rho_theta_e3, 0.01);
      L_sigma_theta_e3 = cholesky_decompose(sigma_theta_e3);
      theta_e3 = L_sigma_theta_e3 * z_theta_e3;
    
      matrix[N_season, N_month] tau_e3;
      matrix[N_site, N_month] psi_e3;
      tau_e3 = mu_tau_e3 + z_tau_e3 * sigma_tau_e3;
      psi_e3 = mu_psi_e3 + z_psi_e3 * sigma_psi_e3;
    
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      
      vector[N_day] theta_e4;
      matrix[N_dim_day, N_dim_day] sigma_theta_e4;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e4;
      sigma_theta_e4 = cov_GPL2(dist_day, eta_theta_e4, rho_theta_e4, 0.01);
      L_sigma_theta_e4 = cholesky_decompose(sigma_theta_e4);
      theta_e4 = L_sigma_theta_e4 * z_theta_e4;
    
      matrix[N_season, N_month] tau_e4;
      matrix[N_site, N_month] psi_e4;
      tau_e4 = mu_tau_e4 + z_tau_e4 * sigma_tau_e4;
      psi_e4 = mu_psi_e4 + z_psi_e4 * sigma_psi_e4;
    
      ///////////////////
    }
    
    model {
      vector[N] mu;
      vector[N] p1;
      vector[N] p2;
      ///////////////////////
      /////////////////////// imputed variables
      mu_sb ~ normal(3.5, 1);
      sigma_sb ~ exponential(1);
      SBiomass_merge ~ normal(mu_sb, sigma_sb);
      mu_sbINI ~ normal(3.5, 1);
      sigma_sbINI ~ exponential(1);
      swarmINI_merge ~ normal(mu_sbINI, sigma_sbINI);
      mu_sbFIN ~ normal(3.5, 1);
      sigma_sbFIN ~ exponential(1);
      swarmFIN_merge ~ normal(mu_sbFIN, sigma_sbFIN);
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      vector[N] mu_e1;
      a_e1 ~ normal(0, 1);
      beta_rainW2_e1 ~ normal(0, 0.5);
      sigma_e1 ~ exponential(1);
      
      ///////////////////
      /////////////////// rain_i -> swarm
      to_vector(a_e2) ~ normal(3, 1);
      sigma_e2 ~ exponential(1);
      to_vector(beta_rainW1_e2) ~ normal(0, 0.25);
    
      z_theta_e2 ~ normal(0, 0.5);     
      eta_theta_e2 ~ exponential(3);   
      rho_theta_e2 ~ exponential(0.5); 
      
      to_vector(z_tau_e2) ~ normal(0, 0.5);
      mu_tau_e2 ~ normal(0, 0.5);
      sigma_tau_e2 ~ exponential(1);
    
      to_vector(z_psi_e2) ~ normal(0, 0.5);
      mu_psi_e2 ~ normal(0, 0.5);
      sigma_psi_e2 ~ exponential(1);
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      to_vector(a_e3) ~ normal(2.5, 1);
      sigma_e3 ~ exponential(1);
      to_vector(beta_rainW1_e3) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e3) ~ normal(0, 3);
    
      z_theta_e3 ~ normal(0, 1);
      eta_theta_e3 ~ exponential(3);
      rho_theta_e3 ~ exponential(0.5);
      
      to_vector(z_tau_e3) ~ normal(0, 0.5);
      mu_tau_e3 ~ normal(0, 0.5);
      sigma_tau_e3 ~ exponential(1);
    
      to_vector(z_psi_e3) ~ normal(0, 0.5);
      mu_psi_e3 ~ normal(0, 0.5);
      sigma_psi_e3 ~ exponential(1);
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      to_vector(a_e4) ~ normal(0.25, 0.5);
      sigma_e4 ~ exponential(1);
      to_vector(beta_rainW1_e4) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e4) ~ normal(0, 0.5);
      to_vector(beta_swarmB_e4) ~ normal(0, 0.5);
    
      z_theta_e4 ~ normal(0, 0.5);
      eta_theta_e4 ~ exponential(3);
      rho_theta_e4 ~ exponential(0.5);
      
      to_vector(z_tau_e4) ~ normal(0, 0.5);
      mu_tau_e4 ~ normal(0, 0.5);
      sigma_tau_e4 ~ exponential(1);
    
      to_vector(z_psi_e4) ~ normal(0, 0.5);
      mu_psi_e4 ~ normal(0, 0.5);
      sigma_psi_e4 ~ exponential(1);
      
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      for (i in 1:N) {
        cum_rainfall_W1[i] ~ normal(a_e1 + beta_rainW2_e1 * cum_rainfall_W5[i], 
                                    sigma_e1);
      }
    
      ///////////////////
      /////////////////// rain_i -> swarm
      for (i in 1:N) {
        swarm_area[i] ~ student_t(2,
                                  a_e2[site[i], season[i]] + 
                                  beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W1[i] +
                                  theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                                  psi_e2[site[i], month[i]], 
                                  sigma_e2);
      }
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      for (i in 1:N) {
        SBiomass_merge[i] ~ student_t(2,
                                     a_e3[site[i], season[i]] + 
                                     beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W1[i] +
                                     beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                                     theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                                     psi_e3[site[i], month[i]], 
                                     sigma_e3);
      }
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      for (i in 1:N) {
         mu[i] = inv_logit(a_e4[site[i], season[i]] + 
                           beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W1[i] +
                           beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                           beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                           theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                           psi_e4[site[i], month[i]]);
      }
    
      p1 = mu * sigma_e4;
      p2 = (1 - mu) * sigma_e4;
    
      clustering ~ beta(p1, p2);
    
    }
    
    generated quantities {
      vector[N] mu_e1;
      vector[N] mu_e2;
      vector[N] mu_e3;
      vector[N] mu_e4;
      vector[N] p1;
      vector[N] p2;
      array[N] real ppcheck_e1;
      array[N] real ppcheck_e2;
      array[N] real ppcheck_e3;
      array[N] real ppcheck_e4;
      
      for (i in 1:N) {
        mu_e1[i] = a_e1 + beta_rainW2_e1 * cum_rainfall_W5[i]; 
      }
    
      ppcheck_e1 = normal_rng(mu_e1, sigma_e1);
    
      for (i in 1:N) {
        mu_e2[i] = a_e2[site[i], season[i]] + 
                  beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W1[i] +
                  theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                  psi_e2[site[i], month[i]];
      }
      
      ppcheck_e2 = student_t_rng(2, mu_e2, sigma_e2);
    
    
      for (i in 1:N) {
        mu_e3[i] = a_e3[site[i], season[i]] + 
                   beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W1[i] +
                   beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                   theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                   psi_e3[site[i], month[i]];
      }
      
      ppcheck_e3 = student_t_rng(2, mu_e3, sigma_e3);
    
      for (i in 1:N) {
         mu_e4[i] = inv_logit(a_e4[site[i], season[i]] + 
                           beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W1[i] +
                           beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                           beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                           theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                           psi_e4[site[i], month[i]]);
      }
    
      p1 = mu_e4 * sigma_e4;
      p2 = (1 - mu_e4) * sigma_e4;
    
      ppcheck_e4 = beta_rng(p1, p2);
    
    }
    
    ")
    
```

#### Running MCMC algorith

```{r, eval=FALSE}
file <- paste(getwd(), '/w1_clustering.stan', sep ='')

fit_clusteringW1 <- cmdstan_model(file, compile = T)

mod_clusteringW1_obs <- 
  fit_clusteringW1$sample(
    data = network_metrics_obs2[-3], 
    chains = 3, 
    parallel_chains = 3, 
    iter_sampling = 8e3, 
    iter_warmup = 500, 
    thin = 10, 
    seed = 123
  )
```


```{r, echo=FALSE}
mod_clusteringW1_obs <- readRDS('causal_mod_clusteringW1.rds')
```

#### Model diagnostic

```{r, fig.height=15, fig.cap="Rhat values and ess of group-level parameters from the generative model explaining the effect of cumulative rainfall during W1, on network clustering of ant followers birds."}


par(mfrow = c(5, 2), mar = c(4, 4, 1.5, 1))
mod_diagnostics(mod_clusteringW1_obs, 
                mod_clusteringW1_obs$summary('psi_e2')) 

mod_diagnostics(mod_clusteringW1_obs, 
                mod_clusteringW1_obs$summary('psi_e3'))

mod_diagnostics(mod_clusteringW1_obs, 
                mod_clusteringW1_obs$summary('psi_e4'))

mod_diagnostics(mod_clusteringW1_obs, 
                mod_clusteringW1_obs$summary('tau_e4'))

mod_diagnostics(mod_clusteringW1_obs, 
                mod_clusteringW1_obs$summary('tau_e2'))

mod_diagnostics(mod_clusteringW1_obs, 
                mod_clusteringW1_obs$summary('tau_e3'))

mod_diagnostics(mod_clusteringW1_obs, 
                mod_clusteringW1_obs$summary('theta_e4'))
mod_diagnostics(mod_clusteringW1_obs, 
                mod_clusteringW1_obs$summary('theta_e3'))

mod_diagnostics(mod_clusteringW1_obs, 
                mod_clusteringW1_obs$summary('theta_e2'))
par(mfrow = c(1, 1))
```


```{r, fig.cap="Rhat values and ess of slope, intercept, and dispersion parameters  from the generative model explaining the effect of cumulative rainfall during W1, on network clustering of ant followers birds."}
summary_clusteringW1 <- mod_clusteringW1_obs$summary(c('beta_rainW2_e1', 
                                                       'beta_rainW1_e2',
                                                       'beta_rainW1_e3',
                                                       'beta_rainW1_e4',
                                                       'beta_sawrA_e3',
                                                       'beta_sawrA_e4',
                                                       'beta_swarmB_e4', 
                                                       'a_e1', 'a_e2', 
                                                       'a_e3', 'a_e4',
                                                       'sigma_e1', 'sigma_e2', 
                                                       'sigma_e3', 'sigma_e4', 
                                                       'swarm_area',
                                                       'SBiomass_merge',
                                                       'lp__'))


mod_diagnostics(mod_clusteringW1_obs, summary_clusteringW1)

```

```{r, fig.cap= "Posterior predictive checks of cumulative rainfall W1"}
post_clusteringW1_obs <- mod_clusteringW1_obs$draws(c('beta_rainW2_e1', 
                                                      'beta_rainW1_e2',
                                                      'beta_rainW1_e3',
                                                      'beta_rainW1_e4',
                                                      'beta_sawrA_e3',
                                                      'beta_sawrA_e4',
                                                      'beta_swarmB_e4', 
                                                      'a_e1', 'a_e2', 'a_e3', 'a_e4',
                                                      'sigma_e1', 'sigma_e2', 
                                                      'sigma_e3', 'sigma_e4',
                                                      'swarm_area',
                                                      'SBiomass_merge'
), 
format = 'df')

ppcheck_swarmA <- mod_clusteringW1_obs$draws('ppcheck_e2', format = 'matrix')
ppcheck_swarmB <- mod_clusteringW1_obs$draws('ppcheck_e3', format = 'matrix')
ppcheck_clustering <- mod_clusteringW1_obs$draws('ppcheck_e4', format = 'matrix')
ppcheck_R1 <- mod_clusteringW1_obs$draws('ppcheck_e1', format = 'matrix')

swarm_area <- apply(post_clusteringW1_obs[, grep('swarm_area', colnames(post_clusteringW1_obs))], 
                    2, mean)

swarm_BM <- 
  apply(post_clusteringW1_obs[, grep('SBiomass_merge', colnames(post_clusteringW1_obs))], 
        2, mean)

par(mfrow = c(2, 2), mar = c(4, 4, 1, 1))
plot(density(network_metrics_obs2[-3]$cum_rainfall_W1), 
     main = '', xlab = 'Cum rainfall W1')
for(i in 1:100) lines(density(ppcheck_R1[i, ]), lwd = 0.1)
lines(density(network_metrics_obs2[-3]$cum_rainfall_W1), col = 'red')

plot(density(swarm_area), main = '', xlab = 'Swarm area')
for(i in 1:100) lines(density(ppcheck_swarmA[i, ]), lwd = 0.1)
lines(density(swarm_area), main = '', xlab = 'Swarm area', col = 'red')

plot(density(swarm_BM), main = '', xlab = 'Arthropod biomass')
for(i in 1:100) lines(density(ppcheck_swarmB[i, ]), lwd = 0.1)
lines(density(swarm_BM), col = 'red')

plot(density(network_metrics_obs2[-3]$clustering), 
     main = '', xlab = 'Net size')
for(i in 1:100) lines(density(ppcheck_clustering[i, ]), lwd = 0.1)
lines(density(network_metrics_obs2[-3]$clustering), col = 'red')

post_beta_net_sizeW1 <- gather(post_net_sizeW1_obs[, grep('beta', colnames(post_net_sizeW1_obs))])

post_beta_clusteringW1 <- gather(post_clusteringW1_obs[, grep('beta', colnames(post_clusteringW1_obs))])

post_beta_clusteringW1$key <- as.factor(post_beta_clusteringW1$key)


```

### Window 5 model

#### Stan code

```{r, eval=FALSE}
cat(file = 'w5_clustering.stan', 
    "
    
    functions {
    
      vector scale(vector x) {
        int N = dims(x)[1];
        real mu = mean(x);
        real sigma = sd(x);
        vector[N] scaled_v;
    
        for (i in 1:N) {
          scaled_v[i] = (x[i] - mu) / sigma;
        }
        return scaled_v;
      }  
    
      vector merge_missing(int[] miss_indxex, vector x_obs, vector x_miss) {
                int N = dims(x_obs)[1];
                int N_miss = dims(x_miss)[1];
                vector[N] merge;
                merge = x_obs;
                for (i in 1:N_miss) {
                    merge[miss_indxex[i]] = x_miss[i];
                }
            return merge;
          }
    
    
      matrix cov_GPL2(matrix x,
                      real eta,
                      real rho,
                      real delta) {
                      
                      int N = dims(x)[1];
                      matrix[N, N] K;
    
                      for (i in 1:(N-1)) {
                        K[i, i] = eta + delta;
                        for (j in (i + 1):N) {
                          K[i, j] = eta * exp(-rho * square(x[i, j]));
                          K[j, i] = K[i, j];
                        }
                      }
                      K[N, N] = eta + delta;
                      return K;
                      }
    }
    
    data {
      int N;
      int N_day;
      int N_month;
      int N_season;
      int N_site;
      int N_dim_day;
      int N_naSwarmBio;
      int N_naSwarmINI;
      int N_naSwarmFIN;
      array[N_naSwarmBio] int SwarmB_missindx;
      array[N_naSwarmINI] int SwarmINI_missindx;
      array[N_naSwarmFIN] int SwarmFIN_missindx;
      vector<lower=0,upper=1>[N] clustering;
      array[N] int day;
      array[N] int month;
      array[N] int season;
      array[N] int site;
      vector[N] swarm_biomass;
      vector[N] swarm_area_inital;
      vector[N] swarm_area_final;
      array[N] int cum_rainfall_W10;
      array[N] int cum_rainfall_W5;
      matrix[N_dim_day, N_dim_day] dist_day;
    }
    
    parameters {
      /////////////
      ///////////// imputed variables
      vector[N_naSwarmBio] SBiomass_impute;
      real mu_sb;
      real<lower = 0> sigma_sb;
      vector[N_naSwarmINI] SwarmINI_impute;
      real mu_sbINI;
      real<lower = 0> sigma_sbINI;
      vector[N_naSwarmFIN] SwarmFIN_impute;
      real mu_sbFIN;
      real<lower = 0> sigma_sbFIN;
    
      //////////////
      ///////////// rain_i+n -> rain_i
      real a_e1;
      real beta_rainW2_e1;
      real<lower = 0> sigma_e1;
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm
      matrix[N_site, N_season] a_e2;
      matrix[N_site, N_season] beta_rainW1_e2;
      real<lower = 0> sigma_e2;
    
      vector[N_day] z_theta_e2;
      real<lower = 0> eta_theta_e2;
      real<lower = 0> rho_theta_e2;
    
      matrix[N_season, N_month] z_tau_e2;
      real mu_tau_e2;
      real<lower = 0> sigma_tau_e2;
    
      matrix[N_site, N_month] z_psi_e2;
      real mu_psi_e2;
      real<lower = 0> sigma_psi_e2;
      
      ////////////////////
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      matrix[N_site, N_season] a_e3;
      matrix[N_site, N_season] beta_rainW1_e3;
      matrix[N_site, N_season] beta_sawrA_e3;
      real<lower = 0> sigma_e3;
    
      vector[N_day] z_theta_e3;
      real<lower = 0> eta_theta_e3;
      real<lower = 0> rho_theta_e3;
    
      matrix[N_season, N_month] z_tau_e3;
      real mu_tau_e3;
      real<lower = 0> sigma_tau_e3;
    
      matrix[N_site, N_month] z_psi_e3;
      real mu_psi_e3;
      real<lower = 0> sigma_psi_e3;
      
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      matrix[N_site, N_season] a_e4;
      matrix[N_site, N_season] beta_rainW1_e4;
      matrix[N_site, N_season] beta_sawrA_e4;
      matrix[N_site, N_season] beta_swarmB_e4;
      real<lower = 0> sigma_e4;
    
      vector[N_day] z_theta_e4;
      real<lower = 0> eta_theta_e4;
      real<lower = 0> rho_theta_e4;
    
      matrix[N_season, N_month] z_tau_e4;
      real mu_tau_e4;
      real<lower = 0> sigma_tau_e4;
    
      matrix[N_site, N_month] z_psi_e4;
      real mu_psi_e4;
      real<lower = 0> sigma_psi_e4;
      
      ////////////////////
    
      
    }
    
    transformed parameters{
      
      ///////////////////////
      ///////////////////////// imputed variables
      vector[N] swarm_area;
      vector[N] SBiomass_merge;
      SBiomass_merge = merge_missing(SwarmB_missindx, 
                                     to_vector(swarm_biomass), 
                                     SBiomass_impute);
      vector[N] swarmINI_merge;
      swarmINI_merge = merge_missing(SwarmINI_missindx, 
                                     to_vector(swarm_area_inital), 
                                     SwarmINI_impute);
      vector[N] swarmFIN_merge;
      swarmFIN_merge = merge_missing(SwarmFIN_missindx, 
                                     to_vector(swarm_area_final), 
                                     SwarmFIN_impute);
      swarm_area = (swarmINI_merge + swarmFIN_merge) / 2;
      // swarm_area = scale(swarm_area);
      // SBiomass_merge = scale(SBiomass_merge);
    
      ///////////////////
      ///////////////////////// rain_i -> swarm
      
      vector[N_day] theta_e2;
      matrix[N_dim_day, N_dim_day] sigma_theta_e2;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e2;
      sigma_theta_e2 = cov_GPL2(dist_day, eta_theta_e2, rho_theta_e2, 0.01);
      L_sigma_theta_e2 = cholesky_decompose(sigma_theta_e2);
      theta_e2 = L_sigma_theta_e2 * z_theta_e2;
    
      matrix[N_season, N_month] tau_e2;
      matrix[N_site, N_month] psi_e2;
      tau_e2 = mu_tau_e2 + z_tau_e2 * sigma_tau_e2;
      psi_e2 = mu_psi_e2 + z_psi_e2 * sigma_psi_e2;
      
      ///////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      
      vector[N_day] theta_e3;
      matrix[N_dim_day, N_dim_day] sigma_theta_e3;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e3;
      sigma_theta_e3 = cov_GPL2(dist_day, eta_theta_e3, rho_theta_e3, 0.01);
      L_sigma_theta_e3 = cholesky_decompose(sigma_theta_e3);
      theta_e3 = L_sigma_theta_e3 * z_theta_e3;
    
      matrix[N_season, N_month] tau_e3;
      matrix[N_site, N_month] psi_e3;
      tau_e3 = mu_tau_e3 + z_tau_e3 * sigma_tau_e3;
      psi_e3 = mu_psi_e3 + z_psi_e3 * sigma_psi_e3;
    
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      
      vector[N_day] theta_e4;
      matrix[N_dim_day, N_dim_day] sigma_theta_e4;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e4;
      sigma_theta_e4 = cov_GPL2(dist_day, eta_theta_e4, rho_theta_e4, 0.01);
      L_sigma_theta_e4 = cholesky_decompose(sigma_theta_e4);
      theta_e4 = L_sigma_theta_e4 * z_theta_e4;
    
      matrix[N_season, N_month] tau_e4;
      matrix[N_site, N_month] psi_e4;
      tau_e4 = mu_tau_e4 + z_tau_e4 * sigma_tau_e4;
      psi_e4 = mu_psi_e4 + z_psi_e4 * sigma_psi_e4;
    
      ///////////////////
    }
    
    model {
      vector[N] mu;
      vector[N] p1;
      vector[N] p2;
      ///////////////////////
      /////////////////////// imputed variables
      mu_sb ~ normal(3.5, 1);
      sigma_sb ~ exponential(1);
      SBiomass_merge ~ normal(mu_sb, sigma_sb);
      mu_sbINI ~ normal(3.5, 1);
      sigma_sbINI ~ exponential(1);
      swarmINI_merge ~ normal(mu_sbINI, sigma_sbINI);
      mu_sbFIN ~ normal(3.5, 1);
      sigma_sbFIN ~ exponential(1);
      swarmFIN_merge ~ normal(mu_sbFIN, sigma_sbFIN);
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      vector[N] mu_e1;
      a_e1 ~ normal(0, 1);
      beta_rainW2_e1 ~ normal(0, 0.5);
      sigma_e1 ~ exponential(1);
      
      ///////////////////
      /////////////////// rain_i -> swarm
      to_vector(a_e2) ~ normal(3, 1);
      sigma_e2 ~ exponential(1);
      to_vector(beta_rainW1_e2) ~ normal(0, 0.25);
    
      z_theta_e2 ~ normal(0, 0.5);     
      eta_theta_e2 ~ exponential(3);   
      rho_theta_e2 ~ exponential(0.5); 
      
      to_vector(z_tau_e2) ~ normal(0, 0.5);
      mu_tau_e2 ~ normal(0, 0.5);
      sigma_tau_e2 ~ exponential(1);
    
      to_vector(z_psi_e2) ~ normal(0, 0.5);
      mu_psi_e2 ~ normal(0, 0.5);
      sigma_psi_e2 ~ exponential(1);
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      to_vector(a_e3) ~ normal(2.5, 1);
      sigma_e3 ~ exponential(1);
      to_vector(beta_rainW1_e3) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e3) ~ normal(0, 3);
    
      z_theta_e3 ~ normal(0, 1);
      eta_theta_e3 ~ exponential(3);
      rho_theta_e3 ~ exponential(0.5);
      
      to_vector(z_tau_e3) ~ normal(0, 0.5);
      mu_tau_e3 ~ normal(0, 0.5);
      sigma_tau_e3 ~ exponential(1);
    
      to_vector(z_psi_e3) ~ normal(0, 0.5);
      mu_psi_e3 ~ normal(0, 0.5);
      sigma_psi_e3 ~ exponential(1);
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      to_vector(a_e4) ~ normal(0.25, 0.5);
      sigma_e4 ~ exponential(1);
      to_vector(beta_rainW1_e4) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e4) ~ normal(0, 0.5);
      to_vector(beta_swarmB_e4) ~ normal(0, 0.5);
    
      z_theta_e4 ~ normal(0, 0.5);
      eta_theta_e4 ~ exponential(3);
      rho_theta_e4 ~ exponential(0.5);
      
      to_vector(z_tau_e4) ~ normal(0, 0.5);
      mu_tau_e4 ~ normal(0, 0.5);
      sigma_tau_e4 ~ exponential(1);
    
      to_vector(z_psi_e4) ~ normal(0, 0.5);
      mu_psi_e4 ~ normal(0, 0.5);
      sigma_psi_e4 ~ exponential(1);
      
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      for (i in 1:N) {
        cum_rainfall_W5[i] ~ normal(a_e1 + beta_rainW2_e1 * cum_rainfall_W10[i], 
                                    sigma_e1);
      }
    
      ///////////////////
      /////////////////// rain_i -> swarm
      for (i in 1:N) {
        swarm_area[i] ~ student_t(2,
                                  a_e2[site[i], season[i]] + 
                                  beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W5[i] +
                                  theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                                  psi_e2[site[i], month[i]], 
                                  sigma_e2);
      }
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      for (i in 1:N) {
        SBiomass_merge[i] ~ student_t(2,
                                     a_e3[site[i], season[i]] + 
                                     beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W5[i] +
                                     beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                                     theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                                     psi_e3[site[i], month[i]], 
                                     sigma_e3);
      }
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      for (i in 1:N) {
         mu[i] = inv_logit(a_e4[site[i], season[i]] + 
                           beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W5[i] +
                           beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                           beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                           theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                           psi_e4[site[i], month[i]]);
      }
    
      p1 = mu * sigma_e4;
      p2 = (1 - mu) * sigma_e4;
    
      clustering ~ beta(p1, p2);
    
    }
    
    generated quantities {
      vector[N] mu_e1;
      vector[N] mu_e2;
      vector[N] mu_e3;
      vector[N] mu_e4;
      vector[N] p1;
      vector[N] p2;
      array[N] real ppcheck_e1;
      array[N] real ppcheck_e2;
      array[N] real ppcheck_e3;
      array[N] real ppcheck_e4;
      
      for (i in 1:N) {
        mu_e1[i] = a_e1 + beta_rainW2_e1 * cum_rainfall_W10[i]; 
      }
    
      ppcheck_e1 = normal_rng(mu_e1, sigma_e1);
    
      for (i in 1:N) {
        mu_e2[i] = a_e2[site[i], season[i]] + 
                  beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W5[i] +
                  theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                  psi_e2[site[i], month[i]];
      }
      
      ppcheck_e2 = student_t_rng(2, mu_e2, sigma_e2);
    
    
      for (i in 1:N) {
        mu_e3[i] = a_e3[site[i], season[i]] + 
                   beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W5[i] +
                   beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                   theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                   psi_e3[site[i], month[i]];
      }
      
      ppcheck_e3 = student_t_rng(2, mu_e3, sigma_e3);
    
      for (i in 1:N) {
         mu_e4[i] = inv_logit(a_e4[site[i], season[i]] + 
                           beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W5[i] +
                           beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                           beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                           theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                           psi_e4[site[i], month[i]]);
      }
    
      p1 = mu_e4 * sigma_e4;
      p2 = (1 - mu_e4) * sigma_e4;
    
      ppcheck_e4 = beta_rng(p1, p2);
    
    }
    
    ")

```

#### Running MCMC algorithm


```{r, eval=FALSE}
file <- paste(getwd(), '/w5_clustering.stan', sep ='')

fit_clusteringW5 <- cmdstan_model(file, compile = T)

mod_clusteringW5_obs <- 
  fit_clusteringW5$sample(
    data = network_metrics_obs2[-3], 
    chains = 3, 
    parallel_chains = 3, 
    iter_sampling = 8e3, 
    iter_warmup = 500, 
    thin = 10, 
    seed = 123
  )

```

```{r, echo=FALSE, eval=TRUE}
mod_clusteringW5_obs <- readRDS('causal_mod_clusteringW5.rds')
```

#### Model diagnostics

```{r, fig.height=15, fig.cap="Rhat values and ess of group-level parameters from the generative model explaining the effect of cumulative rainfall during W5, on network clustering of ant followers birds."}

par(mfrow = c(5, 2), mar = c(4, 4, 1.5, 1))
mod_diagnostics(mod_clusteringW5_obs, 
                mod_clusteringW5_obs$summary(
                  unique(paste('psi_e2[', 
                               network_metrics_obs2[-3]$site,
                               ',',
                               network_metrics_obs2[-3]$month, ']', 
                               sep = '')))) 

mod_diagnostics(mod_clusteringW5_obs, 
                mod_clusteringW5_obs$summary(
                  unique(paste('psi_e3[', 
                               network_metrics_obs2[-3]$site,
                               ',',
                               network_metrics_obs2[-3]$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_clusteringW5_obs, 
                mod_clusteringW5_obs$summary(
                  unique(paste('psi_e4[', 
                               network_metrics_obs2[-3]$site,
                               ',',
                               network_metrics_obs2[-3]$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_clusteringW5_obs, 
                mod_clusteringW5_obs$summary(
                  unique(paste('tau_e4[', 
                               network_metrics_obs2[-3]$year,
                               ',',
                               network_metrics_obs2[-3]$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_clusteringW5_obs, 
                mod_clusteringW5_obs$summary(
                  unique(paste('tau_e2[', 
                               network_metrics_obs2[-3]$year,
                               ',',
                               network_metrics_obs2[-3]$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_clusteringW5_obs, 
                mod_clusteringW5_obs$summary(
                  unique(paste('tau_e3[', 
                               network_metrics_obs2[-3]$year,
                               ',',
                               network_metrics_obs2[-3]$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_clusteringW5_obs, 
                mod_clusteringW5_obs$summary(paste('theta_e4[', 
                                                   1:network_metrics_obs2[-3]$N_day, ']', 
                                                   sep = '')))
mod_diagnostics(mod_clusteringW5_obs, 
                mod_clusteringW5_obs$summary(paste('theta_e3[', 
                                                   1:network_metrics_obs2[-3]$N_day, ']', 
                                                   sep = '')))

mod_diagnostics(mod_clusteringW5_obs, 
                mod_clusteringW5_obs$summary(paste('theta_e2[', 
                                                   1:network_metrics_obs2[-3]$N_day, ']', 
                                                   sep = '')))
par(mfrow = c(1, 1))
```

```{r, fig.cap="Rhat values and ess of slope, intercept, and dispersion parameters  from the generative model explaining the effect of cumulative rainfall during W5, on network clustering of ant followers birds."}
summary_clusteringW5 <- mod_clusteringW5_obs$summary(c('beta_rainW2_e1', 
                                                       'beta_rainW1_e2',
                                                       'beta_rainW1_e3',
                                                       'beta_rainW1_e4',
                                                       'beta_sawrA_e3',
                                                       'beta_sawrA_e4',
                                                       'beta_swarmB_e4', 
                                                       'a_e1', 'a_e2', 
                                                       'a_e3', 'a_e4',
                                                       'sigma_e1', 'sigma_e2', 
                                                       'sigma_e3', 'sigma_e4', 
                                                       'swarm_area',
                                                       'SBiomass_merge',
                                                       'lp__'))

summary_clusteringW5 |> print(n = 15)



mod_diagnostics(mod_clusteringW5_obs, summary_clusteringW5)


```


```{r, fig.cap= "Posterior predictive checks"}
post_clusteringW5_obs <- mod_clusteringW5_obs$draws(c('beta_rainW2_e1', 
                                                      'beta_rainW1_e2',
                                                      'beta_rainW1_e3',
                                                      'beta_rainW1_e4',
                                                      'beta_sawrA_e3',
                                                      'beta_sawrA_e4',
                                                      'beta_swarmB_e4', 
                                                      'a_e1', 'a_e2', 'a_e3', 'a_e4',
                                                      'sigma_e1', 'sigma_e2', 
                                                      'sigma_e3', 'sigma_e4',
                                                      'swarm_area',
                                                      'SBiomass_merge'
), 
format = 'df')

ppcheck_swarmA <- mod_clusteringW5_obs$draws('ppcheck_e2', format = 'matrix')
ppcheck_swarmB <- mod_clusteringW5_obs$draws('ppcheck_e3', format = 'matrix')
ppcheck_clustering <- mod_clusteringW5_obs$draws('ppcheck_e4', format = 'matrix')
ppcheck_R1 <- mod_clusteringW5_obs$draws('ppcheck_e1', format = 'matrix')

swarm_area <- apply(post_clusteringW5_obs[, grep('swarm_area', colnames(post_clusteringW5_obs))], 
                    2, mean)

swarm_BM <- 
  apply(post_clusteringW5_obs[, grep('SBiomass_merge', colnames(post_clusteringW5_obs))], 
        2, mean)

par(mfrow = c(2, 2), mar = c(4, 4, 1, 1))
plot(density(network_metrics_obs2[-3]$cum_rainfall_W5), 
     main = '', xlab = 'Cum rainfall W5')
for(i in 1:100) lines(density(ppcheck_R1[i, ]), lwd = 0.1)
lines(density(network_metrics_obs2[-3]$cum_rainfall_W5), col = 'red')

plot(density(swarm_area), main = '', xlab = 'Swarm area')
for(i in 1:100) lines(density(ppcheck_swarmA[i, ]), lwd = 0.1)
lines(density(swarm_area), main = '', xlab = 'Swarm area', col = 'red')

plot(density(swarm_BM), main = '', xlab = 'Arthropod biomass')
for(i in 1:100) lines(density(ppcheck_swarmB[i, ]), lwd = 0.1)
lines(density(swarm_BM), col = 'red')

plot(density(network_metrics_obs2[-3]$clustering), 
     main = '', xlab = 'Net size')
for(i in 1:100) lines(density(ppcheck_clustering[i, ]), lwd = 0.1)
lines(density(network_metrics_obs2[-3]$clustering), col = 'red')

post_beta_clusteringW5 <- gather(post_clusteringW5_obs[, grep('beta', colnames(post_clusteringW5_obs))])

post_beta_clusteringW5$key <- as.factor(post_beta_clusteringW5$key)

```

### Window 10 model

#### Stan code

```{r, eval=FALSE}
cat(file = 'w10_clustering.stan', 
    "
    
    functions {
    
      vector scale(vector x) {
        int N = dims(x)[1];
        real mu = mean(x);
        real sigma = sd(x);
        vector[N] scaled_v;
    
        for (i in 1:N) {
          scaled_v[i] = (x[i] - mu) / sigma;
        }
        return scaled_v;
      }  
    
      vector merge_missing(int[] miss_indxex, vector x_obs, vector x_miss) {
                int N = dims(x_obs)[1];
                int N_miss = dims(x_miss)[1];
                vector[N] merge;
                merge = x_obs;
                for (i in 1:N_miss) {
                    merge[miss_indxex[i]] = x_miss[i];
                }
            return merge;
          }
    
    
      matrix cov_GPL2(matrix x,
                      real eta,
                      real rho,
                      real delta) {
                      
                      int N = dims(x)[1];
                      matrix[N, N] K;
    
                      for (i in 1:(N-1)) {
                        K[i, i] = eta + delta;
                        for (j in (i + 1):N) {
                          K[i, j] = eta * exp(-rho * square(x[i, j]));
                          K[j, i] = K[i, j];
                        }
                      }
                      K[N, N] = eta + delta;
                      return K;
                      }
    }
    
    data {
      int N;
      int N_day;
      int N_month;
      int N_season;
      int N_site;
      int N_dim_day;
      int N_naSwarmBio;
      int N_naSwarmINI;
      int N_naSwarmFIN;
      array[N_naSwarmBio] int SwarmB_missindx;
      array[N_naSwarmINI] int SwarmINI_missindx;
      array[N_naSwarmFIN] int SwarmFIN_missindx;
      vector<lower=0,upper=1>[N] clustering;
      array[N] int day;
      array[N] int month;
      array[N] int season;
      array[N] int site;
      vector[N] swarm_biomass;
      vector[N] swarm_area_inital;
      vector[N] swarm_area_final;
      array[N] int cum_rainfall_W10;
      array[N] int cum_rainfall_W15;
      matrix[N_dim_day, N_dim_day] dist_day;
    }
    
    parameters {
      /////////////
      ///////////// imputed variables
      vector[N_naSwarmBio] SBiomass_impute;
      real mu_sb;
      real<lower = 0> sigma_sb;
      vector[N_naSwarmINI] SwarmINI_impute;
      real mu_sbINI;
      real<lower = 0> sigma_sbINI;
      vector[N_naSwarmFIN] SwarmFIN_impute;
      real mu_sbFIN;
      real<lower = 0> sigma_sbFIN;
    
      //////////////
      ///////////// rain_i+n -> rain_i
      real a_e1;
      real beta_rainW2_e1;
      real<lower = 0> sigma_e1;
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm
      matrix[N_site, N_season] a_e2;
      matrix[N_site, N_season] beta_rainW1_e2;
      real<lower = 0> sigma_e2;
    
      vector[N_day] z_theta_e2;
      real<lower = 0> eta_theta_e2;
      real<lower = 0> rho_theta_e2;
    
      matrix[N_season, N_month] z_tau_e2;
      real mu_tau_e2;
      real<lower = 0> sigma_tau_e2;
    
      matrix[N_site, N_month] z_psi_e2;
      real mu_psi_e2;
      real<lower = 0> sigma_psi_e2;
      
      ////////////////////
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      matrix[N_site, N_season] a_e3;
      matrix[N_site, N_season] beta_rainW1_e3;
      matrix[N_site, N_season] beta_sawrA_e3;
      real<lower = 0> sigma_e3;
    
      vector[N_day] z_theta_e3;
      real<lower = 0> eta_theta_e3;
      real<lower = 0> rho_theta_e3;
    
      matrix[N_season, N_month] z_tau_e3;
      real mu_tau_e3;
      real<lower = 0> sigma_tau_e3;
    
      matrix[N_site, N_month] z_psi_e3;
      real mu_psi_e3;
      real<lower = 0> sigma_psi_e3;
      
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      matrix[N_site, N_season] a_e4;
      matrix[N_site, N_season] beta_rainW1_e4;
      matrix[N_site, N_season] beta_sawrA_e4;
      matrix[N_site, N_season] beta_swarmB_e4;
      real<lower = 0> sigma_e4;
    
      vector[N_day] z_theta_e4;
      real<lower = 0> eta_theta_e4;
      real<lower = 0> rho_theta_e4;
    
      matrix[N_season, N_month] z_tau_e4;
      real mu_tau_e4;
      real<lower = 0> sigma_tau_e4;
    
      matrix[N_site, N_month] z_psi_e4;
      real mu_psi_e4;
      real<lower = 0> sigma_psi_e4;
      
      ////////////////////
    
      
    }
    
    transformed parameters{
      
      ///////////////////////
      ///////////////////////// imputed variables
      vector[N] swarm_area;
      vector[N] SBiomass_merge;
      SBiomass_merge = merge_missing(SwarmB_missindx, 
                                     to_vector(swarm_biomass), 
                                     SBiomass_impute);
      vector[N] swarmINI_merge;
      swarmINI_merge = merge_missing(SwarmINI_missindx, 
                                     to_vector(swarm_area_inital), 
                                     SwarmINI_impute);
      vector[N] swarmFIN_merge;
      swarmFIN_merge = merge_missing(SwarmFIN_missindx, 
                                     to_vector(swarm_area_final), 
                                     SwarmFIN_impute);
      swarm_area = (swarmINI_merge + swarmFIN_merge) / 2;
      // swarm_area = scale(swarm_area);
      // SBiomass_merge = scale(SBiomass_merge);
    
      ///////////////////
      ///////////////////////// rain_i -> swarm
      
      vector[N_day] theta_e2;
      matrix[N_dim_day, N_dim_day] sigma_theta_e2;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e2;
      sigma_theta_e2 = cov_GPL2(dist_day, eta_theta_e2, rho_theta_e2, 0.01);
      L_sigma_theta_e2 = cholesky_decompose(sigma_theta_e2);
      theta_e2 = L_sigma_theta_e2 * z_theta_e2;
    
      matrix[N_season, N_month] tau_e2;
      matrix[N_site, N_month] psi_e2;
      tau_e2 = mu_tau_e2 + z_tau_e2 * sigma_tau_e2;
      psi_e2 = mu_psi_e2 + z_psi_e2 * sigma_psi_e2;
      
      ///////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      
      vector[N_day] theta_e3;
      matrix[N_dim_day, N_dim_day] sigma_theta_e3;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e3;
      sigma_theta_e3 = cov_GPL2(dist_day, eta_theta_e3, rho_theta_e3, 0.01);
      L_sigma_theta_e3 = cholesky_decompose(sigma_theta_e3);
      theta_e3 = L_sigma_theta_e3 * z_theta_e3;
    
      matrix[N_season, N_month] tau_e3;
      matrix[N_site, N_month] psi_e3;
      tau_e3 = mu_tau_e3 + z_tau_e3 * sigma_tau_e3;
      psi_e3 = mu_psi_e3 + z_psi_e3 * sigma_psi_e3;
    
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      
      vector[N_day] theta_e4;
      matrix[N_dim_day, N_dim_day] sigma_theta_e4;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e4;
      sigma_theta_e4 = cov_GPL2(dist_day, eta_theta_e4, rho_theta_e4, 0.01);
      L_sigma_theta_e4 = cholesky_decompose(sigma_theta_e4);
      theta_e4 = L_sigma_theta_e4 * z_theta_e4;
    
      matrix[N_season, N_month] tau_e4;
      matrix[N_site, N_month] psi_e4;
      tau_e4 = mu_tau_e4 + z_tau_e4 * sigma_tau_e4;
      psi_e4 = mu_psi_e4 + z_psi_e4 * sigma_psi_e4;
    
      ///////////////////
    }
    
    model {
      vector[N] mu;
      vector[N] p1;
      vector[N] p2;
      ///////////////////////
      /////////////////////// imputed variables
      mu_sb ~ normal(3.5, 1);
      sigma_sb ~ exponential(1);
      SBiomass_merge ~ normal(mu_sb, sigma_sb);
      mu_sbINI ~ normal(3.5, 1);
      sigma_sbINI ~ exponential(1);
      swarmINI_merge ~ normal(mu_sbINI, sigma_sbINI);
      mu_sbFIN ~ normal(3.5, 1);
      sigma_sbFIN ~ exponential(1);
      swarmFIN_merge ~ normal(mu_sbFIN, sigma_sbFIN);
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      vector[N] mu_e1;
      a_e1 ~ normal(0, 1);
      beta_rainW2_e1 ~ normal(0, 0.5);
      sigma_e1 ~ exponential(1);
      
      ///////////////////
      /////////////////// rain_i -> swarm
      to_vector(a_e2) ~ normal(3, 1);
      sigma_e2 ~ exponential(1);
      to_vector(beta_rainW1_e2) ~ normal(0, 0.25);
    
      z_theta_e2 ~ normal(0, 0.5);     
      eta_theta_e2 ~ exponential(3);   
      rho_theta_e2 ~ exponential(0.5); 
      
      to_vector(z_tau_e2) ~ normal(0, 0.5);
      mu_tau_e2 ~ normal(0, 0.5);
      sigma_tau_e2 ~ exponential(1);
    
      to_vector(z_psi_e2) ~ normal(0, 0.5);
      mu_psi_e2 ~ normal(0, 0.5);
      sigma_psi_e2 ~ exponential(1);
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      to_vector(a_e3) ~ normal(2.5, 1);
      sigma_e3 ~ exponential(1);
      to_vector(beta_rainW1_e3) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e3) ~ normal(0, 3);
    
      z_theta_e3 ~ normal(0, 1);
      eta_theta_e3 ~ exponential(3);
      rho_theta_e3 ~ exponential(0.5);
      
      to_vector(z_tau_e3) ~ normal(0, 0.5);
      mu_tau_e3 ~ normal(0, 0.5);
      sigma_tau_e3 ~ exponential(1);
    
      to_vector(z_psi_e3) ~ normal(0, 0.5);
      mu_psi_e3 ~ normal(0, 0.5);
      sigma_psi_e3 ~ exponential(1);
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      to_vector(a_e4) ~ normal(0.25, 0.5);
      sigma_e4 ~ exponential(1);
      to_vector(beta_rainW1_e4) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e4) ~ normal(0, 0.5);
      to_vector(beta_swarmB_e4) ~ normal(0, 0.5);
    
      z_theta_e4 ~ normal(0, 0.5);
      eta_theta_e4 ~ exponential(3);
      rho_theta_e4 ~ exponential(0.5);
      
      to_vector(z_tau_e4) ~ normal(0, 0.5);
      mu_tau_e4 ~ normal(0, 0.5);
      sigma_tau_e4 ~ exponential(1);
    
      to_vector(z_psi_e4) ~ normal(0, 0.5);
      mu_psi_e4 ~ normal(0, 0.5);
      sigma_psi_e4 ~ exponential(1);
      
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      for (i in 1:N) {
        cum_rainfall_W10[i] ~ normal(a_e1 + beta_rainW2_e1 * cum_rainfall_W15[i], 
                                    sigma_e1);
      }
    
      ///////////////////
      /////////////////// rain_i -> swarm
      for (i in 1:N) {
        swarm_area[i] ~ student_t(2,
                                  a_e2[site[i], season[i]] + 
                                  beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W10[i] +
                                  theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                                  psi_e2[site[i], month[i]], 
                                  sigma_e2);
      }
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      for (i in 1:N) {
        SBiomass_merge[i] ~ student_t(2,
                                     a_e3[site[i], season[i]] + 
                                     beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W10[i] +
                                     beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                                     theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                                     psi_e3[site[i], month[i]], 
                                     sigma_e3);
      }
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      for (i in 1:N) {
         mu[i] = inv_logit(a_e4[site[i], season[i]] + 
                           beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W10[i] +
                           beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                           beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                           theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                           psi_e4[site[i], month[i]]);
      }
    
      p1 = mu * sigma_e4;
      p2 = (1 - mu) * sigma_e4;
    
      clustering ~ beta(p1, p2);
    
    }
    
    generated quantities {
      vector[N] mu_e1;
      vector[N] mu_e2;
      vector[N] mu_e3;
      vector[N] mu_e4;
      vector[N] p1;
      vector[N] p2;
      array[N] real ppcheck_e1;
      array[N] real ppcheck_e2;
      array[N] real ppcheck_e3;
      array[N] real ppcheck_e4;
      
      for (i in 1:N) {
        mu_e1[i] = a_e1 + beta_rainW2_e1 * cum_rainfall_W15[i]; 
      }
    
      ppcheck_e1 = normal_rng(mu_e1, sigma_e1);
    
      for (i in 1:N) {
        mu_e2[i] = a_e2[site[i], season[i]] + 
                  beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W10[i] +
                  theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                  psi_e2[site[i], month[i]];
      }
      
      ppcheck_e2 = student_t_rng(2, mu_e2, sigma_e2);
    
    
      for (i in 1:N) {
        mu_e3[i] = a_e3[site[i], season[i]] + 
                   beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W10[i] +
                   beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                   theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                   psi_e3[site[i], month[i]];
      }
      
      ppcheck_e3 = student_t_rng(2, mu_e3, sigma_e3);
    
      for (i in 1:N) {
         mu_e4[i] = inv_logit(a_e4[site[i], season[i]] + 
                           beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W10[i] +
                           beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                           beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                           theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                           psi_e4[site[i], month[i]]);
      }
    
      p1 = mu_e4 * sigma_e4;
      p2 = (1 - mu_e4) * sigma_e4;
    
      ppcheck_e4 = beta_rng(p1, p2);
    
    }
    
    ")

```

#### Running MCMC algorithm


```{r, eval=FALSE}
file <- paste(getwd(), '/w10_clustering.stan', sep ='')

fit_clusteringW10 <- cmdstan_model(file, compile = T)

mod_clusteringW10_obs <- 
  fit_clusteringW10$sample(
    data = network_metrics_obs2[-3], 
    chains = 3, 
    parallel_chains = 3, 
    iter_sampling = 8e3, 
    iter_warmup = 500, 
    thin = 10, 
    seed = 123
  )


```

```{r, echo=FALSE, eval=TRUE}
mod_clusteringW10_obs <- readRDS('causal_mod_clusteringW10.rds')
```

#### Model diagnostics

```{r, fig.height=15, fig.cap="Rhat values and ess of group-level parameters from the generative model explaining the effect of cumulative rainfall during W10, on network clustering of ant followers birds."}

par(mfrow = c(5, 2), mar = c(4, 4, 1.5, 1))
mod_diagnostics(mod_clusteringW10_obs, 
                mod_clusteringW10_obs$summary(
                  unique(paste('psi_e2[', 
                               network_metrics_obs2[-3]$site,
                               ',',
                               network_metrics_obs2[-3]$month, ']', 
                               sep = '')))) 

mod_diagnostics(mod_clusteringW10_obs, 
                mod_clusteringW10_obs$summary(
                  unique(paste('psi_e3[', 
                               network_metrics_obs2[-3]$site,
                               ',',
                               network_metrics_obs2[-3]$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_clusteringW10_obs, 
                mod_clusteringW10_obs$summary(
                  unique(paste('psi_e4[', 
                               network_metrics_obs2[-3]$site,
                               ',',
                               network_metrics_obs2[-3]$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_clusteringW10_obs, 
                mod_clusteringW10_obs$summary(
                  unique(paste('tau_e4[', 
                               network_metrics_obs2[-3]$year,
                               ',',
                               network_metrics_obs2[-3]$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_clusteringW10_obs, 
                mod_clusteringW10_obs$summary(
                  unique(paste('tau_e2[', 
                               network_metrics_obs2[-3]$year,
                               ',',
                               network_metrics_obs2[-3]$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_clusteringW10_obs, 
                mod_clusteringW10_obs$summary(
                  unique(paste('tau_e3[', 
                               network_metrics_obs2[-3]$year,
                               ',',
                               network_metrics_obs2[-3]$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_clusteringW10_obs, 
                mod_clusteringW10_obs$summary(paste('theta_e4[', 
                                                    1:network_metrics_obs2[-3]$N_day, ']', 
                                                    sep = '')))
mod_diagnostics(mod_clusteringW10_obs, 
                mod_clusteringW10_obs$summary(paste('theta_e3[', 
                                                    1:network_metrics_obs2[-3]$N_day, ']', 
                                                    sep = '')))

mod_diagnostics(mod_clusteringW10_obs, 
                mod_clusteringW10_obs$summary(paste('theta_e2[', 
                                                    1:network_metrics_obs2[-3]$N_day, ']', 
                                                    sep = '')))
par(mfrow = c(1, 1))
```

```{r, fig.cap="Rhat values and ess of slope, intercept, and dispersion parameters  from the generative model explaining the effect of cumulative rainfall during W10, on network clustering of ant followers birds."}
summary_clusteringW10 <- mod_clusteringW10_obs$summary(c('beta_rainW2_e1', 
                                                         'beta_rainW1_e2',
                                                         'beta_rainW1_e3',
                                                         'beta_rainW1_e4',
                                                         'beta_sawrA_e3',
                                                         'beta_sawrA_e4',
                                                         'beta_swarmB_e4', 
                                                         'a_e1', 'a_e2', 
                                                         'a_e3', 'a_e4',
                                                         'sigma_e1', 'sigma_e2', 
                                                         'sigma_e3', 'sigma_e4', 
                                                         'swarm_area',
                                                         'SBiomass_merge',
                                                         'lp__'))


mod_diagnostics(mod_clusteringW10_obs, summary_clusteringW10)


```


```{r, fig.cap= "Posterior predictive checks"}
post_clusteringW10_obs <- mod_clusteringW10_obs$draws(c('beta_rainW2_e1', 
                                                        'beta_rainW1_e2',
                                                        'beta_rainW1_e3',
                                                        'beta_rainW1_e4',
                                                        'beta_sawrA_e3',
                                                        'beta_sawrA_e4',
                                                        'beta_swarmB_e4', 
                                                        'a_e1', 'a_e2', 'a_e3', 'a_e4',
                                                        'sigma_e1', 'sigma_e2', 
                                                        'sigma_e3', 'sigma_e4',
                                                        'swarm_area',
                                                        'SBiomass_merge'
), 
format = 'df')

ppcheck_swarmA <- mod_clusteringW10_obs$draws('ppcheck_e2', format = 'matrix')
ppcheck_swarmB <- mod_clusteringW10_obs$draws('ppcheck_e3', format = 'matrix')
ppcheck_clustering <- mod_clusteringW10_obs$draws('ppcheck_e4', format = 'matrix')
ppcheck_R1 <- mod_clusteringW10_obs$draws('ppcheck_e1', format = 'matrix')

swarm_area <- apply(post_clusteringW10_obs[, grep('swarm_area', colnames(post_clusteringW10_obs))], 
                    2, mean)

swarm_BM <- 
  apply(post_clusteringW10_obs[, grep('SBiomass_merge', colnames(post_clusteringW10_obs))], 
        2, mean)

par(mfrow = c(2, 2))

plot(density(network_metrics_obs2[-3]$cum_rainfall_W10), 
     main = '', xlab = 'Cum rainfall W1')
for(i in 1:100) lines(density(ppcheck_R1[i, ]), lwd = 0.1)
lines(density(network_metrics_obs2[-3]$cum_rainfall_W10), col = 'red')

plot(density(swarm_area), main = '', xlab = 'Swarm area')
for(i in 1:100) lines(density(ppcheck_swarmA[i, ]), lwd = 0.1)
lines(density(swarm_area), main = '', xlab = 'Swarm area', col = 'red')

plot(density(swarm_BM), main = '', xlab = 'Arthropod biomass')
for(i in 1:100) lines(density(ppcheck_swarmB[i, ]), lwd = 0.1)
lines(density(swarm_BM), col = 'red')

plot(density(network_metrics_obs2[-3]$clustering), 
     main = '', xlab = 'Net size')
for(i in 1:100) lines(density(ppcheck_clustering[i, ]), lwd = 0.1)
lines(density(network_metrics_obs2[-3]$clustering), col = 'red')
par(mfrow = c(1, 1))



post_beta_clusteringW10 <- gather(post_clusteringW10_obs[, grep('beta', colnames(post_clusteringW10_obs))])

post_beta_clusteringW10$key <- as.factor(post_beta_clusteringW10$key)
```

### Window 15 model

#### Stan code

```{r, eval=FALSE}
cat(file = 'w15_clustering.stan', 
    "
    
    functions {
    
      vector scale(vector x) {
        int N = dims(x)[1];
        real mu = mean(x);
        real sigma = sd(x);
        vector[N] scaled_v;
    
        for (i in 1:N) {
          scaled_v[i] = (x[i] - mu) / sigma;
        }
        return scaled_v;
      }  
    
      vector merge_missing(int[] miss_indxex, vector x_obs, vector x_miss) {
                int N = dims(x_obs)[1];
                int N_miss = dims(x_miss)[1];
                vector[N] merge;
                merge = x_obs;
                for (i in 1:N_miss) {
                    merge[miss_indxex[i]] = x_miss[i];
                }
            return merge;
          }
    
    
      matrix cov_GPL2(matrix x,
                      real eta,
                      real rho,
                      real delta) {
                      
                      int N = dims(x)[1];
                      matrix[N, N] K;
    
                      for (i in 1:(N-1)) {
                        K[i, i] = eta + delta;
                        for (j in (i + 1):N) {
                          K[i, j] = eta * exp(-rho * square(x[i, j]));
                          K[j, i] = K[i, j];
                        }
                      }
                      K[N, N] = eta + delta;
                      return K;
                      }
    }
    
    data {
      int N;
      int N_day;
      int N_month;
      int N_season;
      int N_site;
      int N_dim_day;
      int N_naSwarmBio;
      int N_naSwarmINI;
      int N_naSwarmFIN;
      array[N_naSwarmBio] int SwarmB_missindx;
      array[N_naSwarmINI] int SwarmINI_missindx;
      array[N_naSwarmFIN] int SwarmFIN_missindx;
      vector<lower=0,upper=1>[N] clustering;
      array[N] int day;
      array[N] int month;
      array[N] int season;
      array[N] int site;
      vector[N] swarm_biomass;
      vector[N] swarm_area_inital;
      vector[N] swarm_area_final;
      array[N] int cum_rainfall_W20;
      array[N] int cum_rainfall_W15;
      matrix[N_dim_day, N_dim_day] dist_day;
    }
    
    parameters {
      /////////////
      ///////////// imputed variables
      vector[N_naSwarmBio] SBiomass_impute;
      real mu_sb;
      real<lower = 0> sigma_sb;
      vector[N_naSwarmINI] SwarmINI_impute;
      real mu_sbINI;
      real<lower = 0> sigma_sbINI;
      vector[N_naSwarmFIN] SwarmFIN_impute;
      real mu_sbFIN;
      real<lower = 0> sigma_sbFIN;
    
      //////////////
      ///////////// rain_i+n -> rain_i
      real a_e1;
      real beta_rainW2_e1;
      real<lower = 0> sigma_e1;
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm
      matrix[N_site, N_season] a_e2;
      matrix[N_site, N_season] beta_rainW1_e2;
      real<lower = 0> sigma_e2;
    
      vector[N_day] z_theta_e2;
      real<lower = 0> eta_theta_e2;
      real<lower = 0> rho_theta_e2;
    
      matrix[N_season, N_month] z_tau_e2;
      real mu_tau_e2;
      real<lower = 0> sigma_tau_e2;
    
      matrix[N_site, N_month] z_psi_e2;
      real mu_psi_e2;
      real<lower = 0> sigma_psi_e2;
      
      ////////////////////
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      matrix[N_site, N_season] a_e3;
      matrix[N_site, N_season] beta_rainW1_e3;
      matrix[N_site, N_season] beta_sawrA_e3;
      real<lower = 0> sigma_e3;
    
      vector[N_day] z_theta_e3;
      real<lower = 0> eta_theta_e3;
      real<lower = 0> rho_theta_e3;
    
      matrix[N_season, N_month] z_tau_e3;
      real mu_tau_e3;
      real<lower = 0> sigma_tau_e3;
    
      matrix[N_site, N_month] z_psi_e3;
      real mu_psi_e3;
      real<lower = 0> sigma_psi_e3;
      
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      matrix[N_site, N_season] a_e4;
      matrix[N_site, N_season] beta_rainW1_e4;
      matrix[N_site, N_season] beta_sawrA_e4;
      matrix[N_site, N_season] beta_swarmB_e4;
      real<lower = 0> sigma_e4;
    
      vector[N_day] z_theta_e4;
      real<lower = 0> eta_theta_e4;
      real<lower = 0> rho_theta_e4;
    
      matrix[N_season, N_month] z_tau_e4;
      real mu_tau_e4;
      real<lower = 0> sigma_tau_e4;
    
      matrix[N_site, N_month] z_psi_e4;
      real mu_psi_e4;
      real<lower = 0> sigma_psi_e4;
      
      ////////////////////
    
      
    }
    
    transformed parameters{
      
      ///////////////////////
      ///////////////////////// imputed variables
      vector[N] swarm_area;
      vector[N] SBiomass_merge;
      SBiomass_merge = merge_missing(SwarmB_missindx, 
                                     to_vector(swarm_biomass), 
                                     SBiomass_impute);
      vector[N] swarmINI_merge;
      swarmINI_merge = merge_missing(SwarmINI_missindx, 
                                     to_vector(swarm_area_inital), 
                                     SwarmINI_impute);
      vector[N] swarmFIN_merge;
      swarmFIN_merge = merge_missing(SwarmFIN_missindx, 
                                     to_vector(swarm_area_final), 
                                     SwarmFIN_impute);
      swarm_area = (swarmINI_merge + swarmFIN_merge) / 2;
      // swarm_area = scale(swarm_area);
      // SBiomass_merge = scale(SBiomass_merge);
    
      ///////////////////
      ///////////////////////// rain_i -> swarm
      
      vector[N_day] theta_e2;
      matrix[N_dim_day, N_dim_day] sigma_theta_e2;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e2;
      sigma_theta_e2 = cov_GPL2(dist_day, eta_theta_e2, rho_theta_e2, 0.01);
      L_sigma_theta_e2 = cholesky_decompose(sigma_theta_e2);
      theta_e2 = L_sigma_theta_e2 * z_theta_e2;
    
      matrix[N_season, N_month] tau_e2;
      matrix[N_site, N_month] psi_e2;
      tau_e2 = mu_tau_e2 + z_tau_e2 * sigma_tau_e2;
      psi_e2 = mu_psi_e2 + z_psi_e2 * sigma_psi_e2;
      
      ///////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      
      vector[N_day] theta_e3;
      matrix[N_dim_day, N_dim_day] sigma_theta_e3;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e3;
      sigma_theta_e3 = cov_GPL2(dist_day, eta_theta_e3, rho_theta_e3, 0.01);
      L_sigma_theta_e3 = cholesky_decompose(sigma_theta_e3);
      theta_e3 = L_sigma_theta_e3 * z_theta_e3;
    
      matrix[N_season, N_month] tau_e3;
      matrix[N_site, N_month] psi_e3;
      tau_e3 = mu_tau_e3 + z_tau_e3 * sigma_tau_e3;
      psi_e3 = mu_psi_e3 + z_psi_e3 * sigma_psi_e3;
    
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      
      vector[N_day] theta_e4;
      matrix[N_dim_day, N_dim_day] sigma_theta_e4;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e4;
      sigma_theta_e4 = cov_GPL2(dist_day, eta_theta_e4, rho_theta_e4, 0.01);
      L_sigma_theta_e4 = cholesky_decompose(sigma_theta_e4);
      theta_e4 = L_sigma_theta_e4 * z_theta_e4;
    
      matrix[N_season, N_month] tau_e4;
      matrix[N_site, N_month] psi_e4;
      tau_e4 = mu_tau_e4 + z_tau_e4 * sigma_tau_e4;
      psi_e4 = mu_psi_e4 + z_psi_e4 * sigma_psi_e4;
    
      ///////////////////
    }
    
    model {
      vector[N] mu;
      vector[N] p1;
      vector[N] p2;
      ///////////////////////
      /////////////////////// imputed variables
      mu_sb ~ normal(3.5, 1);
      sigma_sb ~ exponential(1);
      SBiomass_merge ~ normal(mu_sb, sigma_sb);
      mu_sbINI ~ normal(3.5, 1);
      sigma_sbINI ~ exponential(1);
      swarmINI_merge ~ normal(mu_sbINI, sigma_sbINI);
      mu_sbFIN ~ normal(3.5, 1);
      sigma_sbFIN ~ exponential(1);
      swarmFIN_merge ~ normal(mu_sbFIN, sigma_sbFIN);
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      vector[N] mu_e1;
      a_e1 ~ normal(0, 1);
      beta_rainW2_e1 ~ normal(0, 0.5);
      sigma_e1 ~ exponential(1);
      
      ///////////////////
      /////////////////// rain_i -> swarm
      to_vector(a_e2) ~ normal(3, 1);
      sigma_e2 ~ exponential(1);
      to_vector(beta_rainW1_e2) ~ normal(0, 0.25);
    
      z_theta_e2 ~ normal(0, 0.5);     
      eta_theta_e2 ~ exponential(3);   
      rho_theta_e2 ~ exponential(0.5); 
      
      to_vector(z_tau_e2) ~ normal(0, 0.5);
      mu_tau_e2 ~ normal(0, 0.5);
      sigma_tau_e2 ~ exponential(1);
    
      to_vector(z_psi_e2) ~ normal(0, 0.5);
      mu_psi_e2 ~ normal(0, 0.5);
      sigma_psi_e2 ~ exponential(1);
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      to_vector(a_e3) ~ normal(2.5, 1);
      sigma_e3 ~ exponential(1);
      to_vector(beta_rainW1_e3) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e3) ~ normal(0, 3);
    
      z_theta_e3 ~ normal(0, 1);
      eta_theta_e3 ~ exponential(3);
      rho_theta_e3 ~ exponential(0.5);
      
      to_vector(z_tau_e3) ~ normal(0, 0.5);
      mu_tau_e3 ~ normal(0, 0.5);
      sigma_tau_e3 ~ exponential(1);
    
      to_vector(z_psi_e3) ~ normal(0, 0.5);
      mu_psi_e3 ~ normal(0, 0.5);
      sigma_psi_e3 ~ exponential(1);
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      to_vector(a_e4) ~ normal(0.25, 0.5);
      sigma_e4 ~ exponential(1);
      to_vector(beta_rainW1_e4) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e4) ~ normal(0, 0.5);
      to_vector(beta_swarmB_e4) ~ normal(0, 0.5);
    
      z_theta_e4 ~ normal(0, 0.5);
      eta_theta_e4 ~ exponential(3);
      rho_theta_e4 ~ exponential(0.5);
      
      to_vector(z_tau_e4) ~ normal(0, 0.5);
      mu_tau_e4 ~ normal(0, 0.5);
      sigma_tau_e4 ~ exponential(1);
    
      to_vector(z_psi_e4) ~ normal(0, 0.5);
      mu_psi_e4 ~ normal(0, 0.5);
      sigma_psi_e4 ~ exponential(1);
      
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      for (i in 1:N) {
        cum_rainfall_W15[i] ~ normal(a_e1 + beta_rainW2_e1 * cum_rainfall_W20[i], 
                                    sigma_e1);
      }
    
      ///////////////////
      /////////////////// rain_i -> swarm
      for (i in 1:N) {
        swarm_area[i] ~ student_t(2,
                                  a_e2[site[i], season[i]] + 
                                  beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W15[i] +
                                  theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                                  psi_e2[site[i], month[i]], 
                                  sigma_e2);
      }
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      for (i in 1:N) {
        SBiomass_merge[i] ~ student_t(2,
                                     a_e3[site[i], season[i]] + beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W15[i] +
                                     beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                                     theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                                     psi_e3[site[i], month[i]], 
                                     sigma_e3);
      }
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      for (i in 1:N) {
         mu[i] = inv_logit(a_e4[site[i], season[i]] + 
                           beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W15[i] +
                           beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                           beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                           theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                           psi_e4[site[i], month[i]]);
      }
    
      p1 = mu * sigma_e4;
      p2 = (1 - mu) * sigma_e4;
    
      clustering ~ beta(p1, p2);
    
    }
    
    generated quantities {
      vector[N] mu_e1;
      vector[N] mu_e2;
      vector[N] mu_e3;
      vector[N] mu_e4;
      vector[N] p1;
      vector[N] p2;
      array[N] real ppcheck_e1;
      array[N] real ppcheck_e2;
      array[N] real ppcheck_e3;
      array[N] real ppcheck_e4;
      
      for (i in 1:N) {
        mu_e1[i] = a_e1 + beta_rainW2_e1 * cum_rainfall_W20[i]; 
      }
    
      ppcheck_e1 = normal_rng(mu_e1, sigma_e1);
    
      for (i in 1:N) {
        mu_e2[i] = a_e2[site[i], season[i]] + beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W15[i] +
                  theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                  psi_e2[site[i], month[i]];
      }
      
      ppcheck_e2 = student_t_rng(2, mu_e2, sigma_e2);
    
    
      for (i in 1:N) {
        mu_e3[i] = a_e3[site[i], season[i]] + 
                   beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W15[i] +
                   beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                   theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                   psi_e3[site[i], month[i]];
      }
      
      ppcheck_e3 = student_t_rng(2, mu_e3, sigma_e3);
    
      for (i in 1:N) {
         mu_e4[i] = inv_logit(a_e4[site[i], season[i]] + 
                           beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W15[i] +
                           beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                           beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                           theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                           psi_e4[site[i], month[i]]);
      }
    
      p1 = mu_e4 * sigma_e4;
      p2 = (1 - mu_e4) * sigma_e4;
    
      ppcheck_e4 = beta_rng(p1, p2);
    
    }
    
    ")

```

#### Running MCMC algorithm


```{r, eval=FALSE}
file <- paste(getwd(), '/w15_clustering.stan', sep ='')

fit_clusteringW15 <- cmdstan_model(file, compile = T)

mod_clusteringW15_obs <- 
  fit_clusteringW15$sample(
    data = network_metrics_obs2[-3], 
    chains = 3, 
    parallel_chains = 3, 
    iter_sampling = 8e3, 
    iter_warmup = 500, 
    thin = 10, 
    seed = 123
  )

```

```{r, echo=FALSE, eval=TRUE}
mod_clusteringW15_obs <- readRDS('causal_mod_clusteringW15.rds')
```

#### Model diagnostics

```{r, fig.height=15, fig.cap="Rhat values and ess of group-level parameters from the generative model explaining the effect of cumulative rainfall during W15, on network clustering of ant followers birds."}

par(mfrow = c(5, 2), mar = c(4, 4, 1.5, 1))
mod_diagnostics(mod_clusteringW15_obs, 
                mod_clusteringW15_obs$summary(
                  unique(paste('psi_e2[', 
                               network_metrics_obs2[-3]$site,
                               ',',
                               network_metrics_obs2[-3]$month, ']', 
                               sep = '')))) 

mod_diagnostics(mod_clusteringW15_obs, 
                mod_clusteringW15_obs$summary(
                  unique(paste('psi_e3[', 
                               network_metrics_obs2[-3]$site,
                               ',',
                               network_metrics_obs2[-3]$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_clusteringW15_obs, 
                mod_clusteringW15_obs$summary(
                  unique(paste('psi_e4[', 
                               network_metrics_obs2[-3]$site,
                               ',',
                               network_metrics_obs2[-3]$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_clusteringW15_obs, 
                mod_clusteringW15_obs$summary(
                  unique(paste('tau_e4[', 
                               network_metrics_obs2[-3]$year,
                               ',',
                               network_metrics_obs2[-3]$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_clusteringW15_obs, 
                mod_clusteringW15_obs$summary(
                  unique(paste('tau_e2[', 
                               network_metrics_obs2[-3]$year,
                               ',',
                               network_metrics_obs2[-3]$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_clusteringW15_obs, 
                mod_clusteringW15_obs$summary(
                  unique(paste('tau_e3[', 
                               network_metrics_obs2[-3]$year,
                               ',',
                               network_metrics_obs2[-3]$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_clusteringW15_obs, 
                mod_clusteringW15_obs$summary(paste('theta_e4[', 
                                                    1:network_metrics_obs2[-3]$N_day, ']', 
                                                    sep = '')))
mod_diagnostics(mod_clusteringW15_obs, 
                mod_clusteringW15_obs$summary(paste('theta_e3[', 
                                                    1:network_metrics_obs2[-3]$N_day, ']', 
                                                    sep = '')))

mod_diagnostics(mod_clusteringW15_obs, 
                mod_clusteringW15_obs$summary(paste('theta_e2[', 
                                                    1:network_metrics_obs2[-3]$N_day, ']', 
                                                    sep = '')))
par(mfrow = c(1, 1))
```

```{r, fig.cap="Rhat values and ess of slope, intercept, and dispersion parameters  from the generative model explaining the effect of cumulative rainfall during W15, on network clustering of ant followers birds."}
summary_clusteringW15 <- mod_clusteringW15_obs$summary(c('beta_rainW2_e1', 
                                                         'beta_rainW1_e2',
                                                         'beta_rainW1_e3',
                                                         'beta_rainW1_e4',
                                                         'beta_sawrA_e3',
                                                         'beta_sawrA_e4',
                                                         'beta_swarmB_e4', 
                                                         'a_e1', 'a_e2', 
                                                         'a_e3', 'a_e4',
                                                         'sigma_e1', 'sigma_e2', 
                                                         'sigma_e3', 'sigma_e4', 
                                                         'swarm_area',
                                                         'SBiomass_merge',
                                                         'lp__'))

mod_diagnostics(mod_clusteringW15_obs, summary_clusteringW15)


```


```{r, fig.cap= "Posterior predictive checks"}
post_clusteringW15_obs <- mod_clusteringW15_obs$draws(c('beta_rainW2_e1', 
                                                        'beta_rainW1_e2',
                                                        'beta_rainW1_e3',
                                                        'beta_rainW1_e4',
                                                        'beta_sawrA_e3',
                                                        'beta_sawrA_e4',
                                                        'beta_swarmB_e4', 
                                                        'a_e1', 'a_e2', 'a_e3', 'a_e4',
                                                        'sigma_e1', 'sigma_e2', 
                                                        'sigma_e3', 'sigma_e4',
                                                        'swarm_area',
                                                        'SBiomass_merge'
), 
format = 'df')

ppcheck_swarmA <- mod_clusteringW15_obs$draws('ppcheck_e2', format = 'matrix')
ppcheck_swarmB <- mod_clusteringW15_obs$draws('ppcheck_e3', format = 'matrix')
ppcheck_clustering <- mod_clusteringW15_obs$draws('ppcheck_e4', format = 'matrix')
ppcheck_R1 <- mod_clusteringW15_obs$draws('ppcheck_e1', format = 'matrix')

swarm_area <- apply(post_clusteringW15_obs[, grep('swarm_area', colnames(post_clusteringW15_obs))], 
                    2, mean)

swarm_BM <- 
  apply(post_clusteringW15_obs[, grep('SBiomass_merge', colnames(post_clusteringW15_obs))], 
        2, mean)

par(mfrow = c(2, 2), mar = c(4, 4, 1, 1))
plot(density(network_metrics_obs2[-3]$cum_rainfall_W15), 
     main = '', xlab = 'Cum rainfall W5')
for(i in 1:100) lines(density(ppcheck_R1[i, ]), lwd = 0.1)
lines(density(network_metrics_obs2[-3]$cum_rainfall_W15), col = 'red')

plot(density(swarm_area), main = '', xlab = 'Swarm area')
for(i in 1:100) lines(density(ppcheck_swarmA[i, ]), lwd = 0.1)
lines(density(swarm_area), main = '', xlab = 'Swarm area', col = 'red')

plot(density(swarm_BM), main = '', xlab = 'Arthropod biomass')
for(i in 1:100) lines(density(ppcheck_swarmB[i, ]), lwd = 0.1)
lines(density(swarm_BM), col = 'red')

plot(density(network_metrics_obs2[-3]$clustering), 
     main = '', xlab = 'Net size')
for(i in 1:100) lines(density(ppcheck_clustering[i, ]), lwd = 0.1)
lines(density(network_metrics_obs2[-3]$clustering), col = 'red')

post_beta_clusteringW15 <- gather(post_clusteringW15_obs[, grep('beta', colnames(post_clusteringW15_obs))])

post_beta_clusteringW15$key <- as.factor(post_beta_clusteringW15$key)

```

### Window 20 model

#### Stan code

```{r, eval=FALSE}
cat(file = 'w20_clustering.stan', 
    "
    
    functions {
    
      vector scale(vector x) {
        int N = dims(x)[1];
        real mu = mean(x);
        real sigma = sd(x);
        vector[N] scaled_v;
    
        for (i in 1:N) {
          scaled_v[i] = (x[i] - mu) / sigma;
        }
        return scaled_v;
      }  
    
      vector merge_missing(int[] miss_indxex, vector x_obs, vector x_miss) {
                int N = dims(x_obs)[1];
                int N_miss = dims(x_miss)[1];
                vector[N] merge;
                merge = x_obs;
                for (i in 1:N_miss) {
                    merge[miss_indxex[i]] = x_miss[i];
                }
            return merge;
          }
    
    
      matrix cov_GPL2(matrix x,
                      real eta,
                      real rho,
                      real delta) {
                      
                      int N = dims(x)[1];
                      matrix[N, N] K;
    
                      for (i in 1:(N-1)) {
                        K[i, i] = eta + delta;
                        for (j in (i + 1):N) {
                          K[i, j] = eta * exp(-rho * square(x[i, j]));
                          K[j, i] = K[i, j];
                        }
                      }
                      K[N, N] = eta + delta;
                      return K;
                      }
    }
    
    data {
      int N;
      int N_day;
      int N_month;
      int N_season;
      int N_site;
      int N_dim_day;
      int N_naSwarmBio;
      int N_naSwarmINI;
      int N_naSwarmFIN;
      array[N_naSwarmBio] int SwarmB_missindx;
      array[N_naSwarmINI] int SwarmINI_missindx;
      array[N_naSwarmFIN] int SwarmFIN_missindx;
      vector<lower=0,upper=1>[N] clustering;
      array[N] int day;
      array[N] int month;
      array[N] int season;
      array[N] int site;
      vector[N] swarm_biomass;
      vector[N] swarm_area_inital;
      vector[N] swarm_area_final;
      array[N] int cum_rainfall_W20;
      array[N] int cum_rainfall_W25;
      matrix[N_dim_day, N_dim_day] dist_day;
    }
    
    parameters {
      /////////////
      ///////////// imputed variables
      vector[N_naSwarmBio] SBiomass_impute;
      real mu_sb;
      real<lower = 0> sigma_sb;
      vector[N_naSwarmINI] SwarmINI_impute;
      real mu_sbINI;
      real<lower = 0> sigma_sbINI;
      vector[N_naSwarmFIN] SwarmFIN_impute;
      real mu_sbFIN;
      real<lower = 0> sigma_sbFIN;
    
      //////////////
      ///////////// rain_i+n -> rain_i
      real a_e1;
      real beta_rainW2_e1;
      real<lower = 0> sigma_e1;
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm
      matrix[N_site, N_season] a_e2;
      matrix[N_site, N_season] beta_rainW1_e2;
      real<lower = 0> sigma_e2;
    
      vector[N_day] z_theta_e2;
      real<lower = 0> eta_theta_e2;
      real<lower = 0> rho_theta_e2;
    
      matrix[N_season, N_month] z_tau_e2;
      real mu_tau_e2;
      real<lower = 0> sigma_tau_e2;
    
      matrix[N_site, N_month] z_psi_e2;
      real mu_psi_e2;
      real<lower = 0> sigma_psi_e2;
      
      ////////////////////
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      matrix[N_site, N_season] a_e3;
      matrix[N_site, N_season] beta_rainW1_e3;
      matrix[N_site, N_season] beta_sawrA_e3;
      real<lower = 0> sigma_e3;
    
      vector[N_day] z_theta_e3;
      real<lower = 0> eta_theta_e3;
      real<lower = 0> rho_theta_e3;
    
      matrix[N_season, N_month] z_tau_e3;
      real mu_tau_e3;
      real<lower = 0> sigma_tau_e3;
    
      matrix[N_site, N_month] z_psi_e3;
      real mu_psi_e3;
      real<lower = 0> sigma_psi_e3;
      
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      matrix[N_site, N_season] a_e4;
      matrix[N_site, N_season] beta_rainW1_e4;
      matrix[N_site, N_season] beta_sawrA_e4;
      matrix[N_site, N_season] beta_swarmB_e4;
      real<lower = 0> sigma_e4;
    
      vector[N_day] z_theta_e4;
      real<lower = 0> eta_theta_e4;
      real<lower = 0> rho_theta_e4;
    
      matrix[N_season, N_month] z_tau_e4;
      real mu_tau_e4;
      real<lower = 0> sigma_tau_e4;
    
      matrix[N_site, N_month] z_psi_e4;
      real mu_psi_e4;
      real<lower = 0> sigma_psi_e4;
      
      ////////////////////
    
      
    }
    
    transformed parameters{
      
      ///////////////////////
      ///////////////////////// imputed variables
      vector[N] swarm_area;
      vector[N] SBiomass_merge;
      SBiomass_merge = merge_missing(SwarmB_missindx, 
                                     to_vector(swarm_biomass), 
                                     SBiomass_impute);
      vector[N] swarmINI_merge;
      swarmINI_merge = merge_missing(SwarmINI_missindx, 
                                     to_vector(swarm_area_inital), 
                                     SwarmINI_impute);
      vector[N] swarmFIN_merge;
      swarmFIN_merge = merge_missing(SwarmFIN_missindx, 
                                     to_vector(swarm_area_final), 
                                     SwarmFIN_impute);
      swarm_area = (swarmINI_merge + swarmFIN_merge) / 2;
      // swarm_area = scale(swarm_area);
      // SBiomass_merge = scale(SBiomass_merge);
    
      ///////////////////
      ///////////////////////// rain_i -> swarm
      
      vector[N_day] theta_e2;
      matrix[N_dim_day, N_dim_day] sigma_theta_e2;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e2;
      sigma_theta_e2 = cov_GPL2(dist_day, eta_theta_e2, rho_theta_e2, 0.01);
      L_sigma_theta_e2 = cholesky_decompose(sigma_theta_e2);
      theta_e2 = L_sigma_theta_e2 * z_theta_e2;
    
      matrix[N_season, N_month] tau_e2;
      matrix[N_site, N_month] psi_e2;
      tau_e2 = mu_tau_e2 + z_tau_e2 * sigma_tau_e2;
      psi_e2 = mu_psi_e2 + z_psi_e2 * sigma_psi_e2;
      
      ///////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      
      vector[N_day] theta_e3;
      matrix[N_dim_day, N_dim_day] sigma_theta_e3;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e3;
      sigma_theta_e3 = cov_GPL2(dist_day, eta_theta_e3, rho_theta_e3, 0.01);
      L_sigma_theta_e3 = cholesky_decompose(sigma_theta_e3);
      theta_e3 = L_sigma_theta_e3 * z_theta_e3;
    
      matrix[N_season, N_month] tau_e3;
      matrix[N_site, N_month] psi_e3;
      tau_e3 = mu_tau_e3 + z_tau_e3 * sigma_tau_e3;
      psi_e3 = mu_psi_e3 + z_psi_e3 * sigma_psi_e3;
    
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      
      vector[N_day] theta_e4;
      matrix[N_dim_day, N_dim_day] sigma_theta_e4;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e4;
      sigma_theta_e4 = cov_GPL2(dist_day, eta_theta_e4, rho_theta_e4, 0.01);
      L_sigma_theta_e4 = cholesky_decompose(sigma_theta_e4);
      theta_e4 = L_sigma_theta_e4 * z_theta_e4;
    
      matrix[N_season, N_month] tau_e4;
      matrix[N_site, N_month] psi_e4;
      tau_e4 = mu_tau_e4 + z_tau_e4 * sigma_tau_e4;
      psi_e4 = mu_psi_e4 + z_psi_e4 * sigma_psi_e4;
    
      ///////////////////
    }
    
    model {
      vector[N] mu;
      vector[N] p1;
      vector[N] p2;
      ///////////////////////
      /////////////////////// imputed variables
      mu_sb ~ normal(3.5, 1);
      sigma_sb ~ exponential(1);
      SBiomass_merge ~ normal(mu_sb, sigma_sb);
      mu_sbINI ~ normal(3.5, 1);
      sigma_sbINI ~ exponential(1);
      swarmINI_merge ~ normal(mu_sbINI, sigma_sbINI);
      mu_sbFIN ~ normal(3.5, 1);
      sigma_sbFIN ~ exponential(1);
      swarmFIN_merge ~ normal(mu_sbFIN, sigma_sbFIN);
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      vector[N] mu_e1;
      a_e1 ~ normal(0, 1);
      beta_rainW2_e1 ~ normal(0, 0.5);
      sigma_e1 ~ exponential(1);
      
      ///////////////////
      /////////////////// rain_i -> swarm
      to_vector(a_e2) ~ normal(3, 1);
      sigma_e2 ~ exponential(1);
      to_vector(beta_rainW1_e2) ~ normal(0, 0.25);
    
      z_theta_e2 ~ normal(0, 0.5);     
      eta_theta_e2 ~ exponential(3);   
      rho_theta_e2 ~ exponential(0.5); 
      
      to_vector(z_tau_e2) ~ normal(0, 0.5);
      mu_tau_e2 ~ normal(0, 0.5);
      sigma_tau_e2 ~ exponential(1);
    
      to_vector(z_psi_e2) ~ normal(0, 0.5);
      mu_psi_e2 ~ normal(0, 0.5);
      sigma_psi_e2 ~ exponential(1);
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      to_vector(a_e3) ~ normal(2.5, 1);
      sigma_e3 ~ exponential(1);
      to_vector(beta_rainW1_e3) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e3) ~ normal(0, 3);
    
      z_theta_e3 ~ normal(0, 1);
      eta_theta_e3 ~ exponential(3);
      rho_theta_e3 ~ exponential(0.5);
      
      to_vector(z_tau_e3) ~ normal(0, 0.5);
      mu_tau_e3 ~ normal(0, 0.5);
      sigma_tau_e3 ~ exponential(1);
    
      to_vector(z_psi_e3) ~ normal(0, 0.5);
      mu_psi_e3 ~ normal(0, 0.5);
      sigma_psi_e3 ~ exponential(1);
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      to_vector(a_e4) ~ normal(0.25, 0.5);
      sigma_e4 ~ exponential(1);
      to_vector(beta_rainW1_e4) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e4) ~ normal(0, 0.5);
      to_vector(beta_swarmB_e4) ~ normal(0, 0.5);
    
      z_theta_e4 ~ normal(0, 0.5);
      eta_theta_e4 ~ exponential(3);
      rho_theta_e4 ~ exponential(0.5);
      
      to_vector(z_tau_e4) ~ normal(0, 0.5);
      mu_tau_e4 ~ normal(0, 0.5);
      sigma_tau_e4 ~ exponential(1);
    
      to_vector(z_psi_e4) ~ normal(0, 0.5);
      mu_psi_e4 ~ normal(0, 0.5);
      sigma_psi_e4 ~ exponential(1);
      
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      for (i in 1:N) {
        cum_rainfall_W20[i] ~ normal(a_e1 + beta_rainW2_e1 * cum_rainfall_W25[i], 
                                    sigma_e1);
      }
    
      ///////////////////
      /////////////////// rain_i -> swarm
      for (i in 1:N) {
        swarm_area[i] ~ student_t(2,
                                  a_e2[site[i], season[i]] + 
                                  beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W20[i] +
                                  theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                                  psi_e2[site[i], month[i]], 
                                  sigma_e2);
      }
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      for (i in 1:N) {
        SBiomass_merge[i] ~ student_t(2,
                                     a_e3[site[i], season[i]] + 
                                     beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W20[i] +
                                     beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                                     theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                                     psi_e3[site[i], month[i]], 
                                     sigma_e3);
      }
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      for (i in 1:N) {
         mu[i] = inv_logit(a_e4[site[i], season[i]] + 
                           beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W20[i] +
                           beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                           beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                           theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                           psi_e4[site[i], month[i]]);
      }
    
      p1 = mu * sigma_e4;
      p2 = (1 - mu) * sigma_e4;
    
      clustering ~ beta(p1, p2);
    
    }
    
    generated quantities {
      vector[N] mu_e1;
      vector[N] mu_e2;
      vector[N] mu_e3;
      vector[N] mu_e4;
      vector[N] p1;
      vector[N] p2;
      array[N] real ppcheck_e1;
      array[N] real ppcheck_e2;
      array[N] real ppcheck_e3;
      array[N] real ppcheck_e4;
      
      for (i in 1:N) {
        mu_e1[i] = a_e1 + beta_rainW2_e1 * cum_rainfall_W25[i]; 
      }
    
      ppcheck_e1 = normal_rng(mu_e1, sigma_e1);
    
      for (i in 1:N) {
        mu_e2[i] = a_e2[site[i], season[i]] + 
                  beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W20[i] +
                  theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                  psi_e2[site[i], month[i]];
      }
      
      ppcheck_e2 = student_t_rng(2, mu_e2, sigma_e2);
    
    
      for (i in 1:N) {
        mu_e3[i] = a_e3[site[i], season[i]] + 
                   beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W20[i] +
                   beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                   theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                   psi_e3[site[i], month[i]];
      }
      
      ppcheck_e3 = student_t_rng(2, mu_e3, sigma_e3);
    
      for (i in 1:N) {
         mu_e4[i] = inv_logit(a_e4[site[i], season[i]] + 
                           beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W20[i] +
                           beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                           beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                           theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                           psi_e4[site[i], month[i]]);
      }
    
      p1 = mu_e4 * sigma_e4;
      p2 = (1 - mu_e4) * sigma_e4;
    
      ppcheck_e4 = beta_rng(p1, p2);
    
    }
    
    ")

```

#### Running MCMC algorithm


```{r, eval=FALSE}
file <- paste(getwd(), '/w20_clustering.stan', sep ='')

fit_clusteringW20 <- cmdstan_model(file, compile = T)

mod_clusteringW20_obs <- 
  fit_clusteringW20$sample(
    data = network_metrics_obs2[-3], 
    chains = 3, 
    parallel_chains = 3, 
    iter_sampling = 8e3, 
    iter_warmup = 500, 
    thin = 10, 
    seed = 123
  )

```

```{r, echo=FALSE, eval=TRUE}
mod_clusteringW20_obs <- readRDS('causal_mod_clusteringW20.rds')
```

#### Model diagnostics

```{r, fig.height=15, fig.cap="Rhat values and ess of group-level parameters from the generative model explaining the effect of cumulative rainfall during W20, on network clustering of ant followers birds."}

par(mfrow = c(5, 2), mar = c(4, 4, 1.5, 1))
mod_diagnostics(mod_clusteringW20_obs, 
                mod_clusteringW20_obs$summary(
                  unique(paste('psi_e2[', 
                               network_metrics_obs2[-3]$site,
                               ',',
                               network_metrics_obs2[-3]$month, ']', 
                               sep = '')))) 

mod_diagnostics(mod_clusteringW20_obs, 
                mod_clusteringW20_obs$summary(
                  unique(paste('psi_e3[', 
                               network_metrics_obs2[-3]$site,
                               ',',
                               network_metrics_obs2[-3]$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_clusteringW20_obs, 
                mod_clusteringW20_obs$summary(
                  unique(paste('psi_e4[', 
                               network_metrics_obs2[-3]$site,
                               ',',
                               network_metrics_obs2[-3]$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_clusteringW20_obs, 
                mod_clusteringW20_obs$summary(
                  unique(paste('tau_e4[', 
                               network_metrics_obs2[-3]$year,
                               ',',
                               network_metrics_obs2[-3]$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_clusteringW20_obs, 
                mod_clusteringW20_obs$summary(
                  unique(paste('tau_e2[', 
                               network_metrics_obs2[-3]$year,
                               ',',
                               network_metrics_obs2[-3]$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_clusteringW20_obs, 
                mod_clusteringW20_obs$summary(
                  unique(paste('tau_e3[', 
                               network_metrics_obs2[-3]$year,
                               ',',
                               network_metrics_obs2[-3]$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_clusteringW20_obs, 
                mod_clusteringW20_obs$summary(paste('theta_e4[', 
                                                    1:network_metrics_obs2[-3]$N_day, ']', 
                                                    sep = '')))
mod_diagnostics(mod_clusteringW20_obs, 
                mod_clusteringW20_obs$summary(paste('theta_e3[', 
                                                    1:network_metrics_obs2[-3]$N_day, ']', 
                                                    sep = '')))

mod_diagnostics(mod_clusteringW20_obs, 
                mod_clusteringW20_obs$summary(paste('theta_e2[', 
                                                    1:network_metrics_obs2[-3]$N_day, ']', 
                                                    sep = '')))
par(mfrow = c(1, 1))
```

```{r, fig.cap="Rhat values and ess of slope, intercept, and dispersion parameters  from the generative model explaining the effect of cumulative rainfall during W20, on network clustering of ant followers birds."}
summary_clusteringW20 <- mod_clusteringW20_obs$summary(c('beta_rainW2_e1', 
                                                         'beta_rainW1_e2',
                                                         'beta_rainW1_e3',
                                                         'beta_rainW1_e4',
                                                         'beta_sawrA_e3',
                                                         'beta_sawrA_e4',
                                                         'beta_swarmB_e4', 
                                                         'a_e1', 'a_e2', 
                                                         'a_e3', 'a_e4',
                                                         'sigma_e1', 'sigma_e2', 
                                                         'sigma_e3', 'sigma_e4', 
                                                         'swarm_area',
                                                         'SBiomass_merge',
                                                         'lp__'))


mod_diagnostics(mod_clusteringW20_obs, summary_clusteringW20)
```


```{r, fig.cap= "Posterior predictive checks"}
post_clusteringW20_obs <- mod_clusteringW20_obs$draws(c('beta_rainW2_e1', 
                                                        'beta_rainW1_e2',
                                                        'beta_rainW1_e3',
                                                        'beta_rainW1_e4',
                                                        'beta_sawrA_e3',
                                                        'beta_sawrA_e4',
                                                        'beta_swarmB_e4', 
                                                        'a_e1', 'a_e2', 'a_e3', 'a_e4',
                                                        'sigma_e1', 'sigma_e2', 
                                                        'sigma_e3', 'sigma_e4',
                                                        'swarm_area',
                                                        'SBiomass_merge'
), 
format = 'df')

ppcheck_swarmA <- mod_clusteringW20_obs$draws('ppcheck_e2', format = 'matrix')
ppcheck_swarmB <- mod_clusteringW20_obs$draws('ppcheck_e3', format = 'matrix')
ppcheck_clustering <- mod_clusteringW20_obs$draws('ppcheck_e4', format = 'matrix')
ppcheck_R1 <- mod_clusteringW20_obs$draws('ppcheck_e1', format = 'matrix')

swarm_area <- 
  apply(post_clusteringW20_obs[, grep('swarm_area', 
                                      colnames(post_clusteringW20_obs))], 
        2, mean)

swarm_BM <- 
  apply(post_clusteringW20_obs[, grep('SBiomass_merge', 
                                      colnames(post_clusteringW20_obs))], 
        2, mean)

par(mfrow = c(2, 2), mar = c(4, 4, 1, 1))
plot(density(network_metrics_obs2[-3]$cum_rainfall_W20), 
     main = '', xlab = 'Cum rainfall W5')
for(i in 1:100) lines(density(ppcheck_R1[i, ]), lwd = 0.1)
lines(density(network_metrics_obs2[-3]$cum_rainfall_W20), col = 'red')

plot(density(swarm_area), main = '', xlab = 'Swarm area')
for(i in 1:100) lines(density(ppcheck_swarmA[i, ]), lwd = 0.1)
lines(density(swarm_area), main = '', xlab = 'Swarm area', col = 'red')

plot(density(swarm_BM), main = '', xlab = 'Arthropod biomass')
for(i in 1:100) lines(density(ppcheck_swarmB[i, ]), lwd = 0.1)
lines(density(swarm_BM), col = 'red')

plot(density(network_metrics_obs2[-3]$clustering), 
     main = '', xlab = 'Net size')
for(i in 1:100) lines(density(ppcheck_clustering[i, ]), lwd = 0.1)
lines(density(network_metrics_obs2[-3]$clustering), col = 'red')

post_beta_clusteringW20 <- 
  gather(post_clusteringW20_obs[, grep('beta', colnames(post_clusteringW20_obs))])

post_beta_clusteringW20$key <- as.factor(post_beta_clusteringW20$key)

```

### Window 25 model

#### Stan code

```{r, eval=FALSE}
cat(file = 'w25_clustering.stan', 
    "
    
    functions {
    
      vector scale(vector x) {
        int N = dims(x)[1];
        real mu = mean(x);
        real sigma = sd(x);
        vector[N] scaled_v;
    
        for (i in 1:N) {
          scaled_v[i] = (x[i] - mu) / sigma;
        }
        return scaled_v;
      }  
    
      vector merge_missing(int[] miss_indxex, vector x_obs, vector x_miss) {
                int N = dims(x_obs)[1];
                int N_miss = dims(x_miss)[1];
                vector[N] merge;
                merge = x_obs;
                for (i in 1:N_miss) {
                    merge[miss_indxex[i]] = x_miss[i];
                }
            return merge;
          }
    
    
      matrix cov_GPL2(matrix x,
                      real eta,
                      real rho,
                      real delta) {
                      
                      int N = dims(x)[1];
                      matrix[N, N] K;
    
                      for (i in 1:(N-1)) {
                        K[i, i] = eta + delta;
                        for (j in (i + 1):N) {
                          K[i, j] = eta * exp(-rho * square(x[i, j]));
                          K[j, i] = K[i, j];
                        }
                      }
                      K[N, N] = eta + delta;
                      return K;
                      }
    }
    
    data {
      int N;
      int N_day;
      int N_month;
      int N_season;
      int N_site;
      int N_dim_day;
      int N_naSwarmBio;
      int N_naSwarmINI;
      int N_naSwarmFIN;
      array[N_naSwarmBio] int SwarmB_missindx;
      array[N_naSwarmINI] int SwarmINI_missindx;
      array[N_naSwarmFIN] int SwarmFIN_missindx;
      vector<lower=0,upper=1>[N] clustering;
      array[N] int day;
      array[N] int month;
      array[N] int season;
      array[N] int site;
      vector[N] swarm_biomass;
      vector[N] swarm_area_inital;
      vector[N] swarm_area_final;
      array[N] int cum_rainfall_W30;
      array[N] int cum_rainfall_W25;
      matrix[N_dim_day, N_dim_day] dist_day;
    }
    
    parameters {
      /////////////
      ///////////// imputed variables
      vector[N_naSwarmBio] SBiomass_impute;
      real mu_sb;
      real<lower = 0> sigma_sb;
      vector[N_naSwarmINI] SwarmINI_impute;
      real mu_sbINI;
      real<lower = 0> sigma_sbINI;
      vector[N_naSwarmFIN] SwarmFIN_impute;
      real mu_sbFIN;
      real<lower = 0> sigma_sbFIN;
    
      //////////////
      ///////////// rain_i+n -> rain_i
      real a_e1;
      real beta_rainW2_e1;
      real<lower = 0> sigma_e1;
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm
      matrix[N_site, N_season] a_e2;
      matrix[N_site, N_season] beta_rainW1_e2;
      real<lower = 0> sigma_e2;
    
      vector[N_day] z_theta_e2;
      real<lower = 0> eta_theta_e2;
      real<lower = 0> rho_theta_e2;
    
      matrix[N_season, N_month] z_tau_e2;
      real mu_tau_e2;
      real<lower = 0> sigma_tau_e2;
    
      matrix[N_site, N_month] z_psi_e2;
      real mu_psi_e2;
      real<lower = 0> sigma_psi_e2;
      
      ////////////////////
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      matrix[N_site, N_season] a_e3;
      matrix[N_site, N_season] beta_rainW1_e3;
      matrix[N_site, N_season] beta_sawrA_e3;
      real<lower = 0> sigma_e3;
    
      vector[N_day] z_theta_e3;
      real<lower = 0> eta_theta_e3;
      real<lower = 0> rho_theta_e3;
    
      matrix[N_season, N_month] z_tau_e3;
      real mu_tau_e3;
      real<lower = 0> sigma_tau_e3;
    
      matrix[N_site, N_month] z_psi_e3;
      real mu_psi_e3;
      real<lower = 0> sigma_psi_e3;
      
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      matrix[N_site, N_season] a_e4;
      matrix[N_site, N_season] beta_rainW1_e4;
      matrix[N_site, N_season] beta_sawrA_e4;
      matrix[N_site, N_season] beta_swarmB_e4;
      real<lower = 0> sigma_e4;
    
      vector[N_day] z_theta_e4;
      real<lower = 0> eta_theta_e4;
      real<lower = 0> rho_theta_e4;
    
      matrix[N_season, N_month] z_tau_e4;
      real mu_tau_e4;
      real<lower = 0> sigma_tau_e4;
    
      matrix[N_site, N_month] z_psi_e4;
      real mu_psi_e4;
      real<lower = 0> sigma_psi_e4;
      
      ////////////////////
    
      
    }
    
    transformed parameters{
      
      ///////////////////////
      ///////////////////////// imputed variables
      vector[N] swarm_area;
      vector[N] SBiomass_merge;
      SBiomass_merge = merge_missing(SwarmB_missindx, 
                                     to_vector(swarm_biomass), 
                                     SBiomass_impute);
      vector[N] swarmINI_merge;
      swarmINI_merge = merge_missing(SwarmINI_missindx, 
                                     to_vector(swarm_area_inital), 
                                     SwarmINI_impute);
      vector[N] swarmFIN_merge;
      swarmFIN_merge = merge_missing(SwarmFIN_missindx, 
                                     to_vector(swarm_area_final), 
                                     SwarmFIN_impute);
      swarm_area = (swarmINI_merge + swarmFIN_merge) / 2;
      // swarm_area = scale(swarm_area);
      // SBiomass_merge = scale(SBiomass_merge);
    
      ///////////////////
      ///////////////////////// rain_i -> swarm
      
      vector[N_day] theta_e2;
      matrix[N_dim_day, N_dim_day] sigma_theta_e2;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e2;
      sigma_theta_e2 = cov_GPL2(dist_day, eta_theta_e2, rho_theta_e2, 0.01);
      L_sigma_theta_e2 = cholesky_decompose(sigma_theta_e2);
      theta_e2 = L_sigma_theta_e2 * z_theta_e2;
    
      matrix[N_season, N_month] tau_e2;
      matrix[N_site, N_month] psi_e2;
      tau_e2 = mu_tau_e2 + z_tau_e2 * sigma_tau_e2;
      psi_e2 = mu_psi_e2 + z_psi_e2 * sigma_psi_e2;
      
      ///////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      
      vector[N_day] theta_e3;
      matrix[N_dim_day, N_dim_day] sigma_theta_e3;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e3;
      sigma_theta_e3 = cov_GPL2(dist_day, eta_theta_e3, rho_theta_e3, 0.01);
      L_sigma_theta_e3 = cholesky_decompose(sigma_theta_e3);
      theta_e3 = L_sigma_theta_e3 * z_theta_e3;
    
      matrix[N_season, N_month] tau_e3;
      matrix[N_site, N_month] psi_e3;
      tau_e3 = mu_tau_e3 + z_tau_e3 * sigma_tau_e3;
      psi_e3 = mu_psi_e3 + z_psi_e3 * sigma_psi_e3;
    
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      
      vector[N_day] theta_e4;
      matrix[N_dim_day, N_dim_day] sigma_theta_e4;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e4;
      sigma_theta_e4 = cov_GPL2(dist_day, eta_theta_e4, rho_theta_e4, 0.01);
      L_sigma_theta_e4 = cholesky_decompose(sigma_theta_e4);
      theta_e4 = L_sigma_theta_e4 * z_theta_e4;
    
      matrix[N_season, N_month] tau_e4;
      matrix[N_site, N_month] psi_e4;
      tau_e4 = mu_tau_e4 + z_tau_e4 * sigma_tau_e4;
      psi_e4 = mu_psi_e4 + z_psi_e4 * sigma_psi_e4;
    
      ///////////////////
    }
    
    model {
      vector[N] mu;
      vector[N] p1;
      vector[N] p2;
      ///////////////////////
      /////////////////////// imputed variables
      mu_sb ~ normal(3.5, 1);
      sigma_sb ~ exponential(1);
      SBiomass_merge ~ normal(mu_sb, sigma_sb);
      mu_sbINI ~ normal(3.5, 1);
      sigma_sbINI ~ exponential(1);
      swarmINI_merge ~ normal(mu_sbINI, sigma_sbINI);
      mu_sbFIN ~ normal(3.5, 1);
      sigma_sbFIN ~ exponential(1);
      swarmFIN_merge ~ normal(mu_sbFIN, sigma_sbFIN);
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      vector[N] mu_e1;
      a_e1 ~ normal(0, 1);
      beta_rainW2_e1 ~ normal(0, 0.5);
      sigma_e1 ~ exponential(1);
      
      ///////////////////
      /////////////////// rain_i -> swarm
      to_vector(a_e2) ~ normal(3, 1);
      sigma_e2 ~ exponential(1);
      to_vector(beta_rainW1_e2) ~ normal(0, 0.25);
    
      z_theta_e2 ~ normal(0, 0.5);     
      eta_theta_e2 ~ exponential(3);   
      rho_theta_e2 ~ exponential(0.5); 
      
      to_vector(z_tau_e2) ~ normal(0, 0.5);
      mu_tau_e2 ~ normal(0, 0.5);
      sigma_tau_e2 ~ exponential(1);
    
      to_vector(z_psi_e2) ~ normal(0, 0.5);
      mu_psi_e2 ~ normal(0, 0.5);
      sigma_psi_e2 ~ exponential(1);
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      to_vector(a_e3) ~ normal(2.5, 1);
      sigma_e3 ~ exponential(1);
      to_vector(beta_rainW1_e3) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e3) ~ normal(0, 3);
    
      z_theta_e3 ~ normal(0, 1);
      eta_theta_e3 ~ exponential(3);
      rho_theta_e3 ~ exponential(0.5);
      
      to_vector(z_tau_e3) ~ normal(0, 0.5);
      mu_tau_e3 ~ normal(0, 0.5);
      sigma_tau_e3 ~ exponential(1);
    
      to_vector(z_psi_e3) ~ normal(0, 0.5);
      mu_psi_e3 ~ normal(0, 0.5);
      sigma_psi_e3 ~ exponential(1);
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      to_vector(a_e4) ~ normal(0.25, 0.5);
      sigma_e4 ~ exponential(1);
      to_vector(beta_rainW1_e4) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e4) ~ normal(0, 0.5);
      to_vector(beta_swarmB_e4) ~ normal(0, 0.5);
    
      z_theta_e4 ~ normal(0, 0.5);
      eta_theta_e4 ~ exponential(3);
      rho_theta_e4 ~ exponential(0.5);
      
      to_vector(z_tau_e4) ~ normal(0, 0.5);
      mu_tau_e4 ~ normal(0, 0.5);
      sigma_tau_e4 ~ exponential(1);
    
      to_vector(z_psi_e4) ~ normal(0, 0.5);
      mu_psi_e4 ~ normal(0, 0.5);
      sigma_psi_e4 ~ exponential(1);
      
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      for (i in 1:N) {
        cum_rainfall_W25[i] ~ normal(a_e1 + beta_rainW2_e1 * cum_rainfall_W30[i], 
                                    sigma_e1);
      }
    
      ///////////////////
      /////////////////// rain_i -> swarm
      for (i in 1:N) {
        swarm_area[i] ~ student_t(2,
                                  a_e2[site[i], season[i]] + 
                                  beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W25[i] +
                                  theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                                  psi_e2[site[i], month[i]], 
                                  sigma_e2);
      }
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      for (i in 1:N) {
        SBiomass_merge[i] ~ student_t(2,
                                     a_e3[site[i], season[i]] + 
                                     beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W25[i] +
                                     beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                                     theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                                     psi_e3[site[i], month[i]], 
                                     sigma_e3);
      }
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      for (i in 1:N) {
         mu[i] = inv_logit(a_e4[site[i], season[i]] + 
                           beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W25[i] +
                           beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                           beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                           theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                           psi_e4[site[i], month[i]]);
      }
    
      p1 = mu * sigma_e4;
      p2 = (1 - mu) * sigma_e4;
    
      clustering ~ beta(p1, p2);
    
    }
    
    generated quantities {
      vector[N] mu_e1;
      vector[N] mu_e2;
      vector[N] mu_e3;
      vector[N] mu_e4;
      vector[N] p1;
      vector[N] p2;
      array[N] real ppcheck_e1;
      array[N] real ppcheck_e2;
      array[N] real ppcheck_e3;
      array[N] real ppcheck_e4;
      
      for (i in 1:N) {
        mu_e1[i] = a_e1 + beta_rainW2_e1 * cum_rainfall_W30[i]; 
      }
    
      ppcheck_e1 = normal_rng(mu_e1, sigma_e1);
    
      for (i in 1:N) {
        mu_e2[i] = a_e2[site[i], season[i]] + 
                  beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W25[i] +
                  theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                  psi_e2[site[i], month[i]];
      }
      
      ppcheck_e2 = student_t_rng(2, mu_e2, sigma_e2);
    
    
      for (i in 1:N) {
        mu_e3[i] = a_e3[site[i], season[i]] + 
                   beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W25[i] +
                   beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                   theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                   psi_e3[site[i], month[i]];
      }
      
      ppcheck_e3 = student_t_rng(2, mu_e3, sigma_e3);
    
      for (i in 1:N) {
         mu_e4[i] = inv_logit(a_e4[site[i], season[i]] + 
                           beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W25[i] +
                           beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                           beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                           theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                           psi_e4[site[i], month[i]]);
      }
    
      p1 = mu_e4 * sigma_e4;
      p2 = (1 - mu_e4) * sigma_e4;
    
      ppcheck_e4 = beta_rng(p1, p2);
    
    }
    
    ")
```

#### Running MCMC algorithm


```{r, eval=FALSE}
file <- paste(getwd(), '/w25_clustering.stan', sep ='')

fit_clusteringW25 <- cmdstan_model(file, compile = T)

mod_clusteringW25_obs <- 
  fit_clusteringW25$sample(
    data = network_metrics_obs2[-3], 
    chains = 3, 
    parallel_chains = 3, 
    iter_sampling = 8e3, 
    iter_warmup = 500, 
    thin = 10, 
    seed = 123
  )

```

```{r, echo=FALSE, eval=TRUE}
mod_clusteringW25_obs <- readRDS('causal_mod_clusteringW25.rds')
```

#### Model diagnostics

```{r, fig.height=15, fig.cap="Rhat values and ess of group-level parameters from the generative model explaining the effect of cumulative rainfall during W25, on network clustering of ant followers birds."}

par(mfrow = c(5, 2), mar = c(4, 4, 1.5, 1))
mod_diagnostics(mod_clusteringW25_obs, 
                mod_clusteringW25_obs$summary(
                  unique(paste('psi_e2[', 
                               network_metrics_obs2[-3]$site,
                               ',',
                               network_metrics_obs2[-3]$month, ']', 
                               sep = '')))) 

mod_diagnostics(mod_clusteringW25_obs, 
                mod_clusteringW25_obs$summary(
                  unique(paste('psi_e3[', 
                               network_metrics_obs2[-3]$site,
                               ',',
                               network_metrics_obs2[-3]$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_clusteringW25_obs, 
                mod_clusteringW25_obs$summary(
                  unique(paste('psi_e4[', 
                               network_metrics_obs2[-3]$site,
                               ',',
                               network_metrics_obs2[-3]$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_clusteringW25_obs, 
                mod_clusteringW25_obs$summary(
                  unique(paste('tau_e4[', 
                               network_metrics_obs2[-3]$year,
                               ',',
                               network_metrics_obs2[-3]$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_clusteringW25_obs, 
                mod_clusteringW25_obs$summary(
                  unique(paste('tau_e2[', 
                               network_metrics_obs2[-3]$year,
                               ',',
                               network_metrics_obs2[-3]$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_clusteringW25_obs, 
                mod_clusteringW25_obs$summary(
                  unique(paste('tau_e3[', 
                               network_metrics_obs2[-3]$year,
                               ',',
                               network_metrics_obs2[-3]$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_clusteringW25_obs, 
                mod_clusteringW25_obs$summary(paste('theta_e4[', 
                                                    1:network_metrics_obs2[-3]$N_day, ']', 
                                                    sep = '')))
mod_diagnostics(mod_clusteringW25_obs, 
                mod_clusteringW25_obs$summary(paste('theta_e3[', 
                                                    1:network_metrics_obs2[-3]$N_day, ']', 
                                                    sep = '')))

mod_diagnostics(mod_clusteringW25_obs, 
                mod_clusteringW25_obs$summary(paste('theta_e2[', 
                                                    1:network_metrics_obs2[-3]$N_day, ']', 
                                                    sep = '')))
par(mfrow = c(1, 1))
```

```{r, fig.cap="Rhat values and ess of slope, intercept, and dispersion parameters  from the generative model explaining the effect of cumulative rainfall during W25, on network clustering of ant followers birds."}
summary_clusteringW25 <- mod_clusteringW25_obs$summary(c('beta_rainW2_e1', 
                                                         'beta_rainW1_e2',
                                                         'beta_rainW1_e3',
                                                         'beta_rainW1_e4',
                                                         'beta_sawrA_e3',
                                                         'beta_sawrA_e4',
                                                         'beta_swarmB_e4', 
                                                         'a_e1', 'a_e2', 
                                                         'a_e3', 'a_e4',
                                                         'sigma_e1', 'sigma_e2', 
                                                         'sigma_e3', 'sigma_e4', 
                                                         'swarm_area',
                                                         'SBiomass_merge',
                                                         'lp__'))

mod_diagnostics(mod_clusteringW25_obs, summary_clusteringW25)
```


```{r, fig.cap= "Posterior predictive checks"}
post_clusteringW25_obs <- mod_clusteringW25_obs$draws(c('beta_rainW2_e1', 
                                                        'beta_rainW1_e2',
                                                        'beta_rainW1_e3',
                                                        'beta_rainW1_e4',
                                                        'beta_sawrA_e3',
                                                        'beta_sawrA_e4',
                                                        'beta_swarmB_e4', 
                                                        'a_e1', 'a_e2', 'a_e3', 'a_e4',
                                                        'sigma_e1', 'sigma_e2', 
                                                        'sigma_e3', 'sigma_e4',
                                                        'swarm_area',
                                                        'SBiomass_merge'
), 
format = 'df')

ppcheck_swarmA <- mod_clusteringW25_obs$draws('ppcheck_e2', format = 'matrix')
ppcheck_swarmB <- mod_clusteringW25_obs$draws('ppcheck_e3', format = 'matrix')
ppcheck_clustering <- mod_clusteringW25_obs$draws('ppcheck_e4', format = 'matrix')
ppcheck_R1 <- mod_clusteringW25_obs$draws('ppcheck_e1', format = 'matrix')

swarm_area <- apply(post_clusteringW25_obs[, grep('swarm_area', colnames(post_clusteringW25_obs))], 
                    2, mean)

swarm_BM <- 
  apply(post_clusteringW25_obs[, grep('SBiomass_merge', colnames(post_clusteringW25_obs))], 
        2, mean)

par(mfrow = c(2, 2), mar = c(4, 4, 1, 1))
plot(density(network_metrics_obs2[-3]$cum_rainfall_W25), 
     main = '', xlab = 'Cum rainfall W5')
for(i in 1:100) lines(density(ppcheck_R1[i, ]), lwd = 0.1)
lines(density(network_metrics_obs2[-3]$cum_rainfall_W25), col = 'red')

plot(density(swarm_area), main = '', xlab = 'Swarm area')
for(i in 1:100) lines(density(ppcheck_swarmA[i, ]), lwd = 0.1)
lines(density(swarm_area), main = '', xlab = 'Swarm area', col = 'red')

plot(density(swarm_BM), main = '', xlab = 'Arthropod biomass')
for(i in 1:100) lines(density(ppcheck_swarmB[i, ]), lwd = 0.1)
lines(density(swarm_BM), col = 'red')

plot(density(network_metrics_obs2[-3]$clustering), 
     main = '', xlab = 'Net size')
for(i in 1:100) lines(density(ppcheck_clustering[i, ]), lwd = 0.1)
lines(density(network_metrics_obs2[-3]$clustering), col = 'red')

post_beta_clusteringW25 <- gather(post_clusteringW25_obs[, grep('beta', colnames(post_clusteringW25_obs))])

post_beta_clusteringW25$key <- as.factor(post_beta_clusteringW25$key)
```

## Plotting clustering models

### Main effects

```{r}
t <- paste('W', c(1, seq(5, 25, by = 5)), sep = '')

plot_beta_clustering <- vector('list', length(t))

for (i in seq_along(t)) {
  cadena <- paste('^(.*)beta_clustering(.*)', t[i], '$', sep = '')
  cadena2 <- paste('post_clustering', t[i], '_obs', sep = '')
  df <- get(ls()[grepl(cadena, ls())])
  temp <- get(ls()[grepl(cadena2, ls())])
  
  temp <- temp[, grep('^beta', colnames(temp))]
  
  temp <- apply(temp, 2, function(x) mean(x > 0))
  
  temp <- tibble(p = temp, key = names(temp))
  
  df <- 
    df |> 
    group_by(key) |> 
    transmute(li = quantile(value, 0.025), 
              ls = quantile(value, 0.975), 
              mu = mean(value), 
              window = t[i]) |> 
    unique()
  
  n <- c(1, seq(5, 25, by = 5))[i]
  
  df <- df[!grepl(n + 4, df$key), ]
  
  df <- full_join(df, temp, by = 'key')
  
  plot_beta_clustering[[i]] <- df
  print(i)
}

plot_beta_clustering <- do.call('rbind', plot_beta_clustering)

plot_beta_clustering <- plot_beta_clustering[!grepl('W2', plot_beta_clustering$key),]

plot_beta_clustering$window <- as.factor(plot_beta_clustering$window)

plot_beta_clustering$season <- 
  ifelse(grepl('^(.*)(..,1.)$', plot_beta_clustering$key), 'Dry', 'Wet')

plot_beta_clustering$site <- 
  ifelse(grepl('^(.*)(.1,..)$', plot_beta_clustering$key), '1', 
         ifelse(grepl('^(.*)(.2,..)$', plot_beta_clustering$key), '2', 
                ifelse(grepl('^(.*)(.3,..)$', plot_beta_clustering$key), '3', '4')))

plot_beta_clustering$site <- as.factor(plot_beta_clustering$site)

plot_beta_clustering$site <- 
  factor(plot_beta_clustering$site, 
         labels = levels(network_metrics_INDX$obs_all$site))

plot_beta_clustering$rainfall_level <- 
  factor(plot_beta_clustering$site, 
         labels = c('Medium-high rainfall', 'Medium-low rainfall', 
                    'Low rainfall', 'High rainfall'))

plot_beta_clustering$rainfall_level <- 
  factor(plot_beta_clustering$rainfall_level, 
         levels = c('Low rainfall', 'Medium-low rainfall', 
                    'Medium-high rainfall', 'High rainfall'))


plot_beta_clustering$key <- gsub('^(.*)(.....)$', '\\1', plot_beta_clustering$key)

plot_beta_clusteringWET <- plot_beta_clustering[plot_beta_clustering$season == 'Wet',]

plot_beta_clusteringWET$key <- factor(plot_beta_clusteringWET$key) 

plot_beta_clusteringWET$code <- 
  plot_beta_clusteringWET %$% paste(key, window, rainfall_level, sep = '_')

plot_beta_clusteringWET$key <- 
  factor(plot_beta_clusteringWET$key, 
         levels = 
           c("beta_rainW1_e2", 
             "beta_rainW1_e3",
             "beta_sawrA_e3", 
             "beta_rainW1_e4",
             "beta_sawrA_e4",
             "beta_swarmB_e4"))

plot_effects_clusteringWET <- 
  plot_beta_clusteringWET |> 
  ggplot() +
  geom_vline(xintercept = 0, linetype = 3, col = 'red') +
  geom_errorbar(aes(y = key, xmin = li, 
                    xmax = ls, color = window), 
                width = 0, position = position_dodge(width = 0.8)) +
  geom_point(aes(mu, key, color = window, shape = window), 
             position = position_dodge(width = 0.8)) +
  scale_color_manual(values = c(rep('lightblue3', 2), 
                                'lightblue3', 
                                rep('lightblue3', 3))) +
  facet_wrap(~ rainfall_level, ncol = 1) +
  scale_y_discrete(limits =
                     c(
                       "beta_swarmB_e4",
                       "beta_sawrA_e4",
                       "beta_rainW1_e4",
                       "beta_sawrA_e3",
                       "beta_rainW1_e3",
                       "beta_rainW1_e2"),
                   labels = c(expression('Arthropod biomass' %->% 'Clustering'),
                              expression('Swarm area' %->% 'Clustering'),
                              expression('Rainfall' %->% 'Clustering'),
                              expression('Swarm area' %->% 'Arthropod biomass'),
                              expression('Rainfall' %->% 'Arthropod biomass'),
                              expression('Rainfall' %->% 'Swarm area'))) +
  labs(x = expression(beta), y = 'Effect', title = 'Wet season') +
  theme_bw() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    strip.background = element_blank(),
    panel.border = element_rect(colour = "black", fill = NA),
    legend.title = element_blank(),
    legend.background = element_blank(),
    legend.position = c(0.10, 0.09), 
    legend.box.background = element_blank(), 
    legend.key.size = unit(2.5, 'mm')
  )


plot_beta_clusteringDRY <- plot_beta_clustering[plot_beta_clustering$season == 'Dry',]

plot_beta_clusteringDRY$key <- factor(plot_beta_clusteringDRY$key)

plot_beta_clusteringDRY$key <- 
  factor(plot_beta_clusteringDRY$key, 
         levels = 
           c("beta_rainW1_e2", 
             "beta_rainW1_e3",
             "beta_sawrA_e3", 
             "beta_rainW1_e4",
             "beta_sawrA_e4",
             "beta_swarmB_e4"))

plot_effects_clusteringDRY <- 
  plot_beta_clusteringDRY |> 
  ggplot() +
  geom_vline(xintercept = 0, linetype = 3, col = 'red') +
  geom_errorbar(aes(y = key, xmin = li, 
                    xmax = ls, color = window), 
                width = 0, position = position_dodge(width = 0.8)) +
  geom_point(aes(mu, key, color = window, shape = window), 
             position = position_dodge(width = 0.8)) +
  scale_color_manual(values = c(rep('lightblue3', 2), 
                                'lightblue3', 
                                rep('lightblue3', 3))) +
  facet_wrap(~ rainfall_level, ncol = 1) +
  scale_y_discrete(limits =
                     c(
                       "beta_swarmB_e4",
                       "beta_sawrA_e4",
                       "beta_rainW1_e4",
                       "beta_sawrA_e3",
                       "beta_rainW1_e3",
                       "beta_rainW1_e2"),
                   labels = c(expression('Arthropod biomass' %->% 'Clustering'),
                              expression('Swarm area' %->% 'Clustering'),
                              expression('Rainfall' %->% 'Clustering'),
                              expression('Swarm area' %->% 'Arthropod biomass'),
                              expression('Rainfall' %->% 'Arthropod biomass'),
                              expression('Rainfall' %->% 'Swarm area'))) +
  labs(x = expression(beta), y = NULL, title = 'Dry season') +
  theme_bw() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    strip.background = element_blank(),
    panel.border = element_rect(colour = "black", fill = NA),
    legend.title = element_blank(),
    legend.background = element_blank(),
    legend.position = c(0.10, 0.10), 
    legend.box.background = element_blank(), 
    legend.key.size = unit(2.5, 'mm'),
    axis.text.y = element_blank()
  )

```



```{r, fig.cap="Slope coefficients of causal models explaining the effect of biotic and abiotic factors on the structure of ant-followers interaction networks", fig.height=20, fig.width=15}
plot_effects_clusteringWET +
  plot_effects_clusteringDRY +
  plot_layout(ncol = 2)
```

### Conditional effect of arthropod biomass and network clustering

```{r, warning=FALSE, message=FALSE}
s <- network_metrics_INDX$obs_all
s <- s[, -c(1:3)]

s$season <- 
  ifelse(as.numeric(as.character(s$month)) <= 4, 1, 2)

s <- 
  s %$% 
  aggregate(clustering ~ season + site, FUN = length)

s

s2 <- network_metrics_INDX$obs_all
s2 <- s2[, -c(2, 4)]
s2$obs_ID <- as.factor(s2$obs_ID)

unique(tibble(x = network_metrics_INDX$obs_all$site, 
              x1 = as.numeric(network_metrics_INDX$obs_all$site)))

plot_beta_clustering[plot_beta_clustering$p >= 0.9 |
                       plot_beta_clustering$p <= 0.1, ] |> print(n = 100)

effects_clustering <- 
  plot_beta_clustering[plot_beta_clustering$p >= 0.9 |
                         plot_beta_clustering$p <= 0.1, ]

effects_clustering <- split(effects_clustering, 
                            list(effects_clustering$window, 
                                 effects_clustering$season, 
                                 effects_clustering$site))

effects_clustering <- 
  effects_clustering[unlist(lapply(effects_clustering, function(x) nrow(x) > 0), 
                                                use.names = F)]

# ==== site JUAN ====
for (i in grep('JUAN', names(effects_clustering))) print(effects_clustering[[i]])
# JUAN arthropod biomass --> net size (Dry season)
#  Medium-high rainfall

swarm_area <- 
  sapply(ls()[grep('post_net_size', ls())], FUN = 
           function(x) {
             df <- get(x)
             sa <- df[, grep('swarm_area', colnames(df))]
             apply(sa, 2, mean)
           }, simplify = 'matrix')


swarm_BM <- 
  sapply(ls()[grep('post_clustering', ls())], FUN = 
           function(x) {
             df <- get(x)
             sa <- df[, grep('SBiomass_merge', colnames(df))]
             apply(sa, 2, mean)
           }, simplify = 'matrix')

swarm_BM <- as.vector(apply(swarm_BM, 1, mean))


# counterfactual (medium-high rainfall - JUAN)

sites <- 
  tibble(site = network_metrics_obs2$site, 
         day = network_metrics_obs2$day, 
         month = network_metrics_obs2$month, 
         season = network_metrics_obs2$season)

day <- unique(sites[, c('day', 'site', 'month', 'season')])

day <- day[day$site == 1 & 
             day$season == 1, ]

day2 <- unique(day[, -1])

psi_e4W15MHR <- 
  mod_clusteringW15_obs$draws(
    paste('psi_e4[', 1, ',', day2$month, ']', sep = ''), format = 'matrix') |> 
  apply(1, mean)

tau_e4W15MHR <- 
  mod_clusteringW15_obs$draws(
    paste('tau_e4[', 1, ',', day2$month, ']', sep = ''), format = 'matrix') |> 
  apply(1, mean)

theta_e4W15MHR <- 
  mod_clusteringW15_obs$draws(
    paste('theta_e4[', day$day, ']', sep = ''), format = 'matrix') |> 
  apply(1, mean)


dat <- tibble(x = swarm_BM, 
              season = network_metrics_obs2$season, 
              site = network_metrics_obs2$site, 
              clustering = network_metrics_obs2$clustering)

dat


x_W15_2 <- seq(min(swarm_BM), max(swarm_BM), length.out = 1000)

est_counterclustering <- 
  sapply(x_W15_2, FUN = 
           function(x) {
             
             NS <- 
               post_clusteringW15_obs$`a_e4[1,1]` + 
               post_clusteringW15_obs$`beta_rainW1_e4[1,1]`*0 +
               post_clusteringW15_obs$`beta_sawrA_e4[1,1]`*mean(swarm_area) +
               post_clusteringW15_obs$`beta_swarmB_e4[1,1]`*x +
               psi_e4W15MHR + theta_e4W15MHR + tau_e4W15MHR
             
             NS <- inv_logit(NS)
             
             p1 <- NS * post_clusteringW15_obs$sigma_e4
             p2 <- (1 - NS) * post_clusteringW15_obs$sigma_e4
             
             
             rbeta(length(NS), p1, p2)
             
           })


est_counterclustering_mu <- 
  sapply(x_W15_2, FUN = 
           function(x) {
             
             NS <- 
               post_clusteringW15_obs$`a_e4[1,1]` + 
               post_clusteringW15_obs$`beta_rainW1_e4[1,1]`*0 +
               post_clusteringW15_obs$`beta_sawrA_e4[1,1]`*mean(swarm_area) +
               post_clusteringW15_obs$`beta_swarmB_e4[1,1]`*x +
               psi_e4W15MHR + theta_e4W15MHR + tau_e4W15MHR
             
             inv_logit(NS)
             
           })

est_counterclustering <- 
  do.call('rbind', 
          apply(est_counterclustering, 2, function(x) {
            tibble(li = quantile(x, 0.025), 
                   ls = quantile(x, 0.975))
          }, simplify = 'list'))

est_counterclustering$x <- x_W15_2
est_counterclustering$season <- 'Wet season'
est_counterclustering$mu <- apply(est_counterclustering_mu, 2, mean)


plot_NS_JUAN <- 
ggplot() +
  geom_point(
    data = dat[dat$site == 1 & dat$season == 2,],
    aes(x, clustering), color = 'lightblue3'
  ) + 
  geom_ribbon(
    data = est_counterclustering, 
    aes(x, ymin = li, ymax = ls), alpha = 0.25, 
    fill = 'tan1'
  ) +
  geom_line(
    data = est_counterclustering, aes(x, mu), linewidth = 1, 
    color = 'tan1'
  ) +
  labs(y = 'Clustering', 
       x = 'Arthropod biomass') +
  theme_bw() +
  theme(panel.grid = element_blank(),
        legend.background = element_blank(), 
        legend.position = 'none', 
        axis.text = element_text(size = 14), 
        axis.title = element_text(size = 16))

```

```{r, fig.cap='Conditional plots of main biotic and abiotic predictors affecting clustering of ant-followers interaction networks'}
plot_NS_JUAN
```

$\beta$ parameter of $swarm~biomass \rightarrow clustering$

```{r}
mean(post_clusteringW15_obs$`beta_swarmB_e4[1,1]`)
sd(post_clusteringW15_obs$`beta_swarmB_e4[1,1]`)
mean(post_clusteringW15_obs$`beta_swarmB_e4[1,1]` > 0)
```

### Contrast between seasons

```{r}
posteriors <- ls()[grep('^(post_clustering)(W[0-9]*)', ls())]

df_seasons <- 
  lapply(posteriors, FUN = 
           function(draws) {
             
             p <- get(draws)
             
             w <- gsub('^(.*)(W[0-9]*)(.*)$', '\\2', draws)
             
             post_season <- 
               p[, colnames(p)[grep('^a_e4', colnames(post_net_sizeW1_obs))]] |> 
               gather() 
             
             post_season <- split(post_season, post_season$key)  
             
             sites <- rep(c('Medium-high rainfall', 
                            'Medium-low rainfall', 
                            'low rainfall', 
                            'High rainfall'), each = 2)
             
             season <- rep(c('Dry', 'Wet'), 4)
             
             for (i in seq_along(sites)) {
               post_season[[i]]$site <- sites[[i]]
               post_season[[i]]$season <- season[[i]]
               post_season[[i]] <- post_season[[i]][, -1]
             }
             
             post_season <- do.call('rbind', post_season)
             post_season <- split(post_season, post_season$site)
             
             post_season <- 
               lapply(post_season, FUN = 
                        function(x) {
                          j <- 
                            inv_logit(x[x$season == 'Dry', ]$value) - 
                            inv_logit(x[x$season == 'Wet', ]$value)
                          
                          tibble(site = x$site[1], 
                                 contrast = j, 
                                 p = mean(j > 0))
                        })
             
             post_season <- do.call('rbind', post_season)
             
             post_season$model <- w
             
             post_season
           })

df_seasons <- do.call('rbind', df_seasons)

```

```{r, fig.cap="Contrast of posterior distributions of network clustering during the wet and dry seasons at the sites with different levels of annual rainfall. Each panel shows the contrast for each model at temporal windows of cumulative rainfall: (i.e. from 1, 5, 10, 15, 20 and 25 days after sampling)"}
df_seasons |> 
  ggplot(aes(contrast, fill = site)) +
  geom_density(alpha = 0.5) +
  geom_vline(xintercept = 0, linetype = 3, col = 'red') +
  labs(x = 'Clustering\n (contrast between wet and dry season)') +
  #lims(x = c(-40, 80)) +
  facet_wrap(~model)

```


### Causal effect arthropod biomass and swarm area

```{r, warning=FALSE}
counterfact_clustering_JUAN <- 
  function(.fun = mean, mu = T) {
    
    NS <- 
      post_clusteringW15_obs$`a_e4[1,1]` + 
      post_clusteringW15_obs$`beta_rainW1_e4[1,1]`*0 +
      post_clusteringW15_obs$`beta_sawrA_e4[1,1]`*mean(swarm_area) +
      post_clusteringW15_obs$`beta_swarmB_e4[1,1]`*.fun(swarm_BM) +
      psi_e4W15MHR + theta_e4W15MHR + tau_e4W15MHR
    
    if (mu) {
      inv_logit(NS)
    } else {
      NS <- inv_logit(NS)
      p1 <- NS * post_clusteringW15_obs$sigma_e4
      p2 <- (1 - NS) * post_clusteringW15_obs$sigma_e4
      
      set.seed(123)
      rbeta(length(NS), p1, p2)
    }
  } 

clustering_counterFAC_contrast_JUAN_SWARM <- 
  tibble(mu_val = c(counterfact_clustering_JUAN(max, F) - 
                      counterfact_clustering_JUAN(min, F)), 
         Intervention = 'Causal effect of  \n arthropod biomass')

plot_contrast_clustering_sawrm_JUAN <- 
ggplot() +
  geom_boxplot(data = clustering_counterFAC_contrast_JUAN_SWARM, 
               aes(y = mu_val, x = Intervention), 
               alpha = 0.3, color = 'tan1', 
               fill = 'tan1', width = 0.2) +
  geom_hline(yintercept = 0, linetype = 2, color = 'red') +
  labs(y = 'Contrast between\n interventions (min - max)', 
       x = NULL) +
  theme_bw() +
  theme(panel.grid = element_blank(),
        legend.title = element_blank(), 
        legend.position = c(0.2, 0.8), 
        legend.background = element_blank(), 
        legend.key.size = unit(2, 'mm'), 
        axis.text = element_text(size = 15), 
        axis.title = element_text(size = 16))
```

```{r, fig.cap='Causal effect of intervenig arthropod biomass on network size of ant-followers'}
plot_contrast_clustering_sawrm_JUAN
```

Probability of the causal effect being above zero
```{r}
mean(clustering_counterFAC_contrast_JUAN_SWARM$mu_val > 0)
mean(clustering_counterFAC_contrast_JUAN_SWARM$mu_val)
```

### Non-relevant effects
```{r, warning=FALSE}
# ======= site PLRD =======

for (i in grep('PLRD', names(effects_clustering))) print(effects_clustering[[i]])
# PLRD swarm area --> net size (independent of the window)


# ================== site LIMB =======================


for (i in grep('LIMB', names(effects_clustering))) print(effects_clustering[[i]])
# NO effects



# ======= site SHER =====

for (i in grep('SHER', names(effects_clustering))) print(effects_clustering[[i]])
# effects too variable (most consistent comes from swarm area --> arthropod biomass)

```

## Normalized degree models

### Mathematical version of the models

Each generative model explaining the effect of *cumulative rainfall* during temporal window *i* on *normalized degree* was always conditioned by *cumulative rainfall* during *window i+n*. Therefore, the following model applies for the six models fitted (i.e., W1, W5, W10, W15, W20, W25) to asses when cumulative rainfall has the strongest effect on the normalized degree of the ant-followers interaction network.

\\

The first part of the model has a combination of linear equations integrating the generative model:
  
$$
\begin{aligned}
& Normalized~degree_i \sim \text{Student-T}(\nu =7, \mu_i, ~\sigma_i) \\
& \mu_i = \alpha1_{[season~i, ~SL~rainfall]} + \beta1_{[season~i, ~SL~rainfall]}\times rainfall_{Wi} + \\
&~~~~~~~~~~~~~~~~ \beta2_{[season~i, ~SL~rainfall]} \times ~ swarm~area_{impute~i} + \\ &~~~~~~~~~~~~~~~~ \beta3_{[season~i, ~SL~rainfall]}  ~ arthropod~biomass_{impute~i} +\\
&~~~~~~~~~~~~~~~~ \theta1_{day~i} + \tau1_{[season~i, ~SL~rainfall]} + \psi1_{[site~i, ~month~i]} \\
& Arthropod~biomass_{impute} \sim student~t(\nu = 2, ~\mu1_i, ~\sigma1) \\
& \mu1_i = \alpha3_{[season~i, ~SL~rainfall]} + \beta5_{[season~i, ~SL~rainfall]}\times~rainfall_{Wi} + \\ 
&~~~~~~~~~~~\beta6_{[season~i, ~SL~rainfall]} \times swarm~area_{impute~i} + \\
&~~~~~~~~~~~ \theta2_{day~i} + \tau2_{[season~i, ~SL~rainfall]} + \psi2_{[site~i, ~month~i]} \\
& swarm~area_{impute} \sim student~t(\nu = 2,~\mu2, ~\sigma2) \\
& \mu2_i = \alpha4_{[season~i, ~SL~rainfall]} + \beta7_{[season~i, ~SL~rainfall]} \times rainfall_{Wi} + \theta3_{day~i} + \\
&~~~~~~~~~~~\tau3_{[season~i, ~SL~rainfall]} + \psi3_{[site~i, ~month~i]} \\
& rainfall_{Wi} \sim normal(\mu_i,~ \sigma) \\
& \mu_i = \alpha2 + \beta4\times rainfall_{Wi+n} \\
\end{aligned}
$$
In the second part, we imputed `NA` observations in *swarm area* and *arthropod biomass*
  
  
$$
\begin{aligned}
& swarm~area_{impute} \sim normal(\nu_{imputed1}, \sigma_{imputed1}) \\
& Arthropod~biomass_{impute} \sim normal(\nu_{imputed2}, \sigma_{imputed2}) \\
& \nu_{imputed1}, \nu_{imputed2} \sim normal(3.5, 1) \\
& \sigma_{imputed1}, \sigma_{imputed2} \sim exponential(1)\\
\end{aligned}
$$
  
Then we use a Gaussian process to conduct partial pooling across correlated days. To do so, we used as prior a multivariate normal distribution and a quadratic kernel ($K  = \eta^2 exp(-\rho^2D_{ij}^2) + \delta_{ij} \times 0.01 \\$) to construct the covariance matrix based on distance among sampled days.


$$
\begin{aligned}
& \left(\begin{array}{cc}
\theta1_{day~1} \\
\theta1_{day~2} \\
... \\
\theta1_{day~n} \\
\end{array}\right), \left(\begin{array}{cc}
\theta2_{day~1} \\
\theta2_{day~2} \\
... \\
\theta2_{day~n} \\
\end{array}\right), \left(\begin{array}{cc}
\theta3_{day~1} \\
\theta3_{day~2} \\
... \\
\theta3_{day~n} \\
\end{array}\right) \sim MVNormal \left(\begin{array}{cc}
\begin{bmatrix}
0 \\
0 \\
... \\
0 \\
\end{bmatrix}
K \\
\end{array}\right) \\
& K  = \eta^2 exp(-\rho^2D_{ij}^2) + \delta_{ij} \times 0.01 \\
& \eta \sim exponential(3) \\
& \rho \sim exponential(0.5) \\
& \delta  \sim exponential(2) \\
\end{aligned}
$$
  
Finally, we assign skeptical priors of strong effects and encompassing values within the plausible range of the response variables. We used partial polling to estimate the parameters of group-level effects ($\tau$ and $\psi$ parameters) and used a non-centered parameterization to improve computational efficiency.

$$
\begin{aligned}
& \alpha1_{[season~i, ~SL~rainfall]} \sim normal(0.25, 0.5) \\
& \alpha2 \sim normal(0, 1) \\
& \alpha3_{[season~i, ~SL~rainfall]} \sim normal(2.5, 1) \\
& \alpha4_{[season~i, ~SL~rainfall]} \sim normal(3, 1) \\
& \beta1_{[season~i, ~SL~rainfall]}, \beta2_{[season~i, ~SL~rainfall]}, \beta3_{[season~i, ~SL~rainfall]}, \beta4 \sim normal(0, 0.5)\\
& \beta5_{[season~i, ~SL~rainfall]},\beta6_{[season~i, ~SL~rainfall]}, \beta7_{[season~i, ~SL~rainfall]} \sim normal(0, 0.5)\\
& z_{\tau1}, z_{\tau2}, z_{\tau3} \sim normal(0, 0.5) \\
& \mu_{\tau1}, \mu_{\tau2}, \mu_{\tau3} \sim normal(0, 0.5) \\
& \sigma_{\tau1}, \sigma_{\tau2}, \sigma_{\tau3} \sim exponential(1) \\
& z_{\psi1}, z_{\psi2}, z_{\psi3} \sim normal(0, 0.5) \\
& \mu_{\psi1}, \mu_{\psi2}, \mu_{\psi3} \sim normal(0, 0.5) \\
& \sigma_{\psi1}, \sigma_{\psi2}, \sigma_{\psi3} \sim exponential(1) \\
& \tau1_{[season~i, ~SL~rainfall]} = \mu_{\tau1} + z_{\tau1} \times \sigma_{\tau1} \\
& \tau2_{[season~i, ~SL~rainfall]} = \mu_{\tau2} + z_{\tau2} \times \sigma_{\tau2} \\
& \tau3_{[season~i, ~SL~rainfall]} = \mu_{\tau3} + z_{\tau3} \times \sigma_{\tau3} \\
& \psi1_{[site~i, month~i]} = {\mu_\psi1} + z_{\psi1} \times \sigma_{\psi1} \\
& \psi2_{[site~i, month~i]} = {\mu_\psi2} + z_{\psi2} \times \sigma_{\psi2} \\
& \psi3_{[site~i, month~i]} = {\mu_\psi3} + z_{\psi3} \times \sigma_{\psi3} \\
\end{aligned}
$$
  
\newpage

Putting it all together, we have:
  
$$
{\tiny
\begin{aligned}
& Normalized~degree_i \sim \text{Student-T}(\nu=7, \mu_i, ~\sigma_i) \\
& \mu_i = \alpha1_{[season~i, ~total~rainfall]} + \beta1_{[season~i, ~total~rainfall]}\times rainfall_{Wi} + \\
&~~~~~~~~~~~~~~~~ \beta2_{[season~i, ~total~rainfall]} \times ~ swarm~area_{impute~i} + \\ &~~~~~~~~~~~~~~~~ \beta3_{[season~i, ~total~rainfall]}  ~ arthropod~biomass_{impute~i} +\\
&~~~~~~~~~~~~~~~~ \theta1_{day~i} + \tau1_{[[season~i, ~total~rainfall]]} + \psi1_{[site~i, ~month~i]} \\
& Arthropod~biomass_{impute} \sim student~t(\nu = 2, ~\mu1_i, ~\sigma1) \\
& \mu1_i = \alpha3_{[season~i, ~total~rainfall]} + \beta5_{[season~i, ~total~rainfall]}\times~rainfall_{Wi} + \\ 
&~~~~~~~~~~~\beta6_{[season~i, ~total~rainfall]} \times swarm~area_{impute~i} + \\
&~~~~~~~~~~~ \theta2_{day~i} + \tau2_{[season~i, ~total~rainfall]} + \psi2_{[site~i, ~month~i]} \\
& swarm~area_{impute} \sim student~t(\nu = 2,~\mu2, ~\sigma2) \\
& \mu2_i = \alpha4_{[season~i, ~total~rainfall]} + \beta7_{[season~i, ~total~rainfall]} \times rainfall_{Wi} + \theta3_{day~i} + \\
&~~~~~~~~~~~\tau3_{[season~i, ~total~rainfall]} + \psi3_{[site~i, ~month~i]} \\
& rainfall_{Wi} \sim normal(\mu_i,~ \sigma) \\
& \mu_i = \alpha2 + \beta4\times rainfall_{Wi+n} \\
& swarm~area_{impute} \sim normal(\nu_{imputed1}, \sigma_{imputed1}) \\
& Arthropod~biomass_{impute} \sim normal(\nu_{imputed2}, \sigma_{imputed2}) \\
& \nu_{imputed1}, \nu_{imputed2} \sim normal(3.5, 1) \\
& \sigma_{imputed1}, \sigma_{imputed2} \sim exponential(1)\\
& \left(\begin{array}{cc}
\theta1_{day~1} \\
\theta1_{day~2} \\
... \\
\theta1_{day~n} \\
\end{array}\right), \left(\begin{array}{cc}
\theta2_{day~1} \\
\theta2_{day~2} \\
... \\
\theta2_{day~n} \\
\end{array}\right), \left(\begin{array}{cc}
\theta3_{day~1} \\
\theta3_{day~2} \\
... \\
\theta3_{day~n} \\
\end{array}\right) \sim MVNormal \left(\begin{array}{cc}
                                                                                            \begin{bmatrix}
0 \\
0 \\
... \\
0 \\
\end{bmatrix}
K \\
\end{array}\right) \\
& K  = \eta^2 exp(-\rho^2D_{ij}^2) + \delta_{ij} \times 0.01 \\
& \eta \sim exponential(3) \\
& \rho \sim exponential(0.5) \\
& \delta  \sim exponential(2) \\
& \alpha1_{[season~i, ~SL~rainfall]} \sim normal(0.25, 0.5) \\
& \alpha2 \sim normal(0, 1) \\
& \alpha3_{[season~i, ~SL~rainfall]} \sim normal(2.5, 1) \\
& \alpha4_{[season~i, ~SL~rainfall]} \sim normal(3, 1) \\
& \beta1_{[season~i, ~SL~rainfall]}, \beta2_{[season~i, ~SL~rainfall]}, \beta3_{[season~i, ~SL~rainfall]}, \beta4 \sim normal(0, 0.5)\\
& \beta5_{[season~i, ~SL~rainfall]},\beta6_{[season~i, ~SL~rainfall]}, \beta7_{[season~i, ~SL~rainfall]} \sim normal(0, 0.5)\\
& z_{\tau1}, z_{\tau2}, z_{\tau3} \sim normal(0, 0.5) \\
& \mu_{\tau1}, \mu_{\tau2}, \mu_{\tau3} \sim normal(0, 0.5) \\
& \sigma_{\tau1}, \sigma_{\tau2}, \sigma_{\tau3} \sim exponential(1) \\
& z_{\psi1}, z_{\psi2}, z_{\psi3} \sim normal(0, 0.5) \\
& \mu_{\psi1}, \mu_{\psi2}, \mu_{\psi3} \sim normal(0, 0.5) \\
& \sigma_{\psi1}, \sigma_{\psi2}, \sigma_{\psi3} \sim exponential(1) \\
& \tau1_{[season~i, ~SL~rainfall]} = \mu_{\tau1} + z_{\tau1} \times \sigma_{\tau1} \\
& \tau2_{[season~i, ~SL~rainfall]} = \mu_{\tau2} + z_{\tau2} \times \sigma_{\tau2} \\
& \tau3_{[season~i, ~SL~rainfall]} = \mu_{\tau3} + z_{\tau3} \times \sigma_{\tau3} \\
& \psi1_{[site~i, month~i]} = {\mu_\psi1} + z_{\psi1} \times \sigma_{\psi1} \\
& \psi2_{[site~i, month~i]} = {\mu_\psi2} + z_{\psi2} \times \sigma_{\psi2} \\
& \psi3_{[site~i, month~i]} = {\mu_\psi3} + z_{\psi3} \times \sigma_{\psi3} \\
\end{aligned}}
$$
  
### Window 1 model
  
#### Stan code

```{r}

temp_data <- readRDS('tot_for_norm_degree.rds')

str(temp_data)

temp_data$norm_degree <- 
  sapply(temp_data$norm_degree, FUN = 
           function(x) {
             if(x >= 1) 0.999
             else x
           })
names(temp_data)
summary(temp_data$norm_degree)

temp_data$norm_degree2 <- temp_data$norm_degree

temp_data$norm_degree <- as.vector(scale(temp_data$norm_degree))

####

network_metrics_obs2$norm_degree <- 
  sapply(network_metrics_obs2$norm_degree, FUN = 
           function(x) {
             if(x >= 1) 0.999
             else x
           })
```
  

```{r, eval=FALSE}
cat(file = 'w1_norm_degree.stan', 
    "
    
    functions {
    
      vector scale(vector x) {
        int N = dims(x)[1];
        real mu = mean(x);
        real sigma = sd(x);
        vector[N] scaled_v;
    
        for (i in 1:N) {
          scaled_v[i] = (x[i] - mu) / sigma;
        }
        return scaled_v;
      }  
    
      vector merge_missing(array[] int miss_indxex, vector x_obs, vector x_miss) {
                int N = dims(x_obs)[1];
                int N_miss = dims(x_miss)[1];
                vector[N] merge;
                merge = x_obs;
                for (i in 1:N_miss) {
                    merge[miss_indxex[i]] = x_miss[i];
                }
            return merge;
          }
    
    
      matrix cov_GPL2(matrix x,
                      real eta,
                      real rho,
                      real delta) {
                      
                      int N = dims(x)[1];
                      matrix[N, N] K;
    
                      for (i in 1:(N-1)) {
                        K[i, i] = eta + delta;
                        for (j in (i + 1):N) {
                          K[i, j] = eta * exp(-rho * square(x[i, j]));
                          K[j, i] = K[i, j];
                        }
                      }
                      K[N, N] = eta + delta;
                      return K;
                      }
    }
    
    data {
      int N;
      int N_day;
      int N_month;
      int N_season;
      int N_site;
      int N_dim_day;
      int N_naSwarmBio;
      int N_naSwarmINI;
      int N_naSwarmFIN;
      array[N_naSwarmBio] int SwarmB_missindx;
      array[N_naSwarmINI] int SwarmINI_missindx;
      array[N_naSwarmFIN] int SwarmFIN_missindx;
      vector[N] norm_degree;
      array[N] int day;
      array[N] int month;
      array[N] int season;
      array[N] int site;
      vector[N] swarm_biomass;
      vector[N] swarm_area_inital;
      vector[N] swarm_area_final;
      array[N] int cum_rainfall_W1;
      array[N] int cum_rainfall_W5;
      matrix[N_dim_day, N_dim_day] dist_day;
    }
    
    parameters {
      /////////////
      ///////////// imputed variables
      vector[N_naSwarmBio] SBiomass_impute;
      real mu_sb;
      real<lower = 0> sigma_sb;
      vector[N_naSwarmINI] SwarmINI_impute;
      real mu_sbINI;
      real<lower = 0> sigma_sbINI;
      vector[N_naSwarmFIN] SwarmFIN_impute;
      real mu_sbFIN;
      real<lower = 0> sigma_sbFIN;
    
      //////////////
      ///////////// rain_i+n -> rain_i
      real a_e1;
      real beta_rainW2_e1;
      real<lower = 0> sigma_e1;
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm
      matrix[N_site, N_season] a_e2;
      matrix[N_site, N_season] beta_rainW1_e2;
      real<lower = 0> sigma_e2;
    
      vector[N_day] z_theta_e2;
      real<lower = 0> eta_theta_e2;
      real<lower = 0> rho_theta_e2;
    
      matrix[N_season, N_month] z_tau_e2;
      real mu_tau_e2;
      real<lower = 0> sigma_tau_e2;
    
      matrix[N_site, N_month] z_psi_e2;
      real mu_psi_e2;
      real<lower = 0> sigma_psi_e2;
      
      ////////////////////
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      matrix[N_site, N_season] a_e3;
      matrix[N_site, N_season] beta_rainW1_e3;
      matrix[N_site, N_season] beta_sawrA_e3;
      real<lower = 0> sigma_e3;
    
      vector[N_day] z_theta_e3;
      real<lower = 0> eta_theta_e3;
      real<lower = 0> rho_theta_e3;
    
      matrix[N_season, N_month] z_tau_e3;
      real mu_tau_e3;
      real<lower = 0> sigma_tau_e3;
    
      matrix[N_site, N_month] z_psi_e3;
      real mu_psi_e3;
      real<lower = 0> sigma_psi_e3;
      
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      matrix[N_site, N_season] a_e4;
      matrix[N_site, N_season] beta_rainW1_e4;
      matrix[N_site, N_season] beta_sawrA_e4;
      matrix[N_site, N_season] beta_swarmB_e4;
      real<lower = 0> sigma_e4;
    
      vector[N_day] z_theta_e4;
      real<lower = 0> eta_theta_e4;
      real<lower = 0> rho_theta_e4;
    
      matrix[N_season, N_month] z_tau_e4;
      real mu_tau_e4;
      real<lower = 0> sigma_tau_e4;
    
      matrix[N_site, N_month] z_psi_e4;
      real mu_psi_e4;
      real<lower = 0> sigma_psi_e4;
      
      ////////////////////
    
      
    }
    
    transformed parameters{
      
      ///////////////////////
      ///////////////////////// imputed variables
      vector[N] swarm_area;
      vector[N] SBiomass_merge;
      SBiomass_merge = merge_missing(SwarmB_missindx, 
                                     to_vector(swarm_biomass), 
                                     SBiomass_impute);
      vector[N] swarmINI_merge;
      swarmINI_merge = merge_missing(SwarmINI_missindx, 
                                     to_vector(swarm_area_inital), 
                                     SwarmINI_impute);
      vector[N] swarmFIN_merge;
      swarmFIN_merge = merge_missing(SwarmFIN_missindx, 
                                     to_vector(swarm_area_final), 
                                     SwarmFIN_impute);
      swarm_area = (swarmINI_merge + swarmFIN_merge) / 2;
      // swarm_area = scale(swarm_area);
      // SBiomass_merge = scale(SBiomass_merge);
    
      ///////////////////
      ///////////////////////// rain_i -> swarm
      
      vector[N_day] theta_e2;
      matrix[N_dim_day, N_dim_day] sigma_theta_e2;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e2;
      sigma_theta_e2 = cov_GPL2(dist_day, eta_theta_e2, rho_theta_e2, 0.01);
      L_sigma_theta_e2 = cholesky_decompose(sigma_theta_e2);
      theta_e2 = L_sigma_theta_e2 * z_theta_e2;
    
      matrix[N_season, N_month] tau_e2;
      matrix[N_site, N_month] psi_e2;
      tau_e2 = mu_tau_e2 + z_tau_e2 * sigma_tau_e2;
      psi_e2 = mu_psi_e2 + z_psi_e2 * sigma_psi_e2;
      
      ///////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      
      vector[N_day] theta_e3;
      matrix[N_dim_day, N_dim_day] sigma_theta_e3;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e3;
      sigma_theta_e3 = cov_GPL2(dist_day, eta_theta_e3, rho_theta_e3, 0.01);
      L_sigma_theta_e3 = cholesky_decompose(sigma_theta_e3);
      theta_e3 = L_sigma_theta_e3 * z_theta_e3;
    
      matrix[N_season, N_month] tau_e3;
      matrix[N_site, N_month] psi_e3;
      tau_e3 = mu_tau_e3 + z_tau_e3 * sigma_tau_e3;
      psi_e3 = mu_psi_e3 + z_psi_e3 * sigma_psi_e3;
    
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      
      vector[N_day] theta_e4;
      matrix[N_dim_day, N_dim_day] sigma_theta_e4;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e4;
      sigma_theta_e4 = cov_GPL2(dist_day, eta_theta_e4, rho_theta_e4, 0.01);
      L_sigma_theta_e4 = cholesky_decompose(sigma_theta_e4);
      theta_e4 = L_sigma_theta_e4 * z_theta_e4;
    
      matrix[N_season, N_month] tau_e4;
      matrix[N_site, N_month] psi_e4;
      tau_e4 = mu_tau_e4 + z_tau_e4 * sigma_tau_e4;
      psi_e4 = mu_psi_e4 + z_psi_e4 * sigma_psi_e4;
    
      ///////////////////
    }
    
    model {
      vector[N] mu;
      vector[N] p1;
      vector[N] p2;
      ///////////////////////
      /////////////////////// imputed variables
      mu_sb ~ normal(3.5, 1);
      sigma_sb ~ exponential(1);
      SBiomass_merge ~ normal(mu_sb, sigma_sb);
      mu_sbINI ~ normal(3.5, 1);
      sigma_sbINI ~ exponential(1);
      swarmINI_merge ~ normal(mu_sbINI, sigma_sbINI);
      mu_sbFIN ~ normal(3.5, 1);
      sigma_sbFIN ~ exponential(1);
      swarmFIN_merge ~ normal(mu_sbFIN, sigma_sbFIN);
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      vector[N] mu_e1;
      a_e1 ~ normal(0, 1);
      beta_rainW2_e1 ~ normal(0, 0.5);
      sigma_e1 ~ exponential(1);
      
      ///////////////////
      /////////////////// rain_i -> swarm
      to_vector(a_e2) ~ normal(3, 1);
      sigma_e2 ~ exponential(1);
      to_vector(beta_rainW1_e2) ~ normal(0, 0.25);
    
      z_theta_e2 ~ normal(0, 0.5);     
      eta_theta_e2 ~ exponential(3);   
      rho_theta_e2 ~ exponential(0.5); 
      
      to_vector(z_tau_e2) ~ normal(0, 0.5);
      mu_tau_e2 ~ normal(0, 0.5);
      sigma_tau_e2 ~ exponential(1);
    
      to_vector(z_psi_e2) ~ normal(0, 0.5);
      mu_psi_e2 ~ normal(0, 0.5);
      sigma_psi_e2 ~ exponential(1);
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      to_vector(a_e3) ~ normal(2.5, 1);
      sigma_e3 ~ exponential(1);
      to_vector(beta_rainW1_e3) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e3) ~ normal(0, 3);
    
      z_theta_e3 ~ normal(0, 1);
      eta_theta_e3 ~ exponential(3);
      rho_theta_e3 ~ exponential(0.5);
      
      to_vector(z_tau_e3) ~ normal(0, 0.5);
      mu_tau_e3 ~ normal(0, 0.5);
      sigma_tau_e3 ~ exponential(1);
    
      to_vector(z_psi_e3) ~ normal(0, 0.5);
      mu_psi_e3 ~ normal(0, 0.5);
      sigma_psi_e3 ~ exponential(1);
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      to_vector(a_e4) ~ normal(0, 0.5);
      sigma_e4 ~ exponential(1);
      to_vector(beta_rainW1_e4) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e4) ~ normal(0, 0.5);
      to_vector(beta_swarmB_e4) ~ normal(0, 0.5);
    
      z_theta_e4 ~ normal(0, 0.5);
      eta_theta_e4 ~ exponential(3);
      rho_theta_e4 ~ exponential(0.5);
      
      to_vector(z_tau_e4) ~ normal(0, 0.5);
      mu_tau_e4 ~ normal(0, 0.5);
      sigma_tau_e4 ~ exponential(1);
    
      to_vector(z_psi_e4) ~ normal(0, 0.5);
      mu_psi_e4 ~ normal(0, 0.5);
      sigma_psi_e4 ~ exponential(1);
      
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      for (i in 1:N) {
        cum_rainfall_W1[i] ~ normal(a_e1 + beta_rainW2_e1 * cum_rainfall_W5[i], 
                                    sigma_e1);
      }
    
      ///////////////////
      /////////////////// rain_i -> swarm
      for (i in 1:N) {
        swarm_area[i] ~ student_t(2,
                                  a_e2[site[i], season[i]] + 
                                  beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W1[i] +
                                  theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                                  psi_e2[site[i], month[i]], 
                                  sigma_e2);
      }
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      for (i in 1:N) {
        SBiomass_merge[i] ~ student_t(2,
                                     a_e3[site[i], season[i]] + 
                                     beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W1[i] +
                                     beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                                     theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                                     psi_e3[site[i], month[i]], 
                                     sigma_e3);
      }
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      for (i in 1:N) {
         norm_degree[i] ~ student_t(7, a_e4[site[i], season[i]] + 
                           beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W1[i] +
                           beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                           beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                           theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                           psi_e4[site[i], month[i]], sigma_e4);
      }
    
      //p1 = mu * sigma_e4;
      //p2 = (1 - mu) * sigma_e4;
    
      //norm_degree ~ beta(p1, p2);
    
    }
    
    generated quantities {
      vector[N] mu_e1;
      vector[N] mu_e2;
      vector[N] mu_e3;
      vector[N] mu_e4;
      vector[N] p1;
      vector[N] p2;
      array[N] real ppcheck_e1;
      array[N] real ppcheck_e2;
      array[N] real ppcheck_e3;
      array[N] real ppcheck_e4;
      
      for (i in 1:N) {
        mu_e1[i] = a_e1 + beta_rainW2_e1 * cum_rainfall_W5[i]; 
      }
    
      ppcheck_e1 = normal_rng(mu_e1, sigma_e1);
    
      for (i in 1:N) {
        mu_e2[i] = a_e2[site[i], season[i]] + 
                   beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W1[i] +
                   theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                   psi_e2[site[i], month[i]];
      }
      
      ppcheck_e2 = student_t_rng(2, mu_e2, sigma_e2);
    
    
      for (i in 1:N) {
        mu_e3[i] = a_e3[site[i], season[i]] + 
                   beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W1[i] +
                   beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                   theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                   psi_e3[site[i], month[i]];
      }
      
      ppcheck_e3 = student_t_rng(2, mu_e3, sigma_e3);
    
      for (i in 1:N) {
         mu_e4[i] = a_e4[site[i], season[i]] + 
                              beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W1[i] +
                              beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                              beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                              theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                              psi_e4[site[i], month[i]];
      }
    
      //p1 = mu_e4 * sigma_e4;
      //p2 = (1 - mu_e4) * sigma_e4;
    
      ppcheck_e4 = student_t_rng(7, mu_e4, sigma_e4);
    
    }
    
    ")
```


#### Running MCMC algorith

```{r, eval=FALSE}
file <- paste(getwd(), '/w1_norm_degree.stan', sep ='')

fit_norm_degreeW1 <- cmdstan_model(file, compile = T)

mod_norm_degreeW1_obs <- 
  fit_norm_degreeW1$sample(
    data = temp_data[-3], 
    chains = 3, 
    parallel_chains = 3, 
    iter_sampling = 8e3, 
    iter_warmup = 500, 
    thin = 10, 
    seed = 123
  )
```


```{r, echo=FALSE}
mod_norm_degreeW1_obs <- readRDS('causal_mod_norm_degreeW1_2.rds')
```

#### Model diagnostic

```{r, fig.height=15, fig.cap="Rhat values and ess of group-level parameters from the generative model explaining the effect of cumulative rainfall during W1, on network normalized degree of ant followers birds."}


par(mfrow = c(5, 2), mar = c(4, 4, 1.5, 1))
mod_diagnostics(mod_norm_degreeW1_obs, 
                mod_norm_degreeW1_obs$summary(
                  unique(paste('psi_e2[', 
                               temp_data$site,
                               ',',
                               temp_data$month, ']', 
                               sep = '')))) 

mod_diagnostics(mod_norm_degreeW1_obs, 
                mod_norm_degreeW1_obs$summary(
                  unique(paste('psi_e3[', 
                               temp_data$site,
                               ',',
                               temp_data$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_norm_degreeW1_obs, 
                mod_norm_degreeW1_obs$summary(
                  unique(paste('psi_e4[', 
                               temp_data$site,
                               ',',
                               temp_data$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_norm_degreeW1_obs, 
                mod_norm_degreeW1_obs$summary(
                  unique(paste('tau_e4[', 
                               temp_data$year,
                               ',',
                               temp_data$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_norm_degreeW1_obs, 
                mod_norm_degreeW1_obs$summary(
                  unique(paste('tau_e2[', 
                               temp_data$year,
                               ',',
                               temp_data$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_norm_degreeW1_obs, 
                mod_norm_degreeW1_obs$summary(
                  unique(paste('tau_e3[', 
                               temp_data$year,
                               ',',
                               temp_data$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_norm_degreeW1_obs, 
                mod_norm_degreeW1_obs$summary(paste('theta_e4[', 
                                                    unique(temp_data$day), ']', 
                                                    sep = '')))
mod_diagnostics(mod_norm_degreeW1_obs, 
                mod_norm_degreeW1_obs$summary(paste('theta_e3[', 
                                                    unique(temp_data$day), ']', 
                                                    sep = '')))

mod_diagnostics(mod_norm_degreeW1_obs, 
                mod_norm_degreeW1_obs$summary(paste('theta_e2[', 
                                                    unique(temp_data$day), ']', 
                                                    sep = '')))
par(mfrow = c(1, 1))
```


```{r, fig.cap="Rhat values and ess of slope, intercept, and dispersion parameters  from the generative model explaining the effect of cumulative rainfall during W1, on network normalized degree of ant followers birds."}
summary_norm_degreeW1 <- mod_norm_degreeW1_obs$summary(c('beta_rainW2_e1', 
                                                         'beta_rainW1_e2',
                                                         'beta_rainW1_e3',
                                                         'beta_rainW1_e4',
                                                         'beta_sawrA_e3',
                                                         'beta_sawrA_e4',
                                                         'beta_swarmB_e4', 
                                                         'a_e1', 'a_e2', 
                                                         'a_e3', 'a_e4',
                                                         'sigma_e1', 'sigma_e2', 
                                                         'sigma_e3', 'sigma_e4', 
                                                         'swarm_area',
                                                         'SBiomass_merge',
                                                         'lp__'))

mod_diagnostics(mod_norm_degreeW1_obs, summary_norm_degreeW1)

```

```{r, fig.cap= "Posterior predictive checks of cumulative rainfall W1"}
post_norm_degreeW1_obs <- mod_norm_degreeW1_obs$draws(c('beta_rainW2_e1', 
                                                        'beta_rainW1_e2',
                                                        'beta_rainW1_e3',
                                                        'beta_rainW1_e4',
                                                        'beta_sawrA_e3',
                                                        'beta_sawrA_e4',
                                                        'beta_swarmB_e4', 
                                                        'a_e1', 'a_e2', 'a_e3', 'a_e4',
                                                        'sigma_e1', 'sigma_e2', 
                                                        'sigma_e3', 'sigma_e4',
                                                        'swarm_area',
                                                        'SBiomass_merge'
), 
format = 'df')

swarm_area <- apply(post_norm_degreeW1_obs[, grep('swarm_area', colnames(post_norm_degreeW1_obs))], 
                    2, mean)

swarm_BM <- 
  apply(post_norm_degreeW1_obs[, grep('SBiomass_merge', colnames(post_norm_degreeW1_obs))], 
        2, mean)

ppcheck_swarmA <- mod_norm_degreeW1_obs$draws('ppcheck_e2', format = 'matrix')
ppcheck_swarmB <- mod_norm_degreeW1_obs$draws('ppcheck_e3', format = 'matrix')
ppcheck_norm_degree <- mod_norm_degreeW1_obs$draws('ppcheck_e4', format = 'matrix')
ppcheck_R1 <- mod_norm_degreeW1_obs$draws('ppcheck_e1', format = 'matrix')


par(mfrow = c(2, 2), mar = c(4, 4, 1, 1))
plot(density(temp_data[-3]$cum_rainfall_W1), 
     main = '', xlab = 'Cum rainfall W1')
for(i in 1:100) lines(density(ppcheck_R1[i, ]), lwd = 0.1)
lines(density(temp_data[-3]$cum_rainfall_W1), col = 'red')

plot(density(swarm_area), main = '', xlab = 'Swarm area')
for(i in 1:100) lines(density(ppcheck_swarmA[i, ]), lwd = 0.1)
lines(density(swarm_area), col = 'red')

plot(density(swarm_BM), main = '', xlab = 'Arthropod biomass')
for(i in 1:100) lines(density(ppcheck_swarmB[i, ]), lwd = 0.1)
lines(density(swarm_BM), col = 'red')

plot(density(temp_data[-3]$norm_degree), 
     main = '', xlab = 'Net size')
for(i in 1:100) lines(density(ppcheck_norm_degree[i, ]), lwd = 0.1)
lines(density(temp_data[-3]$norm_degree), col = 'red')

post_beta_norm_degreeW1 <- gather(post_norm_degreeW1_obs[, grep('beta', colnames(post_norm_degreeW1_obs))])

post_beta_norm_degreeW1$key <- as.factor(post_beta_norm_degreeW1$key)

```

### Window 5 model

#### Stan code

```{r, eval=FALSE}
cat(file = 'w5_norm_degree.stan', 
    "
    
    functions {
    
      vector scale(vector x) {
        int N = dims(x)[1];
        real mu = mean(x);
        real sigma = sd(x);
        vector[N] scaled_v;
    
        for (i in 1:N) {
          scaled_v[i] = (x[i] - mu) / sigma;
        }
        return scaled_v;
      }  
    
      vector merge_missing(array[] int miss_indxex, vector x_obs, vector x_miss) {
                int N = dims(x_obs)[1];
                int N_miss = dims(x_miss)[1];
                vector[N] merge;
                merge = x_obs;
                for (i in 1:N_miss) {
                    merge[miss_indxex[i]] = x_miss[i];
                }
            return merge;
          }
    
    
      matrix cov_GPL2(matrix x,
                      real eta,
                      real rho,
                      real delta) {
                      
                      int N = dims(x)[1];
                      matrix[N, N] K;
    
                      for (i in 1:(N-1)) {
                        K[i, i] = eta + delta;
                        for (j in (i + 1):N) {
                          K[i, j] = eta * exp(-rho * square(x[i, j]));
                          K[j, i] = K[i, j];
                        }
                      }
                      K[N, N] = eta + delta;
                      return K;
                      }
    }
    
    data {
      int N;
      int N_day;
      int N_month;
      int N_season;
      int N_site;
      int N_dim_day;
      int N_naSwarmBio;
      int N_naSwarmINI;
      int N_naSwarmFIN;
      array[N_naSwarmBio] int SwarmB_missindx;
      array[N_naSwarmINI] int SwarmINI_missindx;
      array[N_naSwarmFIN] int SwarmFIN_missindx;
      vector[N] norm_degree;
      array[N] int day;
      array[N] int month;
      array[N] int season;
      array[N] int site;
      vector[N] swarm_biomass;
      vector[N] swarm_area_inital;
      vector[N] swarm_area_final;
      array[N] int cum_rainfall_W10;
      array[N] int cum_rainfall_W5;
      matrix[N_dim_day, N_dim_day] dist_day;
    }
    
    parameters {
      /////////////
      ///////////// imputed variables
      vector[N_naSwarmBio] SBiomass_impute;
      real mu_sb;
      real<lower = 0> sigma_sb;
      vector[N_naSwarmINI] SwarmINI_impute;
      real mu_sbINI;
      real<lower = 0> sigma_sbINI;
      vector[N_naSwarmFIN] SwarmFIN_impute;
      real mu_sbFIN;
      real<lower = 0> sigma_sbFIN;
    
      //////////////
      ///////////// rain_i+n -> rain_i
      real a_e1;
      real beta_rainW2_e1;
      real<lower = 0> sigma_e1;
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm
      matrix[N_site, N_season] a_e2;
      matrix[N_site, N_season] beta_rainW1_e2;
      real<lower = 0> sigma_e2;
    
      vector[N_day] z_theta_e2;
      real<lower = 0> eta_theta_e2;
      real<lower = 0> rho_theta_e2;
    
      matrix[N_season, N_month] z_tau_e2;
      real mu_tau_e2;
      real<lower = 0> sigma_tau_e2;
    
      matrix[N_site, N_month] z_psi_e2;
      real mu_psi_e2;
      real<lower = 0> sigma_psi_e2;
      
      ////////////////////
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      matrix[N_site, N_season] a_e3;
      matrix[N_site, N_season] beta_rainW1_e3;
      matrix[N_site, N_season] beta_sawrA_e3;
      real<lower = 0> sigma_e3;
    
      vector[N_day] z_theta_e3;
      real<lower = 0> eta_theta_e3;
      real<lower = 0> rho_theta_e3;
    
      matrix[N_season, N_month] z_tau_e3;
      real mu_tau_e3;
      real<lower = 0> sigma_tau_e3;
    
      matrix[N_site, N_month] z_psi_e3;
      real mu_psi_e3;
      real<lower = 0> sigma_psi_e3;
      
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      matrix[N_site, N_season] a_e4;
      matrix[N_site, N_season] beta_rainW1_e4;
      matrix[N_site, N_season] beta_sawrA_e4;
      matrix[N_site, N_season] beta_swarmB_e4;
      real<lower = 0> sigma_e4;
    
      vector[N_day] z_theta_e4;
      real<lower = 0> eta_theta_e4;
      real<lower = 0> rho_theta_e4;
    
      matrix[N_season, N_month] z_tau_e4;
      real mu_tau_e4;
      real<lower = 0> sigma_tau_e4;
    
      matrix[N_site, N_month] z_psi_e4;
      real mu_psi_e4;
      real<lower = 0> sigma_psi_e4;
      
      ////////////////////
    
      
    }
    
    transformed parameters{
      
      ///////////////////////
      ///////////////////////// imputed variables
      vector[N] swarm_area;
      vector[N] SBiomass_merge;
      SBiomass_merge = merge_missing(SwarmB_missindx, 
                                     to_vector(swarm_biomass), 
                                     SBiomass_impute);
      vector[N] swarmINI_merge;
      swarmINI_merge = merge_missing(SwarmINI_missindx, 
                                     to_vector(swarm_area_inital), 
                                     SwarmINI_impute);
      vector[N] swarmFIN_merge;
      swarmFIN_merge = merge_missing(SwarmFIN_missindx, 
                                     to_vector(swarm_area_final), 
                                     SwarmFIN_impute);
      swarm_area = (swarmINI_merge + swarmFIN_merge) / 2;
      // swarm_area = scale(swarm_area);
      // SBiomass_merge = scale(SBiomass_merge);
    
      ///////////////////
      ///////////////////////// rain_i -> swarm
      
      vector[N_day] theta_e2;
      matrix[N_dim_day, N_dim_day] sigma_theta_e2;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e2;
      sigma_theta_e2 = cov_GPL2(dist_day, eta_theta_e2, rho_theta_e2, 0.01);
      L_sigma_theta_e2 = cholesky_decompose(sigma_theta_e2);
      theta_e2 = L_sigma_theta_e2 * z_theta_e2;
    
      matrix[N_season, N_month] tau_e2;
      matrix[N_site, N_month] psi_e2;
      tau_e2 = mu_tau_e2 + z_tau_e2 * sigma_tau_e2;
      psi_e2 = mu_psi_e2 + z_psi_e2 * sigma_psi_e2;
      
      ///////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      
      vector[N_day] theta_e3;
      matrix[N_dim_day, N_dim_day] sigma_theta_e3;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e3;
      sigma_theta_e3 = cov_GPL2(dist_day, eta_theta_e3, rho_theta_e3, 0.01);
      L_sigma_theta_e3 = cholesky_decompose(sigma_theta_e3);
      theta_e3 = L_sigma_theta_e3 * z_theta_e3;
    
      matrix[N_season, N_month] tau_e3;
      matrix[N_site, N_month] psi_e3;
      tau_e3 = mu_tau_e3 + z_tau_e3 * sigma_tau_e3;
      psi_e3 = mu_psi_e3 + z_psi_e3 * sigma_psi_e3;
    
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      
      vector[N_day] theta_e4;
      matrix[N_dim_day, N_dim_day] sigma_theta_e4;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e4;
      sigma_theta_e4 = cov_GPL2(dist_day, eta_theta_e4, rho_theta_e4, 0.01);
      L_sigma_theta_e4 = cholesky_decompose(sigma_theta_e4);
      theta_e4 = L_sigma_theta_e4 * z_theta_e4;
    
      matrix[N_season, N_month] tau_e4;
      matrix[N_site, N_month] psi_e4;
      tau_e4 = mu_tau_e4 + z_tau_e4 * sigma_tau_e4;
      psi_e4 = mu_psi_e4 + z_psi_e4 * sigma_psi_e4;
    
      ///////////////////
    }
    
    model {
      vector[N] mu;
      vector[N] p1;
      vector[N] p2;
      ///////////////////////
      /////////////////////// imputed variables
      mu_sb ~ normal(3.5, 1);
      sigma_sb ~ exponential(1);
      SBiomass_merge ~ normal(mu_sb, sigma_sb);
      mu_sbINI ~ normal(3.5, 1);
      sigma_sbINI ~ exponential(1);
      swarmINI_merge ~ normal(mu_sbINI, sigma_sbINI);
      mu_sbFIN ~ normal(3.5, 1);
      sigma_sbFIN ~ exponential(1);
      swarmFIN_merge ~ normal(mu_sbFIN, sigma_sbFIN);
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      vector[N] mu_e1;
      a_e1 ~ normal(0, 1);
      beta_rainW2_e1 ~ normal(0, 0.5);
      sigma_e1 ~ exponential(1);
      
      ///////////////////
      /////////////////// rain_i -> swarm
      to_vector(a_e2) ~ normal(3, 1);
      sigma_e2 ~ exponential(1);
      to_vector(beta_rainW1_e2) ~ normal(0, 0.25);
    
      z_theta_e2 ~ normal(0, 0.5);     
      eta_theta_e2 ~ exponential(3);   
      rho_theta_e2 ~ exponential(0.5); 
      
      to_vector(z_tau_e2) ~ normal(0, 0.5);
      mu_tau_e2 ~ normal(0, 0.5);
      sigma_tau_e2 ~ exponential(1);
    
      to_vector(z_psi_e2) ~ normal(0, 0.5);
      mu_psi_e2 ~ normal(0, 0.5);
      sigma_psi_e2 ~ exponential(1);
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      to_vector(a_e3) ~ normal(2.5, 1);
      sigma_e3 ~ exponential(1);
      to_vector(beta_rainW1_e3) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e3) ~ normal(0, 3);
    
      z_theta_e3 ~ normal(0, 1);
      eta_theta_e3 ~ exponential(3);
      rho_theta_e3 ~ exponential(0.5);
      
      to_vector(z_tau_e3) ~ normal(0, 0.5);
      mu_tau_e3 ~ normal(0, 0.5);
      sigma_tau_e3 ~ exponential(1);
    
      to_vector(z_psi_e3) ~ normal(0, 0.5);
      mu_psi_e3 ~ normal(0, 0.5);
      sigma_psi_e3 ~ exponential(1);
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      to_vector(a_e4) ~ normal(0, 0.5);
      sigma_e4 ~ exponential(1);
      to_vector(beta_rainW1_e4) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e4) ~ normal(0, 0.5);
      to_vector(beta_swarmB_e4) ~ normal(0, 0.5);
    
      z_theta_e4 ~ normal(0, 0.5);
      eta_theta_e4 ~ exponential(3);
      rho_theta_e4 ~ exponential(0.5);
      
      to_vector(z_tau_e4) ~ normal(0, 0.5);
      mu_tau_e4 ~ normal(0, 0.5);
      sigma_tau_e4 ~ exponential(1);
    
      to_vector(z_psi_e4) ~ normal(0, 0.5);
      mu_psi_e4 ~ normal(0, 0.5);
      sigma_psi_e4 ~ exponential(1);
      
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      for (i in 1:N) {
        cum_rainfall_W5[i] ~ normal(a_e1 + beta_rainW2_e1 * cum_rainfall_W10[i], 
                                    sigma_e1);
      }
    
      ///////////////////
      /////////////////// rain_i -> swarm
      for (i in 1:N) {
        swarm_area[i] ~ student_t(2,
                                  a_e2[site[i], season[i]] + 
                                  beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W5[i] +
                                  theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                                  psi_e2[site[i], month[i]], 
                                  sigma_e2);
      }
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      for (i in 1:N) {
        SBiomass_merge[i] ~ student_t(2,
                                     a_e3[site[i], season[i]] + 
                                     beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W5[i] +
                                     beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                                     theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                                     psi_e3[site[i], month[i]], 
                                     sigma_e3);
      }
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      for (i in 1:N) {
         norm_degree[i] ~ student_t(7, a_e4[site[i], season[i]] + 
                           beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W5[i] +
                           beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                           beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                           theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                           psi_e4[site[i], month[i]], sigma_e4);
      }
    
      //p1 = mu * sigma_e4;
      //p2 = (1 - mu) * sigma_e4;
    
      //norm_degree ~ beta(p1, p2);
    
    }
    
    generated quantities {
      vector[N] mu_e1;
      vector[N] mu_e2;
      vector[N] mu_e3;
      vector[N] mu_e4;
      vector[N] p1;
      vector[N] p2;
      array[N] real ppcheck_e1;
      array[N] real ppcheck_e2;
      array[N] real ppcheck_e3;
      array[N] real ppcheck_e4;
      
      for (i in 1:N) {
        mu_e1[i] = a_e1 + beta_rainW2_e1 * cum_rainfall_W10[i]; 
      }
    
      ppcheck_e1 = normal_rng(mu_e1, sigma_e1);
    
      for (i in 1:N) {
        mu_e2[i] = a_e2[site[i], season[i]] + 
                   beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W5[i] +
                   theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                   psi_e2[site[i], month[i]];
      }
      
      ppcheck_e2 = student_t_rng(2, mu_e2, sigma_e2);
    
    
      for (i in 1:N) {
        mu_e3[i] = a_e3[site[i], season[i]] + beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W5[i] +
                   beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                   theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                   psi_e3[site[i], month[i]];
      }
      
      ppcheck_e3 = student_t_rng(2, mu_e3, sigma_e3);
    
      for (i in 1:N) {
         mu_e4[i] = a_e4[site[i], season[i]] + 
                           beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W5[i] +
                           beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                           beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                           theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                           psi_e4[site[i], month[i]];
      }
    
      //p1 = mu_e4 * sigma_e4;
      //p2 = (1 - mu_e4) * sigma_e4;
    
      ppcheck_e4 = student_t_rng(7, mu_e4, sigma_e4);
    
    }
    
    ")

```

#### Running MCMC algorithm


```{r, eval=FALSE}
file <- paste(getwd(), '/w5_norm_degree.stan', sep ='')

fit_norm_degreeW5 <- cmdstan_model(file, compile = T)

mod_norm_degreeW5_obs <- 
  fit_norm_degreeW5$sample(
    data = temp_data[-3], 
    chains = 3, 
    parallel_chains = 3, 
    iter_sampling = 8e3, 
    iter_warmup = 500, 
    thin = 10, 
    seed = 123
  )

```

```{r, echo=FALSE, eval=TRUE}
mod_norm_degreeW5_obs <- readRDS('causal_mod_norm_degreeW5_2.rds')
```

#### Model diagnostics

```{r, fig.height=15, fig.cap="Rhat values and ess of group-level parameters from the generative model explaining the effect of cumulative rainfall during W5, on normalized degree of ant followers birds."}

par(mfrow = c(5, 2), mar = c(4, 4, 1.5, 1))
mod_diagnostics(mod_norm_degreeW5_obs, 
                mod_norm_degreeW5_obs$summary(
                  unique(paste('psi_e2[', 
                               temp_data$site,
                               ',',
                               temp_data$month, ']', 
                               sep = '')))) 

mod_diagnostics(mod_norm_degreeW5_obs, 
                mod_norm_degreeW5_obs$summary(
                  unique(paste('psi_e3[', 
                               temp_data$site,
                               ',',
                               temp_data$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_norm_degreeW5_obs, 
                mod_norm_degreeW5_obs$summary(
                  unique(paste('psi_e4[', 
                               temp_data$site,
                               ',',
                               temp_data$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_norm_degreeW5_obs, 
                mod_norm_degreeW5_obs$summary(
                  unique(paste('tau_e4[', 
                               temp_data$year,
                               ',',
                               temp_data$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_norm_degreeW5_obs, 
                mod_norm_degreeW5_obs$summary(
                  unique(paste('tau_e2[', 
                               temp_data$year,
                               ',',
                               temp_data$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_norm_degreeW5_obs, 
                mod_norm_degreeW5_obs$summary(
                  unique(paste('tau_e3[', 
                               temp_data$year,
                               ',',
                               temp_data$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_norm_degreeW5_obs, 
                mod_norm_degreeW5_obs$summary(paste('theta_e4[', 
                                                    1:temp_data$N_day, ']', 
                                                    sep = '')))
mod_diagnostics(mod_norm_degreeW5_obs, 
                mod_norm_degreeW5_obs$summary(paste('theta_e3[', 
                                                    1:temp_data$N_day, ']', 
                                                    sep = '')))

mod_diagnostics(mod_norm_degreeW5_obs, 
                mod_norm_degreeW5_obs$summary(paste('theta_e2[', 
                                                    1:temp_data$N_day, ']', 
                                                    sep = '')))
par(mfrow = c(1, 1))
```

```{r, fig.cap="Rhat values and ess of slope, intercept, and dispersion parameters  from the generative model explaining the effect of cumulative rainfall during W5, on network normalized degree of ant followers birds."}
summary_norm_degreeW5 <- mod_norm_degreeW5_obs$summary(c('beta_rainW2_e1', 
                                                         'beta_rainW1_e2',
                                                         'beta_rainW1_e3',
                                                         'beta_rainW1_e4',
                                                         'beta_sawrA_e3',
                                                         'beta_sawrA_e4',
                                                         'beta_swarmB_e4', 
                                                         'a_e1', 'a_e2', 
                                                         'a_e3', 'a_e4',
                                                         'sigma_e1', 'sigma_e2', 
                                                         'sigma_e3', 'sigma_e4', 
                                                         'swarm_area',
                                                         'SBiomass_merge',
                                                         'lp__'))


mod_diagnostics(mod_norm_degreeW5_obs, summary_norm_degreeW5)


```


```{r, fig.cap= "Posterior predictive checks"}
post_norm_degreeW5_obs <- mod_norm_degreeW5_obs$draws(c('beta_rainW2_e1', 
                                                        'beta_rainW1_e2',
                                                        'beta_rainW1_e3',
                                                        'beta_rainW1_e4',
                                                        'beta_sawrA_e3',
                                                        'beta_sawrA_e4',
                                                        'beta_swarmB_e4', 
                                                        'a_e1', 'a_e2', 'a_e3', 'a_e4',
                                                        'sigma_e1', 'sigma_e2', 
                                                        'sigma_e3', 'sigma_e4',
                                                        'swarm_area',
                                                        'SBiomass_merge'
), 
format = 'df')

ppcheck_swarmA <- mod_norm_degreeW5_obs$draws('ppcheck_e2', format = 'matrix')
ppcheck_swarmB <- mod_norm_degreeW5_obs$draws('ppcheck_e3', format = 'matrix')
ppcheck_norm_degree <- mod_norm_degreeW5_obs$draws('ppcheck_e4', format = 'matrix')
ppcheck_R1 <- mod_norm_degreeW5_obs$draws('ppcheck_e1', format = 'matrix')

swarm_area <- apply(post_norm_degreeW5_obs[, grep('swarm_area', colnames(post_norm_degreeW5_obs))], 
                    2, mean)
swarm_BM <- 
  apply(post_norm_degreeW5_obs[, grep('SBiomass_merge', colnames(post_norm_degreeW5_obs))], 
        2, mean)

par(mfrow = c(2, 2), mar = c(4, 4, 1, 1))
plot(density(temp_data[-3]$cum_rainfall_W5), 
     main = '', xlab = 'Cum rainfall W5')
for(i in 1:100) lines(density(ppcheck_R1[i, ]), lwd = 0.1)
lines(density(temp_data[-3]$cum_rainfall_W5), col = 'red')

plot(density(swarm_area), main = '', xlab = 'Swarm area')
for(i in 1:100) lines(density(ppcheck_swarmA[i, ]), lwd = 0.1)
lines(density(swarm_area), col = 'red')

plot(density(swarm_BM), main = '', xlab = 'Arthropod biomass')
for(i in 1:100) lines(density(ppcheck_swarmB[i, ]), lwd = 0.1)
lines(density(swarm_BM), col = 'red')

plot(density(temp_data[-3]$norm_degree), 
     main = '', xlab = 'Net size')
for(i in 1:100) lines(density(ppcheck_norm_degree[i, ]), lwd = 0.1)
lines(density(temp_data[-3]$norm_degree), col = 'red')

post_beta_norm_degreeW5 <- gather(post_norm_degreeW5_obs[, grep('beta', colnames(post_norm_degreeW5_obs))])

post_beta_norm_degreeW5$key <- as.factor(post_beta_norm_degreeW5$key)

```

### Window 10 model

#### Stan code

```{r, eval=FALSE}
cat(file = 'w10_norm_degree.stan', 
    "
    
    functions {
    
      vector scale(vector x) {
        int N = dims(x)[1];
        real mu = mean(x);
        real sigma = sd(x);
        vector[N] scaled_v;
    
        for (i in 1:N) {
          scaled_v[i] = (x[i] - mu) / sigma;
        }
        return scaled_v;
      }  
    
      vector merge_missing(array[] int miss_indxex, vector x_obs, vector x_miss) {
                int N = dims(x_obs)[1];
                int N_miss = dims(x_miss)[1];
                vector[N] merge;
                merge = x_obs;
                for (i in 1:N_miss) {
                    merge[miss_indxex[i]] = x_miss[i];
                }
            return merge;
          }
    
    
      matrix cov_GPL2(matrix x,
                      real eta,
                      real rho,
                      real delta) {
                      
                      int N = dims(x)[1];
                      matrix[N, N] K;
    
                      for (i in 1:(N-1)) {
                        K[i, i] = eta + delta;
                        for (j in (i + 1):N) {
                          K[i, j] = eta * exp(-rho * square(x[i, j]));
                          K[j, i] = K[i, j];
                        }
                      }
                      K[N, N] = eta + delta;
                      return K;
                      }
    }
    
    data {
      int N;
      int N_day;
      int N_month;
      int N_season;
      int N_site;
      int N_dim_day;
      int N_naSwarmBio;
      int N_naSwarmINI;
      int N_naSwarmFIN;
      array[N_naSwarmBio] int SwarmB_missindx;
      array[N_naSwarmINI] int SwarmINI_missindx;
      array[N_naSwarmFIN] int SwarmFIN_missindx;
      vector[N] norm_degree;
      array[N] int day;
      array[N] int month;
      array[N] int season;
      array[N] int site;
      vector[N] swarm_biomass;
      vector[N] swarm_area_inital;
      vector[N] swarm_area_final;
      array[N] int cum_rainfall_W10;
      array[N] int cum_rainfall_W15;
      matrix[N_dim_day, N_dim_day] dist_day;
    }
    
    parameters {
      /////////////
      ///////////// imputed variables
      vector[N_naSwarmBio] SBiomass_impute;
      real mu_sb;
      real<lower = 0> sigma_sb;
      vector[N_naSwarmINI] SwarmINI_impute;
      real mu_sbINI;
      real<lower = 0> sigma_sbINI;
      vector[N_naSwarmFIN] SwarmFIN_impute;
      real mu_sbFIN;
      real<lower = 0> sigma_sbFIN;
    
      //////////////
      ///////////// rain_i+n -> rain_i
      real a_e1;
      real beta_rainW2_e1;
      real<lower = 0> sigma_e1;
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm
      matrix[N_site, N_season] a_e2;
      matrix[N_site, N_season] beta_rainW1_e2;
      real<lower = 0> sigma_e2;
    
      vector[N_day] z_theta_e2;
      real<lower = 0> eta_theta_e2;
      real<lower = 0> rho_theta_e2;
    
      matrix[N_season, N_month] z_tau_e2;
      real mu_tau_e2;
      real<lower = 0> sigma_tau_e2;
    
      matrix[N_site, N_month] z_psi_e2;
      real mu_psi_e2;
      real<lower = 0> sigma_psi_e2;
      
      ////////////////////
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      matrix[N_site, N_season] a_e3;
      matrix[N_site, N_season] beta_rainW1_e3;
      matrix[N_site, N_season] beta_sawrA_e3;
      real<lower = 0> sigma_e3;
    
      vector[N_day] z_theta_e3;
      real<lower = 0> eta_theta_e3;
      real<lower = 0> rho_theta_e3;
    
      matrix[N_season, N_month] z_tau_e3;
      real mu_tau_e3;
      real<lower = 0> sigma_tau_e3;
    
      matrix[N_site, N_month] z_psi_e3;
      real mu_psi_e3;
      real<lower = 0> sigma_psi_e3;
      
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      matrix[N_site, N_season] a_e4;
      matrix[N_site, N_season] beta_rainW1_e4;
      matrix[N_site, N_season] beta_sawrA_e4;
      matrix[N_site, N_season] beta_swarmB_e4;
      real<lower = 0> sigma_e4;
    
      vector[N_day] z_theta_e4;
      real<lower = 0> eta_theta_e4;
      real<lower = 0> rho_theta_e4;
    
      matrix[N_season, N_month] z_tau_e4;
      real mu_tau_e4;
      real<lower = 0> sigma_tau_e4;
    
      matrix[N_site, N_month] z_psi_e4;
      real mu_psi_e4;
      real<lower = 0> sigma_psi_e4;
      
      ////////////////////
    
      
    }
    
    transformed parameters{
      
      ///////////////////////
      ///////////////////////// imputed variables
      vector[N] swarm_area;
      vector[N] SBiomass_merge;
      SBiomass_merge = merge_missing(SwarmB_missindx, 
                                     to_vector(swarm_biomass), 
                                     SBiomass_impute);
      vector[N] swarmINI_merge;
      swarmINI_merge = merge_missing(SwarmINI_missindx, 
                                     to_vector(swarm_area_inital), 
                                     SwarmINI_impute);
      vector[N] swarmFIN_merge;
      swarmFIN_merge = merge_missing(SwarmFIN_missindx, 
                                     to_vector(swarm_area_final), 
                                     SwarmFIN_impute);
      swarm_area = (swarmINI_merge + swarmFIN_merge) / 2;
      // swarm_area = scale(swarm_area);
      // SBiomass_merge = scale(SBiomass_merge);
    
      ///////////////////
      ///////////////////////// rain_i -> swarm
      
      vector[N_day] theta_e2;
      matrix[N_dim_day, N_dim_day] sigma_theta_e2;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e2;
      sigma_theta_e2 = cov_GPL2(dist_day, eta_theta_e2, rho_theta_e2, 0.01);
      L_sigma_theta_e2 = cholesky_decompose(sigma_theta_e2);
      theta_e2 = L_sigma_theta_e2 * z_theta_e2;
    
      matrix[N_season, N_month] tau_e2;
      matrix[N_site, N_month] psi_e2;
      tau_e2 = mu_tau_e2 + z_tau_e2 * sigma_tau_e2;
      psi_e2 = mu_psi_e2 + z_psi_e2 * sigma_psi_e2;
      
      ///////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      
      vector[N_day] theta_e3;
      matrix[N_dim_day, N_dim_day] sigma_theta_e3;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e3;
      sigma_theta_e3 = cov_GPL2(dist_day, eta_theta_e3, rho_theta_e3, 0.01);
      L_sigma_theta_e3 = cholesky_decompose(sigma_theta_e3);
      theta_e3 = L_sigma_theta_e3 * z_theta_e3;
    
      matrix[N_season, N_month] tau_e3;
      matrix[N_site, N_month] psi_e3;
      tau_e3 = mu_tau_e3 + z_tau_e3 * sigma_tau_e3;
      psi_e3 = mu_psi_e3 + z_psi_e3 * sigma_psi_e3;
    
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      
      vector[N_day] theta_e4;
      matrix[N_dim_day, N_dim_day] sigma_theta_e4;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e4;
      sigma_theta_e4 = cov_GPL2(dist_day, eta_theta_e4, rho_theta_e4, 0.01);
      L_sigma_theta_e4 = cholesky_decompose(sigma_theta_e4);
      theta_e4 = L_sigma_theta_e4 * z_theta_e4;
    
      matrix[N_season, N_month] tau_e4;
      matrix[N_site, N_month] psi_e4;
      tau_e4 = mu_tau_e4 + z_tau_e4 * sigma_tau_e4;
      psi_e4 = mu_psi_e4 + z_psi_e4 * sigma_psi_e4;
    
      ///////////////////
    }
    
    model {
      vector[N] mu;
      vector[N] p1;
      vector[N] p2;
      ///////////////////////
      /////////////////////// imputed variables
      mu_sb ~ normal(3.5, 1);
      sigma_sb ~ exponential(1);
      SBiomass_merge ~ normal(mu_sb, sigma_sb);
      mu_sbINI ~ normal(3.5, 1);
      sigma_sbINI ~ exponential(1);
      swarmINI_merge ~ normal(mu_sbINI, sigma_sbINI);
      mu_sbFIN ~ normal(3.5, 1);
      sigma_sbFIN ~ exponential(1);
      swarmFIN_merge ~ normal(mu_sbFIN, sigma_sbFIN);
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      vector[N] mu_e1;
      a_e1 ~ normal(0, 1);
      beta_rainW2_e1 ~ normal(0, 0.5);
      sigma_e1 ~ exponential(1);
      
      ///////////////////
      /////////////////// rain_i -> swarm
      to_vector(a_e2) ~ normal(3, 1);
      sigma_e2 ~ exponential(1);
      to_vector(beta_rainW1_e2) ~ normal(0, 0.25);
    
      z_theta_e2 ~ normal(0, 0.5);     
      eta_theta_e2 ~ exponential(3);   
      rho_theta_e2 ~ exponential(0.5); 
      
      to_vector(z_tau_e2) ~ normal(0, 0.5);
      mu_tau_e2 ~ normal(0, 0.5);
      sigma_tau_e2 ~ exponential(1);
    
      to_vector(z_psi_e2) ~ normal(0, 0.5);
      mu_psi_e2 ~ normal(0, 0.5);
      sigma_psi_e2 ~ exponential(1);
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      to_vector(a_e3) ~ normal(2.5, 1);
      sigma_e3 ~ exponential(1);
      to_vector(beta_rainW1_e3) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e3) ~ normal(0, 3);
    
      z_theta_e3 ~ normal(0, 1);
      eta_theta_e3 ~ exponential(3);
      rho_theta_e3 ~ exponential(0.5);
      
      to_vector(z_tau_e3) ~ normal(0, 0.5);
      mu_tau_e3 ~ normal(0, 0.5);
      sigma_tau_e3 ~ exponential(1);
    
      to_vector(z_psi_e3) ~ normal(0, 0.5);
      mu_psi_e3 ~ normal(0, 0.5);
      sigma_psi_e3 ~ exponential(1);
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      to_vector(a_e4) ~ normal(0, 0.5);
      sigma_e4 ~ exponential(1);
      to_vector(beta_rainW1_e4) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e4) ~ normal(0, 0.5);
      to_vector(beta_swarmB_e4) ~ normal(0, 0.5);
    
      z_theta_e4 ~ normal(0, 0.5);
      eta_theta_e4 ~ exponential(3);
      rho_theta_e4 ~ exponential(0.5);
      
      to_vector(z_tau_e4) ~ normal(0, 0.5);
      mu_tau_e4 ~ normal(0, 0.5);
      sigma_tau_e4 ~ exponential(1);
    
      to_vector(z_psi_e4) ~ normal(0, 0.5);
      mu_psi_e4 ~ normal(0, 0.5);
      sigma_psi_e4 ~ exponential(1);
      
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      for (i in 1:N) {
        cum_rainfall_W10[i] ~ normal(a_e1 + beta_rainW2_e1 * cum_rainfall_W15[i], 
                                    sigma_e1);
      }
    
      ///////////////////
      /////////////////// rain_i -> swarm
      for (i in 1:N) {
        swarm_area[i] ~ student_t(2,
                                  a_e2[site[i], season[i]] + 
                                  beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W10[i] +
                                  theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                                  psi_e2[site[i], month[i]], 
                                  sigma_e2);
      }
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      for (i in 1:N) {
        SBiomass_merge[i] ~ student_t(2,
                                     a_e3[site[i], season[i]] + 
                                     beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W10[i] +
                                     beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                                     theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                                     psi_e3[site[i], month[i]], 
                                     sigma_e3);
      }
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      for (i in 1:N) {
         norm_degree[i] ~ student_t(7, a_e4[site[i], season[i]] + 
                           beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W10[i] +
                           beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                           beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                           theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                           psi_e4[site[i], month[i]], sigma_e4);
      }
    
      //p1 = mu * sigma_e4;
      //p2 = (1 - mu) * sigma_e4;
    
      //norm_degree ~ beta(p1, p2);
    
    }
    
    generated quantities {
      vector[N] mu_e1;
      vector[N] mu_e2;
      vector[N] mu_e3;
      vector[N] mu_e4;
      vector[N] p1;
      vector[N] p2;
      array[N] real ppcheck_e1;
      array[N] real ppcheck_e2;
      array[N] real ppcheck_e3;
      array[N] real ppcheck_e4;
      
      for (i in 1:N) {
        mu_e1[i] = a_e1 + beta_rainW2_e1 * cum_rainfall_W15[i]; 
      }
    
      ppcheck_e1 = normal_rng(mu_e1, sigma_e1);
    
      for (i in 1:N) {
        mu_e2[i] = a_e2[site[i], season[i]] + 
                  beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W10[i] +
                  theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                  psi_e2[site[i], month[i]];
      }
      
      ppcheck_e2 = student_t_rng(2, mu_e2, sigma_e2);
    
    
      for (i in 1:N) {
        mu_e3[i] = a_e3[site[i], season[i]] + 
                   beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W10[i] +
                   beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                   theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                   psi_e3[site[i], month[i]];
      }
      
      ppcheck_e3 = student_t_rng(2, mu_e3, sigma_e3);
    
      for (i in 1:N) {
         mu_e4[i] = a_e4[site[i], season[i]] + 
                           beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W10[i] +
                           beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                           beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                           theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                           psi_e4[site[i], month[i]];
      }
    
      //p1 = mu_e4 * sigma_e4;
      //p2 = (1 - mu_e4) * sigma_e4;
    
      ppcheck_e4 = student_t_rng(7, mu_e4, sigma_e4);
    
    }
    
    ")

```

#### Running MCMC algorithm


```{r, eval=FALSE}
file <- paste(getwd(), '/w10_norm_degree.stan', sep ='')

fit_norm_degreeW10 <- cmdstan_model(file, compile = T)

mod_norm_degreeW10_obs <- 
  fit_norm_degreeW10$sample(
    data = temp_data[-3], 
    chains = 3, 
    parallel_chains = 3, 
    iter_sampling = 8e3, 
    iter_warmup = 500, 
    thin = 10, 
    seed = 123
  )

```

```{r, echo=FALSE, eval=TRUE}
mod_norm_degreeW10_obs <- readRDS('causal_mod_norm_degreeW10_2.rds')
```

#### Model diagnostics

```{r, fig.height=15, fig.cap="Rhat values and ess of group-level parameters from the generative model explaining the effect of cumulative rainfall during W10, on network normalized degree of ant followers birds."}

par(mfrow = c(5, 2), mar = c(4, 4, 1.5, 1))
mod_diagnostics(mod_norm_degreeW10_obs, 
                mod_norm_degreeW10_obs$summary(
                  unique(paste('psi_e2[', 
                               temp_data$site,
                               ',',
                               temp_data$month, ']', 
                               sep = '')))) 

mod_diagnostics(mod_norm_degreeW10_obs, 
                mod_norm_degreeW10_obs$summary(
                  unique(paste('psi_e3[', 
                               temp_data$site,
                               ',',
                               temp_data$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_norm_degreeW10_obs, 
                mod_norm_degreeW10_obs$summary(
                  unique(paste('psi_e4[', 
                               temp_data$site,
                               ',',
                               temp_data$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_norm_degreeW10_obs, 
                mod_norm_degreeW10_obs$summary(
                  unique(paste('tau_e4[', 
                               temp_data$year,
                               ',',
                               temp_data$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_norm_degreeW10_obs, 
                mod_norm_degreeW10_obs$summary(
                  unique(paste('tau_e2[', 
                               temp_data$year,
                               ',',
                               temp_data$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_norm_degreeW10_obs, 
                mod_norm_degreeW10_obs$summary(
                  unique(paste('tau_e3[', 
                               temp_data$year,
                               ',',
                               temp_data$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_norm_degreeW10_obs, 
                mod_norm_degreeW10_obs$summary(paste('theta_e4[', 
                                                     1:temp_data$N_day, ']', 
                                                     sep = '')))
mod_diagnostics(mod_norm_degreeW10_obs, 
                mod_norm_degreeW10_obs$summary(paste('theta_e3[', 
                                                     1:temp_data$N_day, ']', 
                                                     sep = '')))

mod_diagnostics(mod_norm_degreeW10_obs, 
                mod_norm_degreeW10_obs$summary(paste('theta_e2[', 
                                                     1:temp_data$N_day, ']', 
                                                     sep = '')))
par(mfrow = c(1, 1))
```

```{r, fig.cap="Rhat values and ess of slope, intercept, and dispersion parameters  from the generative model explaining the effect of cumulative rainfall during W10, on network normalized degree of ant followers birds."}
summary_norm_degreeW10 <- mod_norm_degreeW10_obs$summary(c('beta_rainW2_e1', 
                                                           'beta_rainW1_e2',
                                                           'beta_rainW1_e3',
                                                           'beta_rainW1_e4',
                                                           'beta_sawrA_e3',
                                                           'beta_sawrA_e4',
                                                           'beta_swarmB_e4', 
                                                           'a_e1', 'a_e2', 
                                                           'a_e3', 'a_e4',
                                                           'sigma_e1', 'sigma_e2', 
                                                           'sigma_e3', 'sigma_e4', 
                                                           'swarm_area',
                                                           'SBiomass_merge',
                                                           'lp__'))

mod_diagnostics(mod_norm_degreeW10_obs, summary_norm_degreeW10)


```


```{r, fig.cap= "Posterior predictive checks"}
post_norm_degreeW10_obs <- mod_norm_degreeW10_obs$draws(c('beta_rainW2_e1', 
                                                          'beta_rainW1_e2',
                                                          'beta_rainW1_e3',
                                                          'beta_rainW1_e4',
                                                          'beta_sawrA_e3',
                                                          'beta_sawrA_e4',
                                                          'beta_swarmB_e4', 
                                                          'a_e1', 'a_e2', 'a_e3', 'a_e4',
                                                          'sigma_e1', 'sigma_e2', 
                                                          'sigma_e3', 'sigma_e4',
                                                          'swarm_area',
                                                          'SBiomass_merge'
), 
format = 'df')

ppcheck_swarmA <- mod_norm_degreeW10_obs$draws('ppcheck_e2', format = 'matrix')
ppcheck_swarmB <- mod_norm_degreeW10_obs$draws('ppcheck_e3', format = 'matrix')
ppcheck_norm_degree <- mod_norm_degreeW10_obs$draws('ppcheck_e4', format = 'matrix')
ppcheck_R1 <- mod_norm_degreeW10_obs$draws('ppcheck_e1', format = 'matrix')

swarm_area <- apply(post_norm_degreeW10_obs[, grep('swarm_area', colnames(post_norm_degreeW10_obs))], 
                    2, mean)

swarm_BM <- 
  apply(post_norm_degreeW10_obs[, grep('SBiomass_merge', colnames(post_norm_degreeW10_obs))], 
        2, mean)

par(mfrow = c(2, 2))
plot(density(temp_data[-3]$cum_rainfall_W10), 
     main = '', xlab = 'Cum rainfall W10')
for(i in 1:100) lines(density(ppcheck_R1[i, ]), lwd = 0.1)
lines(density(temp_data[-3]$cum_rainfall_W10), col = 'red')

plot(density(swarm_area), main = '', xlab = 'Swarm area')
for(i in 1:100) lines(density(ppcheck_swarmA[i, ]), lwd = 0.1)
lines(density(swarm_area), col = 'red')

plot(density(swarm_BM), main = '', xlab = 'Arthropod biomass')
for(i in 1:100) lines(density(ppcheck_swarmB[i, ]), lwd = 0.1)
lines(density(swarm_BM), col = 'red')

plot(density(temp_data[-3]$norm_degree), 
     main = '', xlab = 'Net size')
for(i in 1:100) lines(density(ppcheck_norm_degree[i, ]), lwd = 0.1)
lines(density(temp_data[-3]$norm_degree), col = 'red')
par(mfrow = c(1, 1))



post_beta_norm_degreeW10 <- gather(post_norm_degreeW10_obs[, grep('beta', colnames(post_norm_degreeW10_obs))])

post_beta_norm_degreeW10$key <- as.factor(post_beta_norm_degreeW10$key)

```

### Window 15 model

#### Stan code

```{r, eval=FALSE}
cat(file = 'w15_norm_degree.stan', 
    "
    
    functions {
    
      vector scale(vector x) {
        int N = dims(x)[1];
        real mu = mean(x);
        real sigma = sd(x);
        vector[N] scaled_v;
    
        for (i in 1:N) {
          scaled_v[i] = (x[i] - mu) / sigma;
        }
        return scaled_v;
      }  
    
      vector merge_missing(array[] int miss_indxex, vector x_obs, vector x_miss) {
                int N = dims(x_obs)[1];
                int N_miss = dims(x_miss)[1];
                vector[N] merge;
                merge = x_obs;
                for (i in 1:N_miss) {
                    merge[miss_indxex[i]] = x_miss[i];
                }
            return merge;
          }
    
    
      matrix cov_GPL2(matrix x,
                      real eta,
                      real rho,
                      real delta) {
                      
                      int N = dims(x)[1];
                      matrix[N, N] K;
    
                      for (i in 1:(N-1)) {
                        K[i, i] = eta + delta;
                        for (j in (i + 1):N) {
                          K[i, j] = eta * exp(-rho * square(x[i, j]));
                          K[j, i] = K[i, j];
                        }
                      }
                      K[N, N] = eta + delta;
                      return K;
                      }
    }
    
    data {
      int N;
      int N_day;
      int N_month;
      int N_season;
      int N_site;
      int N_dim_day;
      int N_naSwarmBio;
      int N_naSwarmINI;
      int N_naSwarmFIN;
      array[N_naSwarmBio] int SwarmB_missindx;
      array[N_naSwarmINI] int SwarmINI_missindx;
      array[N_naSwarmFIN] int SwarmFIN_missindx;
      vector[N] norm_degree;
      array[N] int day;
      array[N] int month;
      array[N] int season;
      array[N] int site;
      vector[N] swarm_biomass;
      vector[N] swarm_area_inital;
      vector[N] swarm_area_final;
      array[N] int cum_rainfall_W20;
      array[N] int cum_rainfall_W15;
      matrix[N_dim_day, N_dim_day] dist_day;
    }
    
    parameters {
      /////////////
      ///////////// imputed variables
      vector[N_naSwarmBio] SBiomass_impute;
      real mu_sb;
      real<lower = 0> sigma_sb;
      vector[N_naSwarmINI] SwarmINI_impute;
      real mu_sbINI;
      real<lower = 0> sigma_sbINI;
      vector[N_naSwarmFIN] SwarmFIN_impute;
      real mu_sbFIN;
      real<lower = 0> sigma_sbFIN;
    
      //////////////
      ///////////// rain_i+n -> rain_i
      real a_e1;
      real beta_rainW2_e1;
      real<lower = 0> sigma_e1;
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm
      matrix[N_site, N_season] a_e2;
      matrix[N_site, N_season] beta_rainW1_e2;
      real<lower = 0> sigma_e2;
    
      vector[N_day] z_theta_e2;
      real<lower = 0> eta_theta_e2;
      real<lower = 0> rho_theta_e2;
    
      matrix[N_season, N_month] z_tau_e2;
      real mu_tau_e2;
      real<lower = 0> sigma_tau_e2;
    
      matrix[N_site, N_month] z_psi_e2;
      real mu_psi_e2;
      real<lower = 0> sigma_psi_e2;
      
      ////////////////////
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      matrix[N_site, N_season] a_e3;
      matrix[N_site, N_season] beta_rainW1_e3;
      matrix[N_site, N_season] beta_sawrA_e3;
      real<lower = 0> sigma_e3;
    
      vector[N_day] z_theta_e3;
      real<lower = 0> eta_theta_e3;
      real<lower = 0> rho_theta_e3;
    
      matrix[N_season, N_month] z_tau_e3;
      real mu_tau_e3;
      real<lower = 0> sigma_tau_e3;
    
      matrix[N_site, N_month] z_psi_e3;
      real mu_psi_e3;
      real<lower = 0> sigma_psi_e3;
      
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      matrix[N_site, N_season] a_e4;
      matrix[N_site, N_season] beta_rainW1_e4;
      matrix[N_site, N_season] beta_sawrA_e4;
      matrix[N_site, N_season] beta_swarmB_e4;
      real<lower = 0> sigma_e4;
    
      vector[N_day] z_theta_e4;
      real<lower = 0> eta_theta_e4;
      real<lower = 0> rho_theta_e4;
    
      matrix[N_season, N_month] z_tau_e4;
      real mu_tau_e4;
      real<lower = 0> sigma_tau_e4;
    
      matrix[N_site, N_month] z_psi_e4;
      real mu_psi_e4;
      real<lower = 0> sigma_psi_e4;
      
      ////////////////////
    
      
    }
    
    transformed parameters{
      
      ///////////////////////
      ///////////////////////// imputed variables
      vector[N] swarm_area;
      vector[N] SBiomass_merge;
      SBiomass_merge = merge_missing(SwarmB_missindx, 
                                     to_vector(swarm_biomass), 
                                     SBiomass_impute);
      vector[N] swarmINI_merge;
      swarmINI_merge = merge_missing(SwarmINI_missindx, 
                                     to_vector(swarm_area_inital), 
                                     SwarmINI_impute);
      vector[N] swarmFIN_merge;
      swarmFIN_merge = merge_missing(SwarmFIN_missindx, 
                                     to_vector(swarm_area_final), 
                                     SwarmFIN_impute);
      swarm_area = (swarmINI_merge + swarmFIN_merge) / 2;
      // swarm_area = scale(swarm_area);
      // SBiomass_merge = scale(SBiomass_merge);
    
      ///////////////////
      ///////////////////////// rain_i -> swarm
      
      vector[N_day] theta_e2;
      matrix[N_dim_day, N_dim_day] sigma_theta_e2;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e2;
      sigma_theta_e2 = cov_GPL2(dist_day, eta_theta_e2, rho_theta_e2, 0.01);
      L_sigma_theta_e2 = cholesky_decompose(sigma_theta_e2);
      theta_e2 = L_sigma_theta_e2 * z_theta_e2;
    
      matrix[N_season, N_month] tau_e2;
      matrix[N_site, N_month] psi_e2;
      tau_e2 = mu_tau_e2 + z_tau_e2 * sigma_tau_e2;
      psi_e2 = mu_psi_e2 + z_psi_e2 * sigma_psi_e2;
      
      ///////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      
      vector[N_day] theta_e3;
      matrix[N_dim_day, N_dim_day] sigma_theta_e3;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e3;
      sigma_theta_e3 = cov_GPL2(dist_day, eta_theta_e3, rho_theta_e3, 0.01);
      L_sigma_theta_e3 = cholesky_decompose(sigma_theta_e3);
      theta_e3 = L_sigma_theta_e3 * z_theta_e3;
    
      matrix[N_season, N_month] tau_e3;
      matrix[N_site, N_month] psi_e3;
      tau_e3 = mu_tau_e3 + z_tau_e3 * sigma_tau_e3;
      psi_e3 = mu_psi_e3 + z_psi_e3 * sigma_psi_e3;
    
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      
      vector[N_day] theta_e4;
      matrix[N_dim_day, N_dim_day] sigma_theta_e4;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e4;
      sigma_theta_e4 = cov_GPL2(dist_day, eta_theta_e4, rho_theta_e4, 0.01);
      L_sigma_theta_e4 = cholesky_decompose(sigma_theta_e4);
      theta_e4 = L_sigma_theta_e4 * z_theta_e4;
    
      matrix[N_season, N_month] tau_e4;
      matrix[N_site, N_month] psi_e4;
      tau_e4 = mu_tau_e4 + z_tau_e4 * sigma_tau_e4;
      psi_e4 = mu_psi_e4 + z_psi_e4 * sigma_psi_e4;
    
      ///////////////////
    }
    
    model {
      vector[N] mu;
      vector[N] p1;
      vector[N] p2;
      ///////////////////////
      /////////////////////// imputed variables
      mu_sb ~ normal(3.5, 1);
      sigma_sb ~ exponential(1);
      SBiomass_merge ~ normal(mu_sb, sigma_sb);
      mu_sbINI ~ normal(3.5, 1);
      sigma_sbINI ~ exponential(1);
      swarmINI_merge ~ normal(mu_sbINI, sigma_sbINI);
      mu_sbFIN ~ normal(3.5, 1);
      sigma_sbFIN ~ exponential(1);
      swarmFIN_merge ~ normal(mu_sbFIN, sigma_sbFIN);
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      vector[N] mu_e1;
      a_e1 ~ normal(0, 1);
      beta_rainW2_e1 ~ normal(0, 0.5);
      sigma_e1 ~ exponential(1);
      
      ///////////////////
      /////////////////// rain_i -> swarm
      to_vector(a_e2) ~ normal(3, 1);
      sigma_e2 ~ exponential(1);
      to_vector(beta_rainW1_e2) ~ normal(0, 0.25);
    
      z_theta_e2 ~ normal(0, 0.5);     
      eta_theta_e2 ~ exponential(3);   
      rho_theta_e2 ~ exponential(0.5); 
      
      to_vector(z_tau_e2) ~ normal(0, 0.5);
      mu_tau_e2 ~ normal(0, 0.5);
      sigma_tau_e2 ~ exponential(1);
    
      to_vector(z_psi_e2) ~ normal(0, 0.5);
      mu_psi_e2 ~ normal(0, 0.5);
      sigma_psi_e2 ~ exponential(1);
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      to_vector(a_e3) ~ normal(2.5, 1);
      sigma_e3 ~ exponential(1);
      to_vector(beta_rainW1_e3) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e3) ~ normal(0, 3);
    
      z_theta_e3 ~ normal(0, 1);
      eta_theta_e3 ~ exponential(3);
      rho_theta_e3 ~ exponential(0.5);
      
      to_vector(z_tau_e3) ~ normal(0, 0.5);
      mu_tau_e3 ~ normal(0, 0.5);
      sigma_tau_e3 ~ exponential(1);
    
      to_vector(z_psi_e3) ~ normal(0, 0.5);
      mu_psi_e3 ~ normal(0, 0.5);
      sigma_psi_e3 ~ exponential(1);
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      to_vector(a_e4) ~ normal(0, 0.5);
      sigma_e4 ~ exponential(1);
      to_vector(beta_rainW1_e4) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e4) ~ normal(0, 0.5);
      to_vector(beta_swarmB_e4) ~ normal(0, 0.5);
    
      z_theta_e4 ~ normal(0, 0.5);
      eta_theta_e4 ~ exponential(3);
      rho_theta_e4 ~ exponential(0.5);
      
      to_vector(z_tau_e4) ~ normal(0, 0.5);
      mu_tau_e4 ~ normal(0, 0.5);
      sigma_tau_e4 ~ exponential(1);
    
      to_vector(z_psi_e4) ~ normal(0, 0.5);
      mu_psi_e4 ~ normal(0, 0.5);
      sigma_psi_e4 ~ exponential(1);
      
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      for (i in 1:N) {
        cum_rainfall_W15[i] ~ normal(a_e1 + beta_rainW2_e1 * cum_rainfall_W20[i], 
                                    sigma_e1);
      }
    
      ///////////////////
      /////////////////// rain_i -> swarm
      for (i in 1:N) {
        swarm_area[i] ~ student_t(2,
                                  a_e2[site[i], season[i]] + 
                                  beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W15[i] +
                                  theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                                  psi_e2[site[i], month[i]], 
                                  sigma_e2);
      }
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      for (i in 1:N) {
        SBiomass_merge[i] ~ student_t(2,
                                     a_e3[site[i], season[i]] + 
                                     beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W15[i] +
                                     beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                                     theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                                     psi_e3[site[i], month[i]], 
                                     sigma_e3);
      }
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      for (i in 1:N) {
         norm_degree[i] ~ student_t(7, a_e4[site[i], season[i]] + 
                           beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W15[i] +
                           beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                           beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                           theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                           psi_e4[site[i], month[i]], sigma_e4);
      }
    
      //p1 = mu * sigma_e4;
      //p2 = (1 - mu) * sigma_e4;
    
      //norm_degree ~ beta(p1, p2);
    
    }
    
    generated quantities {
      vector[N] mu_e1;
      vector[N] mu_e2;
      vector[N] mu_e3;
      vector[N] mu_e4;
      vector[N] p1;
      vector[N] p2;
      array[N] real ppcheck_e1;
      array[N] real ppcheck_e2;
      array[N] real ppcheck_e3;
      array[N] real ppcheck_e4;
      
      for (i in 1:N) {
        mu_e1[i] = a_e1 + beta_rainW2_e1 * cum_rainfall_W20[i]; 
      }
    
      ppcheck_e1 = normal_rng(mu_e1, sigma_e1);
    
      for (i in 1:N) {
        mu_e2[i] = a_e2[site[i], season[i]] + 
                  beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W15[i] +
                  theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                  psi_e2[site[i], month[i]];
      }
      
      ppcheck_e2 = student_t_rng(2, mu_e2, sigma_e2);
    
    
      for (i in 1:N) {
        mu_e3[i] = a_e3[site[i], season[i]] + 
                   beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W15[i] +
                   beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                   theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                   psi_e3[site[i], month[i]];
      }
      
      ppcheck_e3 = student_t_rng(2, mu_e3, sigma_e3);
    
      for (i in 1:N) {
         mu_e4[i] = a_e4[site[i], season[i]] + 
                           beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W15[i] +
                           beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                           beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                           theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                           psi_e4[site[i], month[i]];
      }
    
      //p1 = mu_e4 * sigma_e4;
      //p2 = (1 - mu_e4) * sigma_e4;
    
      ppcheck_e4 = student_t_rng(7, mu_e4, sigma_e4);
    
    }
    
    
    
    ")

```

#### Running MCMC algorithm


```{r, eval=FALSE}
file <- paste(getwd(), '/w15_norm_degree.stan', sep ='')

fit_norm_degreeW15 <- cmdstan_model(file, compile = T)

mod_norm_degreeW15_obs <- 
  fit_norm_degreeW15$sample(
    data = temp_data[-3], 
    chains = 3, 
    parallel_chains = 3, 
    iter_sampling = 8e3, 
    iter_warmup = 500, 
    thin = 10, 
    seed = 123
  )

```

```{r, echo=FALSE, eval=TRUE}
mod_norm_degreeW15_obs <- readRDS('causal_mod_norm_degreeW15_2.rds')
```

#### Model diagnostics

```{r, fig.height=15, fig.cap="Rhat values and ess of group-level parameters from the generative model explaining the effect of cumulative rainfall during W15, on network normalized degree of ant followers birds."}

par(mfrow = c(5, 2), mar = c(4, 4, 1.5, 1))
mod_diagnostics(mod_norm_degreeW15_obs, 
                mod_norm_degreeW15_obs$summary(
                  unique(paste('psi_e2[', 
                               temp_data$site,
                               ',',
                               temp_data$month, ']', 
                               sep = '')))) 

mod_diagnostics(mod_norm_degreeW15_obs, 
                mod_norm_degreeW15_obs$summary(
                  unique(paste('psi_e3[', 
                               temp_data$site,
                               ',',
                               temp_data$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_norm_degreeW15_obs, 
                mod_norm_degreeW15_obs$summary(
                  unique(paste('psi_e4[', 
                               temp_data$site,
                               ',',
                               temp_data$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_norm_degreeW15_obs, 
                mod_norm_degreeW15_obs$summary(
                  unique(paste('tau_e4[', 
                               temp_data$year,
                               ',',
                               temp_data$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_norm_degreeW15_obs, 
                mod_norm_degreeW15_obs$summary(
                  unique(paste('tau_e2[', 
                               temp_data$year,
                               ',',
                               temp_data$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_norm_degreeW15_obs, 
                mod_norm_degreeW15_obs$summary(
                  unique(paste('tau_e3[', 
                               temp_data$year,
                               ',',
                               temp_data$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_norm_degreeW15_obs, 
                mod_norm_degreeW15_obs$summary(paste('theta_e4[', 
                                                     1:temp_data$N_day, ']', 
                                                     sep = '')))
mod_diagnostics(mod_norm_degreeW15_obs, 
                mod_norm_degreeW15_obs$summary(paste('theta_e3[', 
                                                     1:temp_data$N_day, ']', 
                                                     sep = '')))

mod_diagnostics(mod_norm_degreeW15_obs, 
                mod_norm_degreeW15_obs$summary(paste('theta_e2[', 
                                                     1:temp_data$N_day, ']', 
                                                     sep = '')))
par(mfrow = c(1, 1))
```

```{r, fig.cap="Rhat values and ess of slope, intercept, and dispersion parameters  from the generative model explaining the effect of cumulative rainfall during W15, on network normalized degree of ant followers birds."}
summary_norm_degreeW15 <- mod_norm_degreeW15_obs$summary(c('beta_rainW2_e1', 
                                                           'beta_rainW1_e2',
                                                           'beta_rainW1_e3',
                                                           'beta_rainW1_e4',
                                                           'beta_sawrA_e3',
                                                           'beta_sawrA_e4',
                                                           'beta_swarmB_e4', 
                                                           'a_e1', 'a_e2', 
                                                           'a_e3', 'a_e4',
                                                           'sigma_e1', 'sigma_e2', 
                                                           'sigma_e3', 'sigma_e4', 
                                                           'swarm_area',
                                                           'SBiomass_merge',
                                                           'lp__'))

mod_diagnostics(mod_norm_degreeW15_obs, summary_norm_degreeW15)

```


```{r, fig.cap= "Posterior predictive checks"}
post_norm_degreeW15_obs <- mod_norm_degreeW15_obs$draws(c('beta_rainW2_e1', 
                                                          'beta_rainW1_e2',
                                                          'beta_rainW1_e3',
                                                          'beta_rainW1_e4',
                                                          'beta_sawrA_e3',
                                                          'beta_sawrA_e4',
                                                          'beta_swarmB_e4', 
                                                          'a_e1', 'a_e2', 'a_e3', 'a_e4',
                                                          'sigma_e1', 'sigma_e2', 
                                                          'sigma_e3', 'sigma_e4',
                                                          'swarm_area',
                                                          'SBiomass_merge'
), 
format = 'df')

ppcheck_swarmA <- mod_norm_degreeW15_obs$draws('ppcheck_e2', format = 'matrix')
ppcheck_swarmB <- mod_norm_degreeW15_obs$draws('ppcheck_e3', format = 'matrix')
ppcheck_norm_degree <- mod_norm_degreeW15_obs$draws('ppcheck_e4', format = 'matrix')
ppcheck_R1 <- mod_norm_degreeW15_obs$draws('ppcheck_e1', format = 'matrix')

swarm_area <- apply(post_norm_degreeW15_obs[, grep('swarm_area', colnames(post_norm_degreeW15_obs))], 
                    2, mean)

swarm_BM <- 
  apply(post_norm_degreeW15_obs[, grep('SBiomass_merge', colnames(post_norm_degreeW15_obs))], 
        2, mean)

par(mfrow = c(2, 2), mar = c(4, 4, 1, 1))
plot(density(temp_data[-3]$cum_rainfall_W15), 
     main = '', xlab = 'Cum rainfall W15')
for(i in 1:100) lines(density(ppcheck_R1[i, ]), lwd = 0.1)
lines(density(temp_data[-3]$cum_rainfall_W15), col = 'red')

plot(density(swarm_area), main = '', xlab = 'Swarm area')
for(i in 1:100) lines(density(ppcheck_swarmA[i, ]), lwd = 0.1)
lines(density(swarm_area), col = 'red')

plot(density(swarm_BM), main = '', xlab = 'Arthropod biomass')
for(i in 1:100) lines(density(ppcheck_swarmB[i, ]), lwd = 0.1)
lines(density(swarm_BM), col = 'red')

plot(density(temp_data[-3]$norm_degree), 
     main = '', xlab = 'Net size')
for(i in 1:100) lines(density(ppcheck_norm_degree[i, ]), lwd = 0.1)
lines(density(temp_data[-3]$norm_degree), col = 'red')

post_beta_norm_degreeW15 <- gather(post_norm_degreeW15_obs[, grep('beta', colnames(post_norm_degreeW15_obs))])

post_beta_norm_degreeW15$key <- as.factor(post_beta_norm_degreeW15$key)

```

### Window 20 model

#### Stan code

```{r, eval=FALSE}
cat(file = 'w20_norm_degree.stan', 
    "
    
    functions {
    
      vector scale(vector x) {
        int N = dims(x)[1];
        real mu = mean(x);
        real sigma = sd(x);
        vector[N] scaled_v;
    
        for (i in 1:N) {
          scaled_v[i] = (x[i] - mu) / sigma;
        }
        return scaled_v;
      }  
    
      vector merge_missing(array[] int miss_indxex, vector x_obs, vector x_miss) {
                int N = dims(x_obs)[1];
                int N_miss = dims(x_miss)[1];
                vector[N] merge;
                merge = x_obs;
                for (i in 1:N_miss) {
                    merge[miss_indxex[i]] = x_miss[i];
                }
            return merge;
          }
    
    
      matrix cov_GPL2(matrix x,
                      real eta,
                      real rho,
                      real delta) {
                      
                      int N = dims(x)[1];
                      matrix[N, N] K;
    
                      for (i in 1:(N-1)) {
                        K[i, i] = eta + delta;
                        for (j in (i + 1):N) {
                          K[i, j] = eta * exp(-rho * square(x[i, j]));
                          K[j, i] = K[i, j];
                        }
                      }
                      K[N, N] = eta + delta;
                      return K;
                      }
    }
    
    data {
      int N;
      int N_day;
      int N_month;
      int N_season;
      int N_site;
      int N_dim_day;
      int N_naSwarmBio;
      int N_naSwarmINI;
      int N_naSwarmFIN;
      array[N_naSwarmBio] int SwarmB_missindx;
      array[N_naSwarmINI] int SwarmINI_missindx;
      array[N_naSwarmFIN] int SwarmFIN_missindx;
      vector[N] norm_degree;
      array[N] int day;
      array[N] int month;
      array[N] int season;
      array[N] int site;
      vector[N] swarm_biomass;
      vector[N] swarm_area_inital;
      vector[N] swarm_area_final;
      array[N] int cum_rainfall_W20;
      array[N] int cum_rainfall_W25;
      matrix[N_dim_day, N_dim_day] dist_day;
    }
    
    parameters {
      /////////////
      ///////////// imputed variables
      vector[N_naSwarmBio] SBiomass_impute;
      real mu_sb;
      real<lower = 0> sigma_sb;
      vector[N_naSwarmINI] SwarmINI_impute;
      real mu_sbINI;
      real<lower = 0> sigma_sbINI;
      vector[N_naSwarmFIN] SwarmFIN_impute;
      real mu_sbFIN;
      real<lower = 0> sigma_sbFIN;
    
      //////////////
      ///////////// rain_i+n -> rain_i
      real a_e1;
      real beta_rainW2_e1;
      real<lower = 0> sigma_e1;
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm
      matrix[N_site, N_season] a_e2;
      matrix[N_site, N_season] beta_rainW1_e2;
      real<lower = 0> sigma_e2;
    
      vector[N_day] z_theta_e2;
      real<lower = 0> eta_theta_e2;
      real<lower = 0> rho_theta_e2;
    
      matrix[N_season, N_month] z_tau_e2;
      real mu_tau_e2;
      real<lower = 0> sigma_tau_e2;
    
      matrix[N_site, N_month] z_psi_e2;
      real mu_psi_e2;
      real<lower = 0> sigma_psi_e2;
      
      ////////////////////
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      matrix[N_site, N_season] a_e3;
      matrix[N_site, N_season] beta_rainW1_e3;
      matrix[N_site, N_season] beta_sawrA_e3;
      real<lower = 0> sigma_e3;
    
      vector[N_day] z_theta_e3;
      real<lower = 0> eta_theta_e3;
      real<lower = 0> rho_theta_e3;
    
      matrix[N_season, N_month] z_tau_e3;
      real mu_tau_e3;
      real<lower = 0> sigma_tau_e3;
    
      matrix[N_site, N_month] z_psi_e3;
      real mu_psi_e3;
      real<lower = 0> sigma_psi_e3;
      
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      matrix[N_site, N_season] a_e4;
      matrix[N_site, N_season] beta_rainW1_e4;
      matrix[N_site, N_season] beta_sawrA_e4;
      matrix[N_site, N_season] beta_swarmB_e4;
      real<lower = 0> sigma_e4;
    
      vector[N_day] z_theta_e4;
      real<lower = 0> eta_theta_e4;
      real<lower = 0> rho_theta_e4;
    
      matrix[N_season, N_month] z_tau_e4;
      real mu_tau_e4;
      real<lower = 0> sigma_tau_e4;
    
      matrix[N_site, N_month] z_psi_e4;
      real mu_psi_e4;
      real<lower = 0> sigma_psi_e4;
      
      ////////////////////
    
      
    }
    
    transformed parameters{
      
      ///////////////////////
      ///////////////////////// imputed variables
      vector[N] swarm_area;
      vector[N] SBiomass_merge;
      SBiomass_merge = merge_missing(SwarmB_missindx, 
                                     to_vector(swarm_biomass), 
                                     SBiomass_impute);
      vector[N] swarmINI_merge;
      swarmINI_merge = merge_missing(SwarmINI_missindx, 
                                     to_vector(swarm_area_inital), 
                                     SwarmINI_impute);
      vector[N] swarmFIN_merge;
      swarmFIN_merge = merge_missing(SwarmFIN_missindx, 
                                     to_vector(swarm_area_final), 
                                     SwarmFIN_impute);
      swarm_area = (swarmINI_merge + swarmFIN_merge) / 2;
      // swarm_area = scale(swarm_area);
      // SBiomass_merge = scale(SBiomass_merge);
    
      ///////////////////
      ///////////////////////// rain_i -> swarm
      
      vector[N_day] theta_e2;
      matrix[N_dim_day, N_dim_day] sigma_theta_e2;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e2;
      sigma_theta_e2 = cov_GPL2(dist_day, eta_theta_e2, rho_theta_e2, 0.01);
      L_sigma_theta_e2 = cholesky_decompose(sigma_theta_e2);
      theta_e2 = L_sigma_theta_e2 * z_theta_e2;
    
      matrix[N_season, N_month] tau_e2;
      matrix[N_site, N_month] psi_e2;
      tau_e2 = mu_tau_e2 + z_tau_e2 * sigma_tau_e2;
      psi_e2 = mu_psi_e2 + z_psi_e2 * sigma_psi_e2;
      
      ///////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      
      vector[N_day] theta_e3;
      matrix[N_dim_day, N_dim_day] sigma_theta_e3;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e3;
      sigma_theta_e3 = cov_GPL2(dist_day, eta_theta_e3, rho_theta_e3, 0.01);
      L_sigma_theta_e3 = cholesky_decompose(sigma_theta_e3);
      theta_e3 = L_sigma_theta_e3 * z_theta_e3;
    
      matrix[N_season, N_month] tau_e3;
      matrix[N_site, N_month] psi_e3;
      tau_e3 = mu_tau_e3 + z_tau_e3 * sigma_tau_e3;
      psi_e3 = mu_psi_e3 + z_psi_e3 * sigma_psi_e3;
    
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      
      vector[N_day] theta_e4;
      matrix[N_dim_day, N_dim_day] sigma_theta_e4;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e4;
      sigma_theta_e4 = cov_GPL2(dist_day, eta_theta_e4, rho_theta_e4, 0.01);
      L_sigma_theta_e4 = cholesky_decompose(sigma_theta_e4);
      theta_e4 = L_sigma_theta_e4 * z_theta_e4;
    
      matrix[N_season, N_month] tau_e4;
      matrix[N_site, N_month] psi_e4;
      tau_e4 = mu_tau_e4 + z_tau_e4 * sigma_tau_e4;
      psi_e4 = mu_psi_e4 + z_psi_e4 * sigma_psi_e4;
    
      ///////////////////
    }
    
    model {
      vector[N] mu;
      vector[N] p1;
      vector[N] p2;
      ///////////////////////
      /////////////////////// imputed variables
      mu_sb ~ normal(3.5, 1);
      sigma_sb ~ exponential(1);
      SBiomass_merge ~ normal(mu_sb, sigma_sb);
      mu_sbINI ~ normal(3.5, 1);
      sigma_sbINI ~ exponential(1);
      swarmINI_merge ~ normal(mu_sbINI, sigma_sbINI);
      mu_sbFIN ~ normal(3.5, 1);
      sigma_sbFIN ~ exponential(1);
      swarmFIN_merge ~ normal(mu_sbFIN, sigma_sbFIN);
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      vector[N] mu_e1;
      a_e1 ~ normal(0, 1);
      beta_rainW2_e1 ~ normal(0, 0.5);
      sigma_e1 ~ exponential(1);
      
      ///////////////////
      /////////////////// rain_i -> swarm
      to_vector(a_e2) ~ normal(3, 1);
      sigma_e2 ~ exponential(1);
      to_vector(beta_rainW1_e2) ~ normal(0, 0.25);
    
      z_theta_e2 ~ normal(0, 0.5);     
      eta_theta_e2 ~ exponential(3);   
      rho_theta_e2 ~ exponential(0.5); 
      
      to_vector(z_tau_e2) ~ normal(0, 0.5);
      mu_tau_e2 ~ normal(0, 0.5);
      sigma_tau_e2 ~ exponential(1);
    
      to_vector(z_psi_e2) ~ normal(0, 0.5);
      mu_psi_e2 ~ normal(0, 0.5);
      sigma_psi_e2 ~ exponential(1);
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      to_vector(a_e3) ~ normal(2.5, 1);
      sigma_e3 ~ exponential(1);
      to_vector(beta_rainW1_e3) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e3) ~ normal(0, 3);
    
      z_theta_e3 ~ normal(0, 1);
      eta_theta_e3 ~ exponential(3);
      rho_theta_e3 ~ exponential(0.5);
      
      to_vector(z_tau_e3) ~ normal(0, 0.5);
      mu_tau_e3 ~ normal(0, 0.5);
      sigma_tau_e3 ~ exponential(1);
    
      to_vector(z_psi_e3) ~ normal(0, 0.5);
      mu_psi_e3 ~ normal(0, 0.5);
      sigma_psi_e3 ~ exponential(1);
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      to_vector(a_e4) ~ normal(0, 0.5);
      sigma_e4 ~ exponential(1);
      to_vector(beta_rainW1_e4) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e4) ~ normal(0, 0.5);
      to_vector(beta_swarmB_e4) ~ normal(0, 0.5);
    
      z_theta_e4 ~ normal(0, 0.5);
      eta_theta_e4 ~ exponential(3);
      rho_theta_e4 ~ exponential(0.5);
      
      to_vector(z_tau_e4) ~ normal(0, 0.5);
      mu_tau_e4 ~ normal(0, 0.5);
      sigma_tau_e4 ~ exponential(1);
    
      to_vector(z_psi_e4) ~ normal(0, 0.5);
      mu_psi_e4 ~ normal(0, 0.5);
      sigma_psi_e4 ~ exponential(1);
      
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      for (i in 1:N) {
        cum_rainfall_W20[i] ~ normal(a_e1 + beta_rainW2_e1 * cum_rainfall_W25[i], 
                                    sigma_e1);
      }
    
      ///////////////////
      /////////////////// rain_i -> swarm
      for (i in 1:N) {
        swarm_area[i] ~ student_t(2,
                                  a_e2[site[i], season[i]] + 
                                  beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W20[i] +
                                  theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                                  psi_e2[site[i], month[i]], 
                                  sigma_e2);
      }
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      for (i in 1:N) {
        SBiomass_merge[i] ~ student_t(2,
                                     a_e3[site[i], season[i]] + 
                                     beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W20[i] +
                                     beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                                     theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                                     psi_e3[site[i], month[i]], 
                                     sigma_e3);
      }
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      for (i in 1:N) {
         norm_degree[i] ~ student_t(7, a_e4[site[i], season[i]] + 
                           beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W20[i] +
                           beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                           beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                           theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                           psi_e4[site[i], month[i]], sigma_e4);
      }
    
      //p1 = mu * sigma_e4;
      //p2 = (1 - mu) * sigma_e4;
    
      //norm_degree ~ beta(p1, p2);
    
    }
    
    generated quantities {
      vector[N] mu_e1;
      vector[N] mu_e2;
      vector[N] mu_e3;
      vector[N] mu_e4;
      vector[N] p1;
      vector[N] p2;
      array[N] real ppcheck_e1;
      array[N] real ppcheck_e2;
      array[N] real ppcheck_e3;
      array[N] real ppcheck_e4;
      
      for (i in 1:N) {
        mu_e1[i] = a_e1 + beta_rainW2_e1 * cum_rainfall_W25[i]; 
      }
    
      ppcheck_e1 = normal_rng(mu_e1, sigma_e1);
    
      for (i in 1:N) {
        mu_e2[i] = a_e2[site[i], season[i]] + 
                  beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W20[i] +
                  theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                  psi_e2[site[i], month[i]];
      }
      
      ppcheck_e2 = student_t_rng(2, mu_e2, sigma_e2);
    
    
      for (i in 1:N) {
        mu_e3[i] = a_e3[site[i], season[i]] + 
                   beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W20[i] +
                   beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                   theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                   psi_e3[site[i], month[i]];
      }
      
      ppcheck_e3 = student_t_rng(2, mu_e3, sigma_e3);
    
      for (i in 1:N) {
         mu_e4[i] = a_e4[site[i], season[i]] + 
                           beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W20[i] +
                           beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                           beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                           theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                           psi_e4[site[i], month[i]];
      }
    
      //p1 = mu_e4 * sigma_e4;
      //p2 = (1 - mu_e4) * sigma_e4;
    
      ppcheck_e4 = student_t_rng(7, mu_e4, sigma_e4);
    
    }
    
    ")

```

#### Running MCMC algorithm


```{r, eval=FALSE}
file <- paste(getwd(), '/w20_norm_degree.stan', sep ='')

fit_norm_degreeW20 <- cmdstan_model(file, compile = T)

mod_norm_degreeW20_obs <- 
  fit_norm_degreeW20$sample(
    data = temp_data[-3], 
    chains = 3, 
    parallel_chains = 3, 
    iter_sampling = 8e3, 
    iter_warmup = 500, 
    thin = 10, 
    seed = 123
  )

```

```{r, echo=FALSE, eval=TRUE}
mod_norm_degreeW20_obs <- readRDS('causal_mod_norm_degreeW20_2.rds')
```

#### Model diagnostics

```{r, fig.height=15, fig.cap="Rhat values and ess of group-level parameters from the generative model explaining the effect of cumulative rainfall during W20, on network normalized degree of ant followers birds."}

par(mfrow = c(5, 2), mar = c(4, 4, 1.5, 1))
mod_diagnostics(mod_norm_degreeW20_obs, 
                mod_norm_degreeW20_obs$summary(
                  unique(paste('psi_e2[', 
                               temp_data$site,
                               ',',
                               temp_data$month, ']', 
                               sep = '')))) 

mod_diagnostics(mod_norm_degreeW20_obs, 
                mod_norm_degreeW20_obs$summary(
                  unique(paste('psi_e3[', 
                               temp_data$site,
                               ',',
                               temp_data$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_norm_degreeW20_obs, 
                mod_norm_degreeW20_obs$summary(
                  unique(paste('psi_e4[', 
                               temp_data$site,
                               ',',
                               temp_data$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_norm_degreeW20_obs, 
                mod_norm_degreeW20_obs$summary(
                  unique(paste('tau_e4[', 
                               temp_data$year,
                               ',',
                               temp_data$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_norm_degreeW20_obs, 
                mod_norm_degreeW20_obs$summary(
                  unique(paste('tau_e2[', 
                               temp_data$year,
                               ',',
                               temp_data$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_norm_degreeW20_obs, 
                mod_norm_degreeW20_obs$summary(
                  unique(paste('tau_e3[', 
                               temp_data$year,
                               ',',
                               temp_data$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_norm_degreeW20_obs, 
                mod_norm_degreeW20_obs$summary(paste('theta_e4[', 
                                                     1:temp_data$N_day, ']', 
                                                     sep = '')))
mod_diagnostics(mod_norm_degreeW20_obs, 
                mod_norm_degreeW20_obs$summary(paste('theta_e3[', 
                                                     1:temp_data$N_day, ']', 
                                                     sep = '')))

mod_diagnostics(mod_norm_degreeW20_obs, 
                mod_norm_degreeW20_obs$summary(paste('theta_e2[', 
                                                     1:temp_data$N_day, ']', 
                                                     sep = '')))
par(mfrow = c(1, 1))
```

```{r, fig.cap="Rhat values and ess of slope, intercept, and dispersion parameters  from the generative model explaining the effect of cumulative rainfall during W20, on network normalized degree of ant followers birds."}
summary_norm_degreeW20 <- mod_norm_degreeW20_obs$summary(c('beta_rainW2_e1', 
                                                           'beta_rainW1_e2',
                                                           'beta_rainW1_e3',
                                                           'beta_rainW1_e4',
                                                           'beta_sawrA_e3',
                                                           'beta_sawrA_e4',
                                                           'beta_swarmB_e4', 
                                                           'a_e1', 'a_e2', 
                                                           'a_e3', 'a_e4',
                                                           'sigma_e1', 'sigma_e2', 
                                                           'sigma_e3', 'sigma_e4', 
                                                           'swarm_area',
                                                           'SBiomass_merge',
                                                           'lp__'))


mod_diagnostics(mod_norm_degreeW20_obs, summary_norm_degreeW20)

```


```{r, fig.cap= "Posterior predictive checks"}
post_norm_degreeW20_obs <- mod_norm_degreeW20_obs$draws(c('beta_rainW2_e1', 
                                                          'beta_rainW1_e2',
                                                          'beta_rainW1_e3',
                                                          'beta_rainW1_e4',
                                                          'beta_sawrA_e3',
                                                          'beta_sawrA_e4',
                                                          'beta_swarmB_e4', 
                                                          'a_e1', 'a_e2', 'a_e3', 'a_e4',
                                                          'sigma_e1', 'sigma_e2', 
                                                          'sigma_e3', 'sigma_e4',
                                                          'swarm_area',
                                                          'SBiomass_merge'
), 
format = 'df')

ppcheck_swarmA <- mod_norm_degreeW20_obs$draws('ppcheck_e2', format = 'matrix')
ppcheck_swarmB <- mod_norm_degreeW20_obs$draws('ppcheck_e3', format = 'matrix')
ppcheck_norm_degree <- mod_norm_degreeW20_obs$draws('ppcheck_e4', format = 'matrix')
ppcheck_R1 <- mod_norm_degreeW20_obs$draws('ppcheck_e1', format = 'matrix')

swarm_area <- apply(post_norm_degreeW20_obs[, grep('swarm_area', colnames(post_norm_degreeW20_obs))], 
                    2, mean)

swarm_BM <- 
  apply(post_norm_degreeW20_obs[, grep('SBiomass_merge', colnames(post_norm_degreeW20_obs))], 
        2, mean)

par(mfrow = c(2, 2), mar = c(4, 4, 1, 1))
plot(density(temp_data[-3]$cum_rainfall_W20), 
     main = '', xlab = 'Cum rainfall W20')
for(i in 1:100) lines(density(ppcheck_R1[i, ]), lwd = 0.1)
lines(density(temp_data[-3]$cum_rainfall_W20), col = 'red')

plot(density(swarm_area), main = '', xlab = 'Swarm area')
for(i in 1:100) lines(density(ppcheck_swarmA[i, ]), lwd = 0.1)
lines(density(swarm_area), col = 'red')

plot(density(swarm_BM), main = '', xlab = 'Arthropod biomass')
for(i in 1:100) lines(density(ppcheck_swarmB[i, ]), lwd = 0.1)
lines(density(swarm_BM), col = 'red')

plot(density(temp_data[-3]$norm_degree), 
     main = '', xlab = 'Net size')
for(i in 1:100) lines(density(ppcheck_norm_degree[i, ]), lwd = 0.1)
lines(density(temp_data[-3]$norm_degree), col = 'red')

post_beta_norm_degreeW20 <- gather(post_norm_degreeW20_obs[, grep('beta', colnames(post_norm_degreeW20_obs))])

post_beta_norm_degreeW20$key <- as.factor(post_beta_norm_degreeW20$key)

```

### Window 25 model

#### Stan code

```{r, eval=FALSE}
cat(file = 'w25_norm_degree.stan', 
    "
    
    functions {
    
      vector scale(vector x) {
        int N = dims(x)[1];
        real mu = mean(x);
        real sigma = sd(x);
        vector[N] scaled_v;
    
        for (i in 1:N) {
          scaled_v[i] = (x[i] - mu) / sigma;
        }
        return scaled_v;
      }  
    
      vector merge_missing(array[] int miss_indxex, vector x_obs, vector x_miss) {
                int N = dims(x_obs)[1];
                int N_miss = dims(x_miss)[1];
                vector[N] merge;
                merge = x_obs;
                for (i in 1:N_miss) {
                    merge[miss_indxex[i]] = x_miss[i];
                }
            return merge;
          }
    
    
      matrix cov_GPL2(matrix x,
                      real eta,
                      real rho,
                      real delta) {
                      
                      int N = dims(x)[1];
                      matrix[N, N] K;
    
                      for (i in 1:(N-1)) {
                        K[i, i] = eta + delta;
                        for (j in (i + 1):N) {
                          K[i, j] = eta * exp(-rho * square(x[i, j]));
                          K[j, i] = K[i, j];
                        }
                      }
                      K[N, N] = eta + delta;
                      return K;
                      }
    }
    
    data {
      int N;
      int N_day;
      int N_month;
      int N_season;
      int N_site;
      int N_dim_day;
      int N_naSwarmBio;
      int N_naSwarmINI;
      int N_naSwarmFIN;
      array[N_naSwarmBio] int SwarmB_missindx;
      array[N_naSwarmINI] int SwarmINI_missindx;
      array[N_naSwarmFIN] int SwarmFIN_missindx;
      vector[N] norm_degree;
      array[N] int day;
      array[N] int month;
      array[N] int season;
      array[N] int site;
      vector[N] swarm_biomass;
      vector[N] swarm_area_inital;
      vector[N] swarm_area_final;
      array[N] int cum_rainfall_W30;
      array[N] int cum_rainfall_W25;
      matrix[N_dim_day, N_dim_day] dist_day;
    }
    
    parameters {
      /////////////
      ///////////// imputed variables
      vector[N_naSwarmBio] SBiomass_impute;
      real mu_sb;
      real<lower = 0> sigma_sb;
      vector[N_naSwarmINI] SwarmINI_impute;
      real mu_sbINI;
      real<lower = 0> sigma_sbINI;
      vector[N_naSwarmFIN] SwarmFIN_impute;
      real mu_sbFIN;
      real<lower = 0> sigma_sbFIN;
    
      //////////////
      ///////////// rain_i+n -> rain_i
      real a_e1;
      real beta_rainW2_e1;
      real<lower = 0> sigma_e1;
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm
      matrix[N_site, N_season] a_e2;
      matrix[N_site, N_season] beta_rainW1_e2;
      real<lower = 0> sigma_e2;
    
      vector[N_day] z_theta_e2;
      real<lower = 0> eta_theta_e2;
      real<lower = 0> rho_theta_e2;
    
      matrix[N_season, N_month] z_tau_e2;
      real mu_tau_e2;
      real<lower = 0> sigma_tau_e2;
    
      matrix[N_site, N_month] z_psi_e2;
      real mu_psi_e2;
      real<lower = 0> sigma_psi_e2;
      
      ////////////////////
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      matrix[N_site, N_season] a_e3;
      matrix[N_site, N_season] beta_rainW1_e3;
      matrix[N_site, N_season] beta_sawrA_e3;
      real<lower = 0> sigma_e3;
    
      vector[N_day] z_theta_e3;
      real<lower = 0> eta_theta_e3;
      real<lower = 0> rho_theta_e3;
    
      matrix[N_season, N_month] z_tau_e3;
      real mu_tau_e3;
      real<lower = 0> sigma_tau_e3;
    
      matrix[N_site, N_month] z_psi_e3;
      real mu_psi_e3;
      real<lower = 0> sigma_psi_e3;
      
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      matrix[N_site, N_season] a_e4;
      matrix[N_site, N_season] beta_rainW1_e4;
      matrix[N_site, N_season] beta_sawrA_e4;
      matrix[N_site, N_season] beta_swarmB_e4;
      real<lower = 0> sigma_e4;
    
      vector[N_day] z_theta_e4;
      real<lower = 0> eta_theta_e4;
      real<lower = 0> rho_theta_e4;
    
      matrix[N_season, N_month] z_tau_e4;
      real mu_tau_e4;
      real<lower = 0> sigma_tau_e4;
    
      matrix[N_site, N_month] z_psi_e4;
      real mu_psi_e4;
      real<lower = 0> sigma_psi_e4;
      
      ////////////////////
    
      
    }
    
    transformed parameters{
      
      ///////////////////////
      ///////////////////////// imputed variables
      vector[N] swarm_area;
      vector[N] SBiomass_merge;
      SBiomass_merge = merge_missing(SwarmB_missindx, 
                                     to_vector(swarm_biomass), 
                                     SBiomass_impute);
      vector[N] swarmINI_merge;
      swarmINI_merge = merge_missing(SwarmINI_missindx, 
                                     to_vector(swarm_area_inital), 
                                     SwarmINI_impute);
      vector[N] swarmFIN_merge;
      swarmFIN_merge = merge_missing(SwarmFIN_missindx, 
                                     to_vector(swarm_area_final), 
                                     SwarmFIN_impute);
      swarm_area = (swarmINI_merge + swarmFIN_merge) / 2;
      // swarm_area = scale(swarm_area);
      // SBiomass_merge = scale(SBiomass_merge);
    
      ///////////////////
      ///////////////////////// rain_i -> swarm
      
      vector[N_day] theta_e2;
      matrix[N_dim_day, N_dim_day] sigma_theta_e2;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e2;
      sigma_theta_e2 = cov_GPL2(dist_day, eta_theta_e2, rho_theta_e2, 0.01);
      L_sigma_theta_e2 = cholesky_decompose(sigma_theta_e2);
      theta_e2 = L_sigma_theta_e2 * z_theta_e2;
    
      matrix[N_season, N_month] tau_e2;
      matrix[N_site, N_month] psi_e2;
      tau_e2 = mu_tau_e2 + z_tau_e2 * sigma_tau_e2;
      psi_e2 = mu_psi_e2 + z_psi_e2 * sigma_psi_e2;
      
      ///////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      
      vector[N_day] theta_e3;
      matrix[N_dim_day, N_dim_day] sigma_theta_e3;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e3;
      sigma_theta_e3 = cov_GPL2(dist_day, eta_theta_e3, rho_theta_e3, 0.01);
      L_sigma_theta_e3 = cholesky_decompose(sigma_theta_e3);
      theta_e3 = L_sigma_theta_e3 * z_theta_e3;
    
      matrix[N_season, N_month] tau_e3;
      matrix[N_site, N_month] psi_e3;
      tau_e3 = mu_tau_e3 + z_tau_e3 * sigma_tau_e3;
      psi_e3 = mu_psi_e3 + z_psi_e3 * sigma_psi_e3;
    
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      
      vector[N_day] theta_e4;
      matrix[N_dim_day, N_dim_day] sigma_theta_e4;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e4;
      sigma_theta_e4 = cov_GPL2(dist_day, eta_theta_e4, rho_theta_e4, 0.01);
      L_sigma_theta_e4 = cholesky_decompose(sigma_theta_e4);
      theta_e4 = L_sigma_theta_e4 * z_theta_e4;
    
      matrix[N_season, N_month] tau_e4;
      matrix[N_site, N_month] psi_e4;
      tau_e4 = mu_tau_e4 + z_tau_e4 * sigma_tau_e4;
      psi_e4 = mu_psi_e4 + z_psi_e4 * sigma_psi_e4;
    
      ///////////////////
    }
    
    model {
      vector[N] mu;
      vector[N] p1;
      vector[N] p2;
      ///////////////////////
      /////////////////////// imputed variables
      mu_sb ~ normal(3.5, 1);
      sigma_sb ~ exponential(1);
      SBiomass_merge ~ normal(mu_sb, sigma_sb);
      mu_sbINI ~ normal(3.5, 1);
      sigma_sbINI ~ exponential(1);
      swarmINI_merge ~ normal(mu_sbINI, sigma_sbINI);
      mu_sbFIN ~ normal(3.5, 1);
      sigma_sbFIN ~ exponential(1);
      swarmFIN_merge ~ normal(mu_sbFIN, sigma_sbFIN);
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      vector[N] mu_e1;
      a_e1 ~ normal(0, 1);
      beta_rainW2_e1 ~ normal(0, 0.5);
      sigma_e1 ~ exponential(1);
      
      ///////////////////
      /////////////////// rain_i -> swarm
      to_vector(a_e2) ~ normal(3, 1);
      sigma_e2 ~ exponential(1);
      to_vector(beta_rainW1_e2) ~ normal(0, 0.25);
    
      z_theta_e2 ~ normal(0, 0.5);     
      eta_theta_e2 ~ exponential(3);   
      rho_theta_e2 ~ exponential(0.5); 
      
      to_vector(z_tau_e2) ~ normal(0, 0.5);
      mu_tau_e2 ~ normal(0, 0.5);
      sigma_tau_e2 ~ exponential(1);
    
      to_vector(z_psi_e2) ~ normal(0, 0.5);
      mu_psi_e2 ~ normal(0, 0.5);
      sigma_psi_e2 ~ exponential(1);
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      to_vector(a_e3) ~ normal(2.5, 1);
      sigma_e3 ~ exponential(1);
      to_vector(beta_rainW1_e3) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e3) ~ normal(0, 3);
    
      z_theta_e3 ~ normal(0, 1);
      eta_theta_e3 ~ exponential(3);
      rho_theta_e3 ~ exponential(0.5);
      
      to_vector(z_tau_e3) ~ normal(0, 0.5);
      mu_tau_e3 ~ normal(0, 0.5);
      sigma_tau_e3 ~ exponential(1);
    
      to_vector(z_psi_e3) ~ normal(0, 0.5);
      mu_psi_e3 ~ normal(0, 0.5);
      sigma_psi_e3 ~ exponential(1);
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      to_vector(a_e4) ~ normal(0, 0.5);
      sigma_e4 ~ exponential(1);
      to_vector(beta_rainW1_e4) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e4) ~ normal(0, 0.5);
      to_vector(beta_swarmB_e4) ~ normal(0, 0.5);
    
      z_theta_e4 ~ normal(0, 0.5);
      eta_theta_e4 ~ exponential(3);
      rho_theta_e4 ~ exponential(0.5);
      
      to_vector(z_tau_e4) ~ normal(0, 0.5);
      mu_tau_e4 ~ normal(0, 0.5);
      sigma_tau_e4 ~ exponential(1);
    
      to_vector(z_psi_e4) ~ normal(0, 0.5);
      mu_psi_e4 ~ normal(0, 0.5);
      sigma_psi_e4 ~ exponential(1);
      
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      for (i in 1:N) {
        cum_rainfall_W25[i] ~ normal(a_e1 + beta_rainW2_e1 * cum_rainfall_W30[i], 
                                    sigma_e1);
      }
    
      ///////////////////
      /////////////////// rain_i -> swarm
      for (i in 1:N) {
        swarm_area[i] ~ student_t(2,
                                  a_e2[site[i], season[i]] + 
                                  beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W25[i] +
                                  theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                                  psi_e2[site[i], month[i]], 
                                  sigma_e2);
      }
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      for (i in 1:N) {
        SBiomass_merge[i] ~ student_t(2,
                                     a_e3[site[i], season[i]] + 
                                     beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W25[i] +
                                     beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                                     theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                                     psi_e3[site[i], month[i]], 
                                     sigma_e3);
      }
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      for (i in 1:N) {
         norm_degree[i] ~ student_t(7, a_e4[site[i], season[i]] + 
                           beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W25[i] +
                           beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                           beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                           theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                           psi_e4[site[i], month[i]], sigma_e4);
      }
    
      //p1 = mu * sigma_e4;
      //p2 = (1 - mu) * sigma_e4;
    
      //norm_degree ~ beta(p1, p2);
    
    }
    
    generated quantities {
      vector[N] mu_e1;
      vector[N] mu_e2;
      vector[N] mu_e3;
      vector[N] mu_e4;
      vector[N] p1;
      vector[N] p2;
      array[N] real ppcheck_e1;
      array[N] real ppcheck_e2;
      array[N] real ppcheck_e3;
      array[N] real ppcheck_e4;
      
      for (i in 1:N) {
        mu_e1[i] = a_e1 + beta_rainW2_e1 * cum_rainfall_W30[i]; 
      }
    
      ppcheck_e1 = normal_rng(mu_e1, sigma_e1);
    
      for (i in 1:N) {
        mu_e2[i] = a_e2[site[i], season[i]] + 
                  beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W25[i] +
                  theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                  psi_e2[site[i], month[i]];
      }
      
      ppcheck_e2 = student_t_rng(2, mu_e2, sigma_e2);
    
    
      for (i in 1:N) {
        mu_e3[i] = a_e3[site[i], season[i]] + 
                   beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W25[i] +
                   beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                   theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                   psi_e3[site[i], month[i]];
      }
      
      ppcheck_e3 = student_t_rng(2, mu_e3, sigma_e3);
    
      for (i in 1:N) {
         mu_e4[i] = a_e4[site[i], season[i]] + 
                           beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W25[i] +
                           beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                           beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                           theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                           psi_e4[site[i], month[i]];
      }
    
      //p1 = mu_e4 * sigma_e4;
      //p2 = (1 - mu_e4) * sigma_e4;
    
      ppcheck_e4 = student_t_rng(7, mu_e4, sigma_e4);
    
    }
    
    ")
```

#### Running MCMC algorithm


```{r, eval=FALSE}
file <- paste(getwd(), '/w25_norm_degree.stan', sep ='')

fit_norm_degreeW25 <- cmdstan_model(file, compile = T)

mod_norm_degreeW25_obs <- 
  fit_norm_degreeW25$sample(
    data = temp_data[-3], 
    chains = 3, 
    parallel_chains = 3, 
    iter_sampling = 8e3, 
    iter_warmup = 500, 
    thin = 10, 
    seed = 123
  )

```

```{r, echo=FALSE, eval=TRUE}
mod_norm_degreeW25_obs <- readRDS('causal_mod_norm_degreeW25_2.rds')
```

#### Model diagnostics

```{r, fig.height=15, fig.cap="Rhat values and ess of group-level parameters from the generative model explaining the effect of cumulative rainfall during W25, on network normalized degree of ant followers birds."}

par(mfrow = c(5, 2), mar = c(4, 4, 1.5, 1))
mod_diagnostics(mod_norm_degreeW25_obs, 
                mod_norm_degreeW25_obs$summary(
                  unique(paste('psi_e2[', 
                               temp_data$site,
                               ',',
                               temp_data$month, ']', 
                               sep = '')))) 

mod_diagnostics(mod_norm_degreeW25_obs, 
                mod_norm_degreeW25_obs$summary(
                  unique(paste('psi_e3[', 
                               temp_data$site,
                               ',',
                               temp_data$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_norm_degreeW25_obs, 
                mod_norm_degreeW25_obs$summary(
                  unique(paste('psi_e4[', 
                               temp_data$site,
                               ',',
                               temp_data$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_norm_degreeW25_obs, 
                mod_norm_degreeW25_obs$summary(
                  unique(paste('tau_e4[', 
                               temp_data$year,
                               ',',
                               temp_data$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_norm_degreeW25_obs, 
                mod_norm_degreeW25_obs$summary(
                  unique(paste('tau_e2[', 
                               temp_data$year,
                               ',',
                               temp_data$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_norm_degreeW25_obs, 
                mod_norm_degreeW25_obs$summary(
                  unique(paste('tau_e3[', 
                               temp_data$year,
                               ',',
                               temp_data$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_norm_degreeW25_obs, 
                mod_norm_degreeW25_obs$summary(paste('theta_e4[', 
                                                     1:temp_data$N_day, ']', 
                                                     sep = '')))
mod_diagnostics(mod_norm_degreeW25_obs, 
                mod_norm_degreeW25_obs$summary(paste('theta_e3[', 
                                                     1:temp_data$N_day, ']', 
                                                     sep = '')))

mod_diagnostics(mod_norm_degreeW25_obs, 
                mod_norm_degreeW25_obs$summary(paste('theta_e2[', 
                                                     1:temp_data$N_day, ']', 
                                                     sep = '')))
par(mfrow = c(1, 1))
```

```{r, fig.cap="Rhat values and ess of slope, intercept, and dispersion parameters  from the generative model explaining the effect of cumulative rainfall during W25, on network normalized degree of ant followers birds."}
summary_norm_degreeW25 <- mod_norm_degreeW25_obs$summary(c('beta_rainW2_e1', 
                                                           'beta_rainW1_e2',
                                                           'beta_rainW1_e3',
                                                           'beta_rainW1_e4',
                                                           'beta_sawrA_e3',
                                                           'beta_sawrA_e4',
                                                           'beta_swarmB_e4', 
                                                           'a_e1', 'a_e2', 
                                                           'a_e3', 'a_e4',
                                                           'sigma_e1', 'sigma_e2', 
                                                           'sigma_e3', 'sigma_e4', 
                                                           'swarm_area',
                                                           'SBiomass_merge',
                                                           'lp__'))


mod_diagnostics(mod_norm_degreeW25_obs, summary_norm_degreeW25)
```


```{r, fig.cap= "Posterior predictive checks"}
post_norm_degreeW25_obs <- mod_norm_degreeW25_obs$draws(c('beta_rainW2_e1', 
                                                          'beta_rainW1_e2',
                                                          'beta_rainW1_e3',
                                                          'beta_rainW1_e4',
                                                          'beta_sawrA_e3',
                                                          'beta_sawrA_e4',
                                                          'beta_swarmB_e4', 
                                                          'a_e1', 'a_e2', 'a_e3', 'a_e4',
                                                          'sigma_e1', 'sigma_e2', 
                                                          'sigma_e3', 'sigma_e4',
                                                          'swarm_area',
                                                          'SBiomass_merge'
), 
format = 'df')

ppcheck_swarmA <- mod_norm_degreeW25_obs$draws('ppcheck_e2', format = 'matrix')
ppcheck_swarmB <- mod_norm_degreeW25_obs$draws('ppcheck_e3', format = 'matrix')
ppcheck_norm_degree <- mod_norm_degreeW25_obs$draws('ppcheck_e4', format = 'matrix')
ppcheck_R1 <- mod_norm_degreeW25_obs$draws('ppcheck_e1', format = 'matrix')

swarm_area <- apply(post_norm_degreeW25_obs[, grep('swarm_area', colnames(post_norm_degreeW25_obs))], 
                    2, mean)

swarm_BM <- 
  apply(post_norm_degreeW25_obs[, grep('SBiomass_merge', colnames(post_norm_degreeW25_obs))], 
        2, mean)

par(mfrow = c(2, 2), mar = c(4, 4, 1, 1))
plot(density(temp_data[-3]$cum_rainfall_W25), 
     main = '', xlab = 'Cum rainfall W25')
for(i in 1:100) lines(density(ppcheck_R1[i, ]), lwd = 0.1)
lines(density(temp_data[-3]$cum_rainfall_W25), col = 'red')

plot(density(swarm_area), main = '', xlab = 'Swarm area')
for(i in 1:100) lines(density(ppcheck_swarmA[i, ]), lwd = 0.1)
lines(density(swarm_area), col = 'red')

plot(density(swarm_BM), main = '', xlab = 'Arthropod biomass')
for(i in 1:100) lines(density(ppcheck_swarmB[i, ]), lwd = 0.1)
lines(density(swarm_BM), col = 'red')

plot(density(temp_data[-3]$norm_degree), 
     main = '', xlab = 'Net size')
for(i in 1:100) lines(density(ppcheck_norm_degree[i, ]), lwd = 0.1)
lines(density(temp_data[-3]$norm_degree), col = 'red') 

post_beta_norm_degreeW25 <- gather(post_norm_degreeW25_obs[, grep('beta', colnames(post_norm_degreeW25_obs))])

post_beta_norm_degreeW25$key <- as.factor(post_beta_norm_degreeW25$key)
```

## Plotting normalized degree models

### Main effects

```{r}
t <- paste('W', c(1, seq(5, 25, by = 5)), sep = '')

plot_beta_norm_degree <- vector('list', length(t))

for (i in seq_along(t)) {
  cadena <- paste('^(.*)beta_norm_degree(.*)', t[i], '$', sep = '')
  cadena2 <- paste('post_norm_degree', t[i], '_obs', sep = '')
  df <- get(ls()[grepl(cadena, ls())])
  temp <- get(ls()[grepl(cadena2, ls())])
  
  temp <- temp[, grep('^beta', colnames(temp))]
  
  temp <- apply(temp, 2, function(x) mean(x > 0))
  
  temp <- tibble(p = temp, key = names(temp))
  
  df <- 
    df |> 
    group_by(key) |> 
    transmute(li = quantile(value, 0.025), 
              ls = quantile(value, 0.975), 
              mu = mean(value), 
              window = t[i]) |> 
    unique()
  
  n <- c(1, seq(5, 25, by = 5))[i]
  
  df <- df[!grepl(n + 4, df$key), ]
  
  df <- full_join(df, temp, by = 'key')
  
  plot_beta_norm_degree[[i]] <- df
  print(i)
}

plot_beta_norm_degree <- do.call('rbind', plot_beta_norm_degree)

plot_beta_norm_degree <- plot_beta_norm_degree[!grepl('W2', plot_beta_norm_degree$key),]

plot_beta_norm_degree$window <- as.factor(plot_beta_norm_degree$window)

plot_beta_norm_degree$season <- 
  ifelse(grepl('^(.*)(..,1.)$', plot_beta_norm_degree$key), 'Dry', 'Wet')

plot_beta_norm_degree$site <- 
  ifelse(grepl('^(.*)(.1,..)$', plot_beta_norm_degree$key), '1', 
         ifelse(grepl('^(.*)(.2,..)$', plot_beta_norm_degree$key), '2', 
                ifelse(grepl('^(.*)(.3,..)$', plot_beta_norm_degree$key), '3', '4')))

plot_beta_norm_degree$site <- as.factor(plot_beta_norm_degree$site)

plot_beta_norm_degree$site <- 
  factor(plot_beta_norm_degree$site, 
         labels = levels(network_metrics_INDX$obs_all$site))

plot_beta_norm_degree$rainfall_level <- 
  factor(plot_beta_norm_degree$site, 
         labels = c('Medium-high rainfall', 'Medium-low rainfall', 
                    'Low SL rainfall', 'High SL rainfall'))

plot_beta_norm_degree$rainfall_level <- 
  factor(plot_beta_norm_degree$rainfall_level, 
         levels = c('Low SL rainfall', 'Medium-low rainfall', 
                    'Medium-high rainfall', 'High SL rainfall'))


plot_beta_norm_degree$key <- gsub('^(.*)(.....)$', '\\1', plot_beta_norm_degree$key)

plot_beta_norm_degreeWET <- plot_beta_norm_degree[plot_beta_norm_degree$season == 'Wet',]

plot_beta_norm_degreeWET$key <- factor(plot_beta_norm_degreeWET$key) 

plot_beta_norm_degreeWET$code <- 
  plot_beta_norm_degreeWET %$% paste(key, window, rainfall_level, sep = '_')

sum(plot_beta_norm_degreeWET$code == "beta_rainW1_e2_W15_Medium-low rainfall" |
      plot_beta_norm_degreeWET$code == "beta_sawrA_e4_W15_Medium-low rainfall")

levels(plot_beta_norm_degreeWET$key)

levels(plot_beta_norm_degreeWET$rainfall_level)
levels(plot_beta_norm_degreeWET$site)

plot_beta_norm_degreeWET$key <- 
  factor(plot_beta_norm_degreeWET$key, 
         levels = 
           c("beta_rainW1_e2", 
             "beta_rainW1_e3",
             "beta_sawrA_e3", 
             "beta_rainW1_e4",
             "beta_sawrA_e4",
             "beta_swarmB_e4"))

plot_beta_norm_degreeWET$window <- factor(plot_beta_norm_degreeWET$window, 
                                          levels = paste0('W',
                                            c(1, 5, 10, 15, 20, 25)))


plot_effects_norm_degreeWET <- 
  plot_beta_norm_degreeWET |> 
  ggplot() +
  geom_vline(xintercept = 0, linetype = 3, col = 'red') +
  geom_errorbar(aes(y = key, xmin = li, 
                    xmax = ls, color = window), 
                width = 0, position = position_dodge(width = 0.8)) +
  geom_point(aes(mu, key, color = window, shape = window), 
             position = position_dodge(width = 0.8)) +
  scale_color_manual(values = c(rep('lightblue3', 2), 
                                'lightblue3', 
                                rep('lightblue3', 3))) +
  facet_wrap(~ rainfall_level, ncol = 1) +
  scale_y_discrete(limits =
                     c(
                       "beta_swarmB_e4",
                       "beta_sawrA_e4",
                       "beta_rainW1_e4",
                       "beta_sawrA_e3",
                       "beta_rainW1_e3",
                       "beta_rainW1_e2"),
                   labels = c(expression('Arthropod biomass' %->% 'Norm. degree'),
                              expression('Swarm area' %->% 'Norm. degree'),
                              expression('Rainfall' %->% 'Norm. degree'),
                              expression('Swarm area' %->% 'Arthropod biomass'),
                              expression('Rainfall' %->% 'Arthropod biomass'),
                              expression('Rainfall' %->% 'Swarm area'))) +
  labs(x = expression(beta), y = 'Effect', title = 'Wet season') +
  theme_bw() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    strip.background = element_blank(),
    panel.border = element_rect(colour = "black", fill = NA),
    legend.title = element_blank(),
    legend.background = element_blank(),
    legend.position = c(0.10, 0.09), 
    legend.box.background = element_blank(), 
    legend.key.size = unit(2.5, 'mm')
  )


plot_beta_norm_degreeDRY <- plot_beta_norm_degree[plot_beta_norm_degree$season == 'Dry',]

plot_beta_norm_degreeDRY$key <- factor(plot_beta_norm_degreeDRY$key)

plot_beta_norm_degreeDRY$key <- 
  factor(plot_beta_norm_degreeDRY$key, 
         levels = 
           c("beta_rainW1_e2", 
             "beta_rainW1_e3",
             "beta_sawrA_e3", 
             "beta_rainW1_e4",
             "beta_sawrA_e4",
             "beta_swarmB_e4"))

plot_effects_norm_degreeDRY <- 
  plot_beta_norm_degreeDRY |> 
  ggplot() +
  geom_vline(xintercept = 0, linetype = 3, col = 'red') +
  geom_errorbar(aes(y = key, xmin = li, 
                    xmax = ls, color = window), 
                width = 0, position = position_dodge(width = 0.8)) +
  geom_point(aes(mu, key, color = window, shape = window), 
             position = position_dodge(width = 0.8)) +
  scale_color_manual(values = c(rep('lightblue3', 2), 
                                'lightblue3', 
                                rep('lightblue3', 3))) +
  facet_wrap(~ rainfall_level, ncol = 1) +
  scale_y_discrete(limits =
                     c(
                       "beta_swarmB_e4",
                       "beta_sawrA_e4",
                       "beta_rainW1_e4",
                       "beta_sawrA_e3",
                       "beta_rainW1_e3",
                       "beta_rainW1_e2"),
                   labels = c(expression('Arthropod biomass' %->% 'Norm. degree'),
                              expression('Swarm area' %->% 'Norm. degree'),
                              expression('Rainfall' %->% 'Norm. degree'),
                              expression('Swarm area' %->% 'Arthropod biomass'),
                              expression('Rainfall' %->% 'Arthropod biomass'),
                              expression('Rainfall' %->% 'Swarm area'))) +
  labs(x = expression(beta), y = NULL, title = 'Dry season') +
  theme_bw() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    strip.background = element_blank(),
    panel.border = element_rect(colour = "black", fill = NA),
    legend.title = element_blank(),
    legend.background = element_blank(),
    legend.position = c(0.10, 0.10), 
    legend.box.background = element_blank(), 
    legend.key.size = unit(2.5, 'mm'), 
    axis.text.y = element_blank()
  )

```



```{r, fig.cap="Slope coeficients of causal models explaining the effect of biotic and abiotic factors on the structure of ant-followers interaction networks", fig.height=20, fig.width=15}
plot_effects_norm_degreeWET | plot_effects_norm_degreeDRY +
  plot_layout(ncol = 1)
```

### Conditional effect of rainfall (W25) and swarm area on normalized degree

```{r, warning=FALSE, message=FALSE}
s <- network_metrics_INDX$obs_all

s$season <- 
  ifelse(as.numeric(as.character(s$month)) <= 4, 1, 2)

s <- 
  s %$% 
  aggregate(norm_degree ~ season + site, FUN = length)

s

s2 <- network_metrics_INDX$obs_all
s2$obs_ID <- as.factor(s2$obs_ID)

unique(tibble(x = network_metrics_INDX$obs_all$site, 
              x1 = as.numeric(network_metrics_INDX$obs_all$site)))

plot_beta_norm_degree[plot_beta_norm_degree$p >= 0.9 |
                        plot_beta_norm_degree$p <= 0.1, ] |> print(n = 100)

effects_norm_degree <- 
  plot_beta_norm_degree[plot_beta_norm_degree$p >= 0.9 |
                          plot_beta_norm_degree$p <= 0.1, ]

effects_norm_degree <- split(effects_norm_degree, 
                             list(effects_norm_degree$window, 
                                  effects_norm_degree$season, 
                                  effects_norm_degree$site))

effects_norm_degree <- effects_norm_degree[unlist(lapply(effects_norm_degree, function(x) nrow(x) > 0), 
                                                  use.names = F)]

# ==== site SHER ====
for (i in grep('SHER', names(effects_norm_degree))) print(effects_norm_degree[[i]])
# JUAN arthropod biomass --> net size (independent of the window)
# No relevant effects

swarm_area <- 
  sapply(ls()[grep('post_norm_degree', ls())], FUN = 
           function(x) {
             df <- get(x)
             sa <- df[, grep('swarm_area', colnames(df))]
             apply(sa, 2, mean)
           }, simplify = 'matrix')

swarm_area <- as.vector(apply(swarm_area, 1, mean))

swarm_BM <- 
  sapply(ls()[grep('post_norm_degree', ls())], FUN = 
           function(x) {
             df <- get(x)
             sa <- df[, grep('SBiomass_merge', colnames(df))]
             apply(sa, 2, mean)
           }, simplify = 'matrix')

swarm_BM <- as.vector(apply(swarm_BM, 1, mean))


# counterfactual (medium-high rainfall - JUAN)

sites <- 
  tibble(site = network_metrics_obs2$site, 
         day = network_metrics_obs2$day, 
         month = network_metrics_obs2$month, 
         season = network_metrics_obs2$season)

day <- unique(sites[, c('day', 'site', 'month', 'season')])

day <- day[day$site == 4 & 
             day$season == 2, ]

day2 <- unique(day[, -1])

est_counterRAIN <- 
  lapply(c(25), FUN = 
           function(i) {
             
             mu <- mean(temp_data$norm_degree2)
             sd <- sd(temp_data$norm_degree2)
             
             mod <- paste0('mod_norm_degreeW', i, '_obs')
             mod <- get(mod)
             tau <- 
               mod$draws(
                 paste('tau_e4[', 2, ',', day2$month,']', sep = ''), 
                 format = 'matrix') |> 
               apply(1, mean)
             
             theta <- 
               mod$draws(
               paste('theta_e4[', day$day, ']', sep = ''), 
               format = 'matrix') |> 
               apply(1, mean)
             
             psi <- 
               mod$draws(
                 paste('psi_e4[',day2$site, ',', day2$month,']', sep = ''), 
                 format = 'matrix') |> 
               apply(1, mean)
             
             x_W <- paste0('cum_rainfall_W', i)
             x_W <- temp_data[[x_W]]
             
             x_W <- seq(min(x_W), max(x_W), 
                        length.out = 1000)
             
             post <- paste0('post_norm_degreeW', i, '_obs')
             post <- get(post)
             
             est <- 
             sapply(x_W, FUN = 
                      function(x) {
                        
                        s_RAIN <- 
                          post$`a_e4[4,2]` + 
                          post$`beta_rainW1_e4[4,2]`*x +
                          post$`beta_sawrA_e4[4,2]`*mean(swarm_area) +
                          post$`beta_swarmB_e4[4,2]`*mean(swarm_BM) +
                          psi + theta + tau
                        
                        # s_RAIN <- inv_logit(s_RAIN)
                        # 
                        # p1 <- s_RAIN * post$sigma_e4;
                        # p2 <- (1 - s_RAIN) * post$sigma_e4;
                        
                        z <- rstudent(1e3, 7, s_RAIN, post$sigma_e4)
                        
                        mu + z * sd
                        
                      })
             
             est <- 
               do.call('rbind', 
                       apply(est, 2, function(x) {
                         tibble(li = quantile(x, 0.025), 
                                ls = quantile(x, 0.975))
                       }, simplify = 'list'))
             
             est_MU <- 
               sapply(x_W, FUN = 
                        function(x) {
                          
                          z <- 
                            post$`a_e4[4,2]` + 
                            post$`beta_rainW1_e4[4,2]`*x +
                            post$`beta_sawrA_e4[4,2]`*mean(swarm_area) +
                            post$`beta_swarmB_e4[4,2]`*mean(swarm_BM) +
                            psi + theta + tau
                          
                          mu + z * sd
                          
                        })
             
             est$x <- x_W
             est$season <- 'Wet season'
             est$mu <- apply(est_MU, 2, mean)
             est$window <- paste0('W', i)
             est$effect <- 'rainfall'
             
             x_sa <- seq(min(swarm_area), max(swarm_area), 
                         length.out = 1000)
             
             est2 <- 
               sapply(x_sa, FUN = 
                        function(x) {
                          
                          s_RAIN <- 
                            post$`a_e4[4,2]` + 
                            post$`beta_rainW1_e4[4,2]`*mean(temp_data$cum_rainfall_W25) +
                            post$`beta_sawrA_e4[4,2]`*x +
                            post$`beta_swarmB_e4[4,2]`*mean(swarm_BM) +
                            psi + theta + tau
                          
                          z <- rstudent(1e3, 7, s_RAIN, post$sigma_e4)
                          mu + z * sd
                        })
             
             est2 <- 
               do.call('rbind', 
                       apply(est2, 2, function(x) {
                         tibble(li = quantile(x, 0.025), 
                                ls = quantile(x, 0.975))
                       }, simplify = 'list'))
             
             est_MU2 <- 
               sapply(x_sa, FUN = 
                        function(x) {
                          
                          z <- 
                          post$`a_e4[4,2]` + 
                            post$`beta_rainW1_e4[4,2]`*mean(temp_data$cum_rainfall_W25) +
                            post$`beta_sawrA_e4[4,2]`*x +
                            post$`beta_swarmB_e4[4,2]`*mean(swarm_BM) +
                            psi + theta + tau
                          
                          mu + z * sd
                          
                        })
             
             est2$x <- x_sa
             est2$season <- 'Wet season'
             est2$mu <- apply(est_MU2, 2, mean)
             est2$window <- paste0('W', i)
             est2$effect <- 'swarm_area'
             
             rbind(est2, est)
             
           })


est_counterRAIN <- do.call('rbind', est_counterRAIN)

dat <- 
  lapply(c(25), FUN = 
           function(i) {
             
             rain <- temp_data[[paste0('cum_rainfall_W', i)]]
             
             x <- 
               tibble(rain = rain,  
                      swarm_area = swarm_area,
                      season = temp_data$season, 
                      site = temp_data$site, 
                      norm_degree = temp_data$norm_degree2, 
                      window = paste0('W', i))
             
             x[x$site == 4 & x$season == 2,]
           })

dat <- do.call('rbind', dat)

plot_rainfall_norm_dee <- 
  ggplot() +
  geom_point(
    data = dat,
    aes(rain, norm_degree), color = 'lightblue3'
  ) + 
  geom_ribbon(
    data = est_counterRAIN[est_counterRAIN$effect != 'swarm_area', ], 
    aes(x, ymin = li, ymax = ls), 
    alpha = 0.25, fill = 'seagreen',
  ) +
  geom_line(
    data = est_counterRAIN[est_counterRAIN$effect != 'swarm_area', ], 
    aes(x, mu), linewidth = 1, 
    color = 'seagreen'
  ) +
  labs(x = 'ST rainfall W25', 
       y = 'AVG. normalized degree') +
  theme_bw() +
  theme(panel.grid = element_blank(), 
        legend.background = element_blank(), 
        legend.position = 'none', 
        axis.text = element_text(size = 11), 
        axis.title = element_text(size = 15))

plot_SA_norm_dee <- 
  ggplot() +
  geom_point(
    data = dat,
    aes(swarm_area, norm_degree), color = 'lightblue3'
  ) + 
  geom_ribbon(
    data = est_counterRAIN[est_counterRAIN$effect == 'swarm_area', ], 
    aes(x, ymin = li, ymax = ls), 
    alpha = 0.25, fill = 'seagreen',
  ) +
  geom_line(
    data = est_counterRAIN[est_counterRAIN$effect == 'swarm_area', ], 
    aes(x, mu), linewidth = 1, 
    color = 'seagreen'
  ) +
  labs(x = 'Swarm area', 
       y = '') +
  theme_bw() +
  theme(panel.grid = element_blank(), 
        legend.background = element_blank(), 
        legend.position = 'none', 
        axis.text = element_text(size = 11), 
        axis.title = element_text(size = 15))

plot_ND <- 
  plot_grid(plot_rainfall_norm_dee, 
            plot_SA_norm_dee, 
            nrow = 1)
```

```{r, fig.cap='Conditional plots of main biotic and abiotic predictors affecting normalized degree of ant-followers interaction networks'}
plot_ND
```

### Contrast between seasons

```{r}
posteriors <- ls()[grep('^(post_norm_degree)(W[0-9]*)', ls())]

df_seasons <- 
  lapply(posteriors, FUN = 
           function(draws) {
             
             p <- get(draws)
             
             w <- gsub('^(.*)(W[0-9]*)(.*)$', '\\2', draws)
             
             post_season <- 
               p[, colnames(p)[grep('^a_e4', colnames(post_norm_degreeW1_obs))]] |> 
               gather() 
             
             post_season <- split(post_season, post_season$key)  
             
             sites <- rep(c('Medium-high rainfall', 
                            'Medium-low rainfall', 
                            'low rainfall', 
                            'High rainfall'), each = 2)
             
             season <- rep(c('Dry', 'Wet'), 4)
             
             for (i in seq_along(sites)) {
               post_season[[i]]$site <- sites[[i]]
               post_season[[i]]$season <- season[[i]]
               post_season[[i]] <- post_season[[i]][, -1]
             }
             
             post_season <- do.call('rbind', post_season)
             post_season <- split(post_season, post_season$site)
             
             post_season <- 
               lapply(post_season, FUN = 
                        function(x) {
                          j <- 
                            inv_logit(x[x$season == 'Dry', ]$value) - 
                            inv_logit(x[x$season == 'Wet', ]$value)
                          
                          tibble(site = x$site[1], 
                                 contrast = j, 
                                 p = mean(j > 0))
                        })
             
             post_season <- do.call('rbind', post_season)
             
             post_season$model <- w
             
             post_season
           })

df_seasons <- do.call('rbind', df_seasons)

```

```{r, fig.cap="Contrast of posterior distributions of network normalized degree during the wet and dry seasons at the sites with different levels of annual rainfall. Each panel shows the contrast for each model at temporal windows of cumulative rainfall: (i.e. from 1, 5, 10, 15, 20 and 25 days after sampling)"}
df_seasons |> 
  ggplot(aes(contrast, fill = site)) +
  geom_density(alpha = 0.5) +
  geom_vline(xintercept = 0, linetype = 3, col = 'red') +
  labs(x = 'Normalized degree\n (contrast between wet and dry season)') +
  #lims(x = c(-40, 80)) +
  facet_wrap(~model)

```

### Causal effec of rainfall (W25) and swarm area on normalized degree

```{r}
counterfact_ND_SHER <- 
  function(.fun = mean, mu = T, W = 25, var = 'rainfall') {
    
    mod <- paste0('mod_norm_degreeW', W, '_obs')
    mod <- get(mod)
    tau <- 
      mod$draws(
        paste('tau_e4[', 2, ',', day2$month,']', sep = ''), 
        format = 'matrix') |> 
      apply(1, mean)
    
    theta <- 
      mod$draws(
        paste('theta_e4[', day$day, ']', sep = ''), 
        format = 'matrix') |> 
      apply(1, mean)
    
    psi <- 
      mod$draws(
        paste('psi_e4[',day2$site, ',', day2$month,']', sep = ''), 
        format = 'matrix') |> 
      apply(1, mean)
    
    x_W <- paste0('cum_rainfall_W', W)
    x_W <- temp_data[[x_W]]
    mu <- mean(temp_data$norm_degree2)
    sd <- sd(temp_data$norm_degree2)
    
    post <- paste0('post_norm_degreeW', W, '_obs')
    post <- get(post)
    
    if (var == 'rainfall') {
      z <- 
        post$`a_e4[4,2]` + 
        post$`beta_rainW1_e4[4,2]`*.fun(x_W) +
        post$`beta_sawrA_e4[4,2]`*mean(swarm_area) +
        post$`beta_swarmB_e4[4,2]`*mean(swarm_BM) +
        psi + theta + tau
      
      mu + z * sd 
    } else {
      z <- 
        post$`a_e4[4,2]` + 
        post$`beta_rainW1_e4[4,2]`*mean(temp_data$cum_rainfall_W25) +
        post$`beta_sawrA_e4[4,2]`*.fun(swarm_area) +
        post$`beta_swarmB_e4[4,2]`*mean(swarm_BM) +
        psi + theta + tau
      
      mu + z * sd
    }
    
  }


ND_counter_SHER25 <- 
  tibble(mu_val = c(counterfact_ND_SHER(max, W = 25, var = 'rainfall') - 
                      counterfact_ND_SHER(min, W = 25, var = 'rainfall')), 
         Intervention = 'Causal effect of   \n ST rainfall W25  ')


ND_counter_SHER_SA <- 
  tibble(mu_val = c(counterfact_ND_SHER(max, W = 25, var = 'r') - 
                      counterfact_ND_SHER(min, W = 25, var = 'r')), 
         Intervention = 'Causal effect of   \n Swarm area   ')

ND_counter_SHER <- rbind(ND_counter_SHER_SA, 
                         ND_counter_SHER25)

plot_contrast_skewness_sawrm_PRL <- 
  ggplot() +
  geom_boxplot(data = ND_counter_SHER, 
               aes(x = mu_val, y = Intervention), 
               alpha = 0.3, color = 'seagreen', 
               fill = 'seagreen', width = 0.2) +
  geom_vline(xintercept = 0, linetype = 2, color = 'red') +
  labs(x = 'Contrast between\n interventions (min - max)', 
       y = NULL) +
  theme_bw() +
  theme(panel.grid = element_blank(), 
        legend.title = element_blank(), 
        legend.position = c(0.2, 0.8), 
        legend.background = element_blank(), 
        legend.key.size = unit(2, 'mm'), 
        axis.text = element_text(size = 13), 
        axis.title = element_text(size = 16))
```


```{r, fig.cap='Causal effect of intervening swarm area and rainfall (W25) on average of normalized degree of ant-followers'}
plot_contrast_skewness_sawrm_PRL
```

Probability of the causal effect being above zero, average increase, and SD of increase given the cumulative rainfall (W25) intervention
```{r}

mean(ND_counter_SHER25$mu_val > 0)
mean(ND_counter_SHER25$mu_val)
sd(ND_counter_SHER25$mu_val)

```

Relative change of intervening cumulative rainfall (W25) from minimum to maximum.
```{r}
rel_inc25 <- 
  100 * ((counterfact_ND_SHER(max, W = 25) - counterfact_ND_SHER(min, W = 25))/
         counterfact_ND_SHER(min, W = 25))

quantile(rel_inc25, c(0.025, 0.5, 0.975))
mean(rel_inc25)
sd(rel_inc25)
mean(rel_inc25 > 0)
```


Probability of the causal effect being above zero, average increase, and SD of increase given the swarm area intervention
```{r}

mean(ND_counter_SHER_SA$mu_val < 0)
mean(ND_counter_SHER_SA$mu_val)
sd(ND_counter_SHER_SA$mu_val)
```

Relative change of intervening swarm area from minimum to maximum.
```{r}
rel_inc25_SA <- 
  100 * ((counterfact_ND_SHER(max, W = 25, var = 'r') - 
            counterfact_ND_SHER(min, W = 25, var = 'r'))/
           counterfact_ND_SHER(min, W = 25, var = 'r'))

quantile(rel_inc25_SA, c(0.025, 0.5, 0.975))
mean(rel_inc25_SA)
sd(rel_inc25_SA)
mean(rel_inc25_SA < 0)
```


### Conditional effect of arthropod biomass on normalized degree

```{r}
for (i in grep('PLRD', names(effects_norm_degree))) print(effects_norm_degree[[i]])
# JUAN arthropod biomass --> net size (independent of the window)
# No relevant effects

swarm_area <- 
  sapply(ls()[grep('post_norm_degree', ls())], FUN = 
           function(x) {
             df <- get(x)
             sa <- df[, grep('swarm_area', colnames(df))]
             apply(sa, 2, mean)
           }, simplify = 'matrix')

swarm_area <- as.vector(apply(swarm_area, 1, mean))

swarm_BM <- 
  sapply(ls()[grep('post_norm_degree', ls())], FUN = 
           function(x) {
             df <- get(x)
             sa <- df[, grep('SBiomass_merge', colnames(df))]
             apply(sa, 2, mean)
           }, simplify = 'matrix')

swarm_BM <- as.vector(apply(swarm_BM, 1, mean))


# counterfactual (medium-high rainfall - JUAN)

sites <- 
  tibble(site = network_metrics_obs2$site, 
         day = network_metrics_obs2$day, 
         month = network_metrics_obs2$month, 
         season = network_metrics_obs2$season)

day <- unique(sites[, c('day', 'site', 'month', 'season')])

day <- day[day$site == 3 & 
             day$season == 2, ]

day2 <- unique(day[, -1])

est_counterSA <- 
  lapply(c(25), FUN = 
           function(i) {
             
             mu <- mean(temp_data$norm_degree2)
             sd <- sd(temp_data$norm_degree2)
             
             mod <- paste0('mod_norm_degreeW', i, '_obs')
             mod <- get(mod)
             tau <- 
               mod$draws(
                 paste('tau_e4[', 2, ',', day2$month,']', sep = ''), 
                 format = 'matrix') |> 
               apply(1, mean)
             
             theta <- 
               mod$draws(
                 paste('theta_e4[', day$day, ']', sep = ''), 
                 format = 'matrix') |> 
               apply(1, mean)
             
             psi <- 
               mod$draws(
                 paste('psi_e4[',day2$site, ',', day2$month,']', sep = ''), 
                 format = 'matrix') |> 
               apply(1, mean)
             
             x_W <- seq(min(swarm_BM), max(swarm_BM), 
                        length.out = 1000)
             
             post <- paste0('post_norm_degreeW', i, '_obs')
             post <- get(post)
             
             est <- 
               sapply(x_W, FUN = 
                        function(x) {
                          
                          s_RAIN <- 
                            post$`a_e4[3,2]` + 
                            post$`beta_rainW1_e4[3,2]`*mean(temp_data$cum_rainfall_W25) +
                            post$`beta_sawrA_e4[3,2]`*mean(swarm_area) +
                            post$`beta_swarmB_e4[3,2]`*x +
                            psi + theta + tau
                          
                          # s_RAIN <- inv_logit(s_RAIN)
                          # 
                          # p1 <- s_RAIN * post$sigma_e4;
                          # p2 <- (1 - s_RAIN) * post$sigma_e4;
                          
                          z <- rstudent(1e3, 7, s_RAIN, post$sigma_e4)
                          
                          mu + z * sd
                          
                        })
             
             est <- 
               do.call('rbind', 
                       apply(est, 2, function(x) {
                         tibble(li = quantile(x, 0.025), 
                                ls = quantile(x, 0.975))
                       }, simplify = 'list'))
             
             est_MU <- 
               sapply(x_W, FUN = 
                        function(x) {
                          
                          z <- 
                            post$`a_e4[3,2]` + 
                            post$`beta_rainW1_e4[3,2]`*mean(temp_data$cum_rainfall_W25) +
                            post$`beta_sawrA_e4[3,2]`*mean(swarm_area) +
                            post$`beta_swarmB_e4[3,2]`*x +
                            psi + theta + tau
                          
                          mu + z * sd
                          
                        })
             
             est$x <- x_W
             est$season <- 'Wet season'
             est$mu <- apply(est_MU, 2, mean)
             est$window <- paste0('W', i)
             est$effect <- 'arthropod_biomass'
             
             est
             
           })


est_counterSA <- do.call('rbind', est_counterSA)

dat <- 
  lapply(c(25), FUN = 
           function(i) {
             
             rain <- temp_data[[paste0('cum_rainfall_W', i)]]
             
             x <- 
               tibble(swarm_BM = swarm_BM,
                      season = temp_data$season, 
                      site = temp_data$site, 
                      norm_degree = temp_data$norm_degree2, 
                      window = paste0('W', i))
             
             x[x$site == 3 & x$season == 2,]
           })

dat <- do.call('rbind', dat)

plot_AB_norm_dee <- 
  ggplot() +
  geom_point(
    data = dat,
    aes(swarm_BM, norm_degree), color = 'lightblue3'
  ) + 
  geom_ribbon(
    data = est_counterSA, 
    aes(x, ymin = li, ymax = ls), 
    alpha = 0.25, fill = 'tomato3',
  ) +
  geom_line(
    data = est_counterSA, 
    aes(x, mu), linewidth = 1, 
    color = 'tomato3'
  ) +
  labs(x = 'Arthropod biomass', 
       y = 'AVG. normalized degree') +
  theme_bw() +
  #lims(x = c(min(dat$swarm_BM), max(dat$swarm_BM))) +
  theme(panel.grid = element_blank(), 
        legend.background = element_blank(), 
        legend.position = 'none', 
        axis.text = element_text(size = 11), 
        axis.title = element_text(size = 15))
```


```{r, fig.cap='Conditional plots of main biotic and abiotic predictors affecting normalized degree of ant-followers interaction networks'}
plot_AB_norm_dee
```


### Causal effec of arthropod biomass on normalized degree

```{r}
counterfact_ND_PRL <- 
  function(.fun = mean, mu = T, W = 25) {
    
    mod <- paste0('mod_norm_degreeW', W, '_obs')
    mod <- get(mod)
    tau <- 
      mod$draws(
        paste('tau_e4[', 2, ',', day2$month,']', sep = ''), 
        format = 'matrix') |> 
      apply(1, mean)
    
    theta <- 
      mod$draws(
        paste('theta_e4[', day$day, ']', sep = ''), 
        format = 'matrix') |> 
      apply(1, mean)
    
    psi <- 
      mod$draws(
        paste('psi_e4[',day2$site, ',', day2$month,']', sep = ''), 
        format = 'matrix') |> 
      apply(1, mean)
    
    x_W <- paste0('cum_rainfall_W', W)
    x_W <- temp_data[[x_W]]
    mu <- mean(temp_data$norm_degree2)
    sd <- sd(temp_data$norm_degree2)
    
    post <- paste0('post_norm_degreeW', W, '_obs')
    post <- get(post)
    
    z <- 
      post$`a_e4[3,2]` + 
      post$`beta_rainW1_e4[3,2]`*mean(x_W) +
      post$`beta_sawrA_e4[3,2]`*mean(swarm_area) +
      post$`beta_swarmB_e4[3,2]`*.fun(swarm_BM) +
      psi + theta + tau
    
    mu + z * sd 
  }

ND_counter_SHER_AB <- 
  tibble(mu_val = c(counterfact_ND_PRL(max, W = 25) - 
                      counterfact_ND_PRL(min, W = 25)), 
         Intervention = 'Causal effect of   \n arthropod biomass  ')

ND_counter_SHER <- rbind(ND_counter_SHER_SA, 
                         ND_counter_SHER25)

plot_contrast_skewness_sawrm_PRL <- 
ggplot() +
  geom_boxplot(data = ND_counter_SHER_AB, 
               aes(x = mu_val, y = Intervention), 
               alpha = 0.3, color = 'tomato3', 
               fill = 'tomato3', width = 0.2) +
  geom_vline(xintercept = 0, linetype = 2, color = 'red') +
  labs(x = 'Contrast between\n interventions (min - max)', 
       y = NULL) +
  theme_bw() +
  theme(panel.grid = element_blank(), 
        legend.title = element_blank(), 
        legend.position = c(0.2, 0.8), 
        legend.background = element_blank(), 
        legend.key.size = unit(2, 'mm'), 
        axis.text = element_text(size = 13), 
        axis.title = element_text(size = 16))
```


```{r, fig.cap='Causal effect of intervening swarm area and rainfall (W25) on average of normalized degree of ant-followers'}
plot_contrast_skewness_sawrm_PRL
```

Probability of the causal effect being above zero, average increase, and SD of increase given the arthropod biomass intervention
```{r}
mean(ND_counter_SHER_AB$mu_val > 0)
mean(ND_counter_SHER_AB$mu_val)
sd(ND_counter_SHER_AB$mu_val)

```

Relative change of intervening arthropod biomass from minimum to maximum.
```{r}
rel_inc25_AB <- 
  100 * ((counterfact_ND_PRL(max, W = 25) - counterfact_ND_PRL(min, W = 25))/
           counterfact_ND_PRL(min, W = 25))

quantile(rel_inc25_AB, c(0.025, 0.5, 0.975))
mean(rel_inc25_AB > 0)
mean(rel_inc25_AB)
sd(rel_inc25_AB)
```

### Non-relevant effects
```{r, warning=FALSE}
# ================== site LIMB =======================

for (i in grep('LIMB', names(effects_norm_degree))) print(effects_norm_degree[[i]])

# No effects

# ====== site JUAN ====

for (i in grep('JUAN', names(effects_norm_degree))) print(effects_norm_degree[[i]])
# No effects 
```


## Skewness models

### Mathematical version of the models

Each generative model explaining the effect of *cumulative rainfall* during temporal window *i* on *network size* was always conditioned by *cumulative rainfall* during *window i+n*. Therefore, the following model applies for the six models fitted (i.e., W1, W5, W10, W15, W20, W25) to asses when cumulative rainfall has the strongest effect on the skewness of the ant-followers interaction network.

\\

The first part of the model has a combination of linear equations integrating the generative model:
  
$$
\begin{aligned}
& Skewness_i \sim normal(\mu_i, ~\sigma_i) \\
& \mu_i = \alpha1_{[season~i, ~total~rainfall]} + \beta1_{[season~i, ~total~rainfall]}\times rainfall_{Wi} + \\
&~~~~~~~~~~~~~~~~ \beta2_{[season~i, ~total~rainfall]} \times ~ swarm~area_{impute~i} + \\ &~~~~~~~~~~~~~~~~ \beta3_{[season~i, ~total~rainfall]}  ~ arthropod~biomass_{impute~i} +\\
&~~~~~~~~~~~~~~~~ \theta1_{day~i} + \tau1_{[season~i, ~total~rainfall]} + \psi1_{[site~i, ~month~i]} \\
& Arthropod~biomass_{impute} \sim student~t(\nu = 2, ~\mu1_i, ~\sigma1) \\
& \mu1_i = \alpha3_{[season~i, ~total~rainfall]} + \beta5_{[season~i, ~total~rainfall]}\times~rainfall_{Wi} + \\ 
&~~~~~~~~~~~\beta6_{[season~i, ~total~rainfall]} \times swarm~area_{impute~i} + \\
&~~~~~~~~~~~ \theta2_{day~i} + \tau2_{[season~i, ~total~rainfall]} + \psi2_{[site~i, ~month~i]} \\
& swarm~area_{impute} \sim student~t(\nu = 2,~\mu2, ~\sigma2) \\
& \mu2_i = \alpha4_{[season~i, ~total~rainfall]} + \beta7_{[season~i, ~total~rainfall]} \times rainfall_{Wi} + \theta3_{day~i} + \\
&~~~~~~~~~~~\tau3_{[season~i, ~total~rainfall]} + \psi3_{[site~i, ~month~i]} \\
& rainfall_{Wi} \sim normal(\mu_i,~ \sigma) \\
& \mu_i = \alpha2 + \beta4\times rainfall_{Wi+n} \\
\end{aligned}
$$
In the second part, we imputed `NA` observations in *swarm area* and *arthropod biomass*.
  
  
$$
\begin{aligned}
& swarm~area_{impute} \sim normal(\nu_{imputed1}, \sigma_{imputed1}) \\
& Arthropod~biomass_{impute} \sim normal(\nu_{imputed2}, \sigma_{imputed2}) \\
& \nu_{imputed1}, \nu_{imputed2} \sim normal(3.5, 1) \\
& \sigma_{imputed1}, \sigma_{imputed2} \sim exponential(1)\\
\end{aligned}
$$
  
Then, we use the Gaussian process to conduct partial pooling across correlated days. To do so, we used as prior a multivariate normal distribution and a quadratic kernel ($K  = \eta^2 exp(-\rho^2D_{ij}^2) + \delta_{ij} \times 0.01 \\$) to construct the covariance matrix based on the distance among sampled days.


$$
\begin{aligned}
& \left(\begin{array}{cc}
\theta1_{day~1} \\
\theta1_{day~2} \\
... \\
\theta1_{day~n} \\
\end{array}\right), \left(\begin{array}{cc}
\theta2_{day~1} \\
\theta2_{day~2} \\
... \\
\theta2_{day~n} \\
\end{array}\right), \left(\begin{array}{cc}
\theta3_{day~1} \\
\theta3_{day~2} \\
... \\
\theta3_{day~n} \\
\end{array}\right) \sim MVNormal \left(\begin{array}{cc}
\begin{bmatrix}
0 \\
0 \\
... \\
0 \\
\end{bmatrix}
K \\
\end{array}\right) \\
& K  = \eta^2 exp(-\rho^2D_{ij}^2) + \delta_{ij} \times 0.01 \\
& \eta \sim exponential(3) \\
& \rho \sim exponential(0.5) \\
& \delta  \sim exponential(2) \\
\end{aligned}
$$
  
Finally, we assign skeptical priors of strong effects and encompassing values within the plausible range of the response variables. We used partial polling to estimate the parameters of group-level effects ($\tau$ and $\psi$ parameters) and used a non-centered parameterization to improve computational efficiency.

$$
\begin{aligned}
& \alpha1_{year~i} \sim normal(2.5, 2) \\
& \alpha2 \sim normal(0, 1) \\
& \alpha3_{year~i} \sim normal(2.5, 1) \\
& \alpha4_{year~i} \sim normal(3, 1) \\
& \beta1_{year~i}, \beta2_{year~i}, \beta3_{year~i}, \beta4, \beta5_{year~i},\beta6_{year~i}, \beta7_{year~i} \sim normal(0, 0.5)\\
& z_{\tau1}, z_{\tau2}, z_{\tau3}, z_{\psi1}, z_{\psi2}, z_{\psi3} \sim normal(0, 0.5) \\
& \mu_{\tau1}, \mu_{\tau2}, \mu_{\tau3},  \mu_{\psi1}, \mu_{\psi2}, \mu_{\psi3} \sim normal(0, 0.5) \\
& \sigma_{\tau1}, \sigma_{\tau2}, \sigma_{\tau3}, \sigma_{\psi1}, \sigma_{\psi2}, \sigma_{\psi3} \sim exponential(1) \\
& \tau1_{[year~i, month~i]} = \mu_{\tau1} + z_{\tau1} \times \sigma_{\tau1} \\
& \tau2_{[year~i, month~i]} = \mu_{\tau2} + z_{\tau2} \times \sigma_{\tau2} \\
& \tau3_{[year~i, month~i]} = \mu_{\tau3} + z_{\tau3} \times \sigma_{\tau3} \\
& \psi1_{[site~i, month~i]} = {\mu_\psi1} + z_{\psi1} \times \sigma_{\psi1} \\
& \psi2_{[site~i, month~i]} = {\mu_\psi2} + z_{\psi2} \times \sigma_{\psi2} \\
& \psi3_{[site~i, month~i]} = {\mu_\psi3} + z_{\psi3} \times \sigma_{\psi3} \\
\end{aligned}
$$
  
\newpage

Putting it all together, we have:
  
$$
{\tiny
\begin{aligned}
& Skewness_i \sim normal(\mu_i, ~\sigma_i) \\
& \mu_i = \alpha1_{[season~i, ~SL~rainfall]} + \beta1_{[season~i, ~SL~rainfall]}\times rainfall_{Wi} + \\
&~~~~~~~~~~~~~~~~ \beta2_{[season~i, ~SL~rainfall]} \times ~ swarm~area_{impute~i} + \\ &~~~~~~~~~~~~~~~~ \beta3_{[season~i, ~SL~rainfall]}  ~ arthropod~biomass_{impute~i} +\\
&~~~~~~~~~~~~~~~~ \theta1_{day~i} + \tau1_{[[season~i, ~SL~rainfall]]} + \psi1_{[site~i, ~month~i]} \\
& Arthropod~biomass_{impute} \sim student~t(\nu = 2, ~\mu1_i, ~\sigma1) \\
& \mu1_i = \alpha3_{[season~i, ~SL~rainfall]} + \beta5_{[season~i, ~SL~rainfall]}\times~rainfall_{Wi} + \\ 
&~~~~~~~~~~~\beta6_{[season~i, ~SL~rainfall]} \times swarm~area_{impute~i} + \\
&~~~~~~~~~~~ \theta2_{day~i} + \tau2_{[season~i, ~SL~rainfall]} + \psi2_{[site~i, ~month~i]} \\
& swarm~area_{impute} \sim student~t(\nu = 2,~\mu2, ~\sigma2) \\
& \mu2_i = \alpha4_{[season~i, ~SL~rainfall]} + \beta7_{[season~i, ~SL~rainfall]} \times rainfall_{Wi} + \theta3_{day~i} + \\
&~~~~~~~~~~~\tau3_{[season~i, ~SL~rainfall]} + \psi3_{[site~i, ~month~i]} \\
& rainfall_{Wi} \sim normal(\mu_i,~ \sigma) \\
& \mu_i = \alpha2 + \beta4\times rainfall_{Wi+n} \\
& swarm~area_{impute} \sim normal(\nu_{imputed1}, \sigma_{imputed1}) \\
& Arthropod~biomass_{impute} \sim normal(\nu_{imputed2}, \sigma_{imputed2}) \\
& \nu_{imputed1}, \nu_{imputed2} \sim normal(3.5, 1) \\
& \sigma_{imputed1}, \sigma_{imputed2} \sim exponential(1)\\
& \left(\begin{array}{cc}
\theta1_{day~1} \\
\theta1_{day~2} \\
... \\
\theta1_{day~n} \\
\end{array}\right), \left(\begin{array}{cc}
\theta2_{day~1} \\
\theta2_{day~2} \\
... \\
\theta2_{day~n} \\
\end{array}\right), \left(\begin{array}{cc}
\theta3_{day~1} \\
\theta3_{day~2} \\
... \\
\theta3_{day~n} \\
\end{array}\right) \sim MVNormal \left(\begin{array}{cc}
                                                                                            \begin{bmatrix}
0 \\
0 \\
... \\
0 \\
\end{bmatrix}
K \\
\end{array}\right) \\
& K  = \eta^2 exp(-\rho^2D_{ij}^2) + \delta_{ij} \times 0.01 \\
& \eta \sim exponential(3) \\
& \rho \sim exponential(0.5) \\
& \delta  \sim exponential(2) \\
& \alpha1_{year~i} \sim normal(2.5, 2) \\
& \alpha2 \sim normal(0, 1) \\
& \alpha3_{year~i} \sim normal(2.5, 1) \\
& \alpha4_{year~i} \sim normal(3, 1) \\
& \beta1_{year~i}, \beta2_{year~i}, \beta3_{year~i}, \beta4, \beta5_{year~i},\beta6_{year~i}, \beta7_{year~i} \sim normal(0, 0.5)\\
& z_{\tau1}, z_{\tau2}, z_{\tau3}, z_{\psi1}, z_{\psi2}, z_{\psi3} \sim normal(0, 0.5) \\
& \mu_{\tau1}, \mu_{\tau2}, \mu_{\tau3},  \mu_{\psi1}, \mu_{\psi2}, \mu_{\psi3} \sim normal(0, 0.5) \\
& \sigma_{\tau1}, \sigma_{\tau2}, \sigma_{\tau3}, \sigma_{\psi1}, \sigma_{\psi2}, \sigma_{\psi3} \sim exponential(1) \\
& \tau1_{[year~i, month~i]} = \mu_{\tau1} + z_{\tau1} \times \sigma_{\tau1} \\
& \tau2_{[year~i, month~i]} = \mu_{\tau2} + z_{\tau2} \times \sigma_{\tau2} \\
& \tau3_{[year~i, month~i]} = \mu_{\tau3} + z_{\tau3} \times \sigma_{\tau3} \\
& \psi1_{[year~i, month~i]} = {\mu_\psi1} + z_{\psi1} \times \sigma_{\psi1} \\
& \psi2_{[year~i, month~i]} = {\mu_\psi2} + z_{\psi2} \times \sigma_{\psi2} \\
& \psi3_{[year~i, month~i]} = {\mu_\psi3} + z_{\psi3} \times \sigma_{\psi3} \\
\end{aligned}}
$$
  
### Window 1 model
  
#### Stan code

```{r}
network_metrics_obs2.1 <- network_metrics_INDX$obs_all

network_metrics_obs2.1 <- 
  network_metrics_obs2.1[!is.na(network_metrics_obs2.1$skewness), ]

network_metrics_obs2.1$season <- 
  ifelse(as.numeric(as.character(network_metrics_obs2.1$month)) <= 4, 1, 2)

network_metrics_obs2.1 %$% 
  aggregate(net_size ~ season + site, FUN = length) ### ok it could work 

network_metrics_obs2.1$month <- 
  as.numeric(as.character(network_metrics_obs2.1$month))

network_metrics_obs2.1[] <- 
  lapply(network_metrics_obs2.1, function(x) if(is.factor(x)) factor(x) else(x))

day_indx_skewness <- 
  colnames(subset_day_matrix) %in% levels(network_metrics_obs2.1$date_fct)

subset_day_matrix2.1 <- subset_day_matrix[day_indx_skewness, day_indx_skewness]

network_metrics_obs2.1 <- lapply(network_metrics_obs2.1, FUN =
                                   function(i) {
                                     if (is.factor(i)) as.numeric(i)
                                     else i
                                   })

cols <- grep('^cum_', names(network_metrics_obs2.1))

for (i in cols) network_metrics_obs2.1[[i]] <- 
  as.vector(scale(network_metrics_obs2.1[[i]]))

network_metrics_obs2.1$dist_day <- subset_day_matrix2.1
network_metrics_obs2.1$N <- length(network_metrics_obs2.1$date_fct)
network_metrics_obs2.1$N_day <- max(network_metrics_obs2.1$date_fct)
network_metrics_obs2.1$N_month <- max(network_metrics_obs2.1$month)
network_metrics_obs2.1$N_season <- max(network_metrics_obs2.1$season)
network_metrics_obs2.1$N_site <- max(network_metrics_obs2.1$site)
network_metrics_obs2.1$N_dim_day <- dim(subset_day_matrix2.1)[1]

network_metrics_obs2.1$N_naSwarmBio <- 
  sum(is.na(network_metrics_obs2.1$swarm_biomass))

network_metrics_obs2.1$SwarmB_missindx <- 
  which(is.na(network_metrics_obs2.1$swarm_biomass))

network_metrics_obs2.1$N_naSwarmINI <- 
  sum(is.na(network_metrics_obs2.1$swarm_area_inital))

network_metrics_obs2.1$SwarmINI_missindx <- 
  which(is.na(network_metrics_obs2.1$swarm_area_inital))

network_metrics_obs2.1$N_naSwarmFIN <- 
  sum(is.na(network_metrics_obs2.1$swarm_area_final))

network_metrics_obs2.1$SwarmFIN_missindx <- 
  which(is.na(network_metrics_obs2.1$swarm_area_final))

unlist(lapply(network_metrics_obs2.1, function(x) mean(is.na(x))))

names(network_metrics_obs2.1)[grep('date_fct', names(network_metrics_obs2.1))] <- 'day'

network_metrics_obs2.1$swarm_biomass <- 
  sapply(network_metrics_obs2.1$swarm_biomass, FUN = 
           function(i) {
             if (is.na(i)) 0
             else log(i)
           })

network_metrics_obs2.1$swarm_area_final <- 
  sapply(network_metrics_obs2.1$swarm_area_final, FUN = 
           function(i) {
             if (is.na(i)) 0
             else log(i)
           })

network_metrics_obs2.1$swarm_area_inital <- 
  sapply(network_metrics_obs2.1$swarm_area_inital, FUN = 
           function(i) {
             if (is.na(i)) 0
             else log(i)
           })

```

```{r, eval=FALSE}

cat(file = 'w1_skewness.stan', 
    "
    
    functions {
    
      vector scale(vector x) {
        int N = dims(x)[1];
        real mu = mean(x);
        real sigma = sd(x);
        vector[N] scaled_v;
    
        for (i in 1:N) {
          scaled_v[i] = (x[i] - mu) / sigma;
        }
        return scaled_v;
      }  
    
      vector merge_missing(int[] miss_indxex, vector x_obs, vector x_miss) {
                int N = dims(x_obs)[1];
                int N_miss = dims(x_miss)[1];
                vector[N] merge;
                merge = x_obs;
                for (i in 1:N_miss) {
                    merge[miss_indxex[i]] = x_miss[i];
                }
            return merge;
          }
    
    
      matrix cov_GPL2(matrix x,
                      real eta,
                      real rho,
                      real delta) {
                      
                      int N = dims(x)[1];
                      matrix[N, N] K;
    
                      for (i in 1:(N-1)) {
                        K[i, i] = eta + delta;
                        for (j in (i + 1):N) {
                          K[i, j] = eta * exp(-rho * square(x[i, j]));
                          K[j, i] = K[i, j];
                        }
                      }
                      K[N, N] = eta + delta;
                      return K;
                      }
    }
    
    data {
      int N;
      int N_day;
      int N_month;
      int N_season;
      int N_site;
      int N_dim_day;
      int N_naSwarmBio;
      int N_naSwarmINI;
      int N_naSwarmFIN;
      array[N_naSwarmBio] int SwarmB_missindx;
      array[N_naSwarmINI] int SwarmINI_missindx;
      array[N_naSwarmFIN] int SwarmFIN_missindx;
      vector[N] skewness;
      array[N] int day;
      array[N] int month;
      array[N] int season;
      array[N] int site;
      vector[N] swarm_biomass;
      vector[N] swarm_area_inital;
      vector[N] swarm_area_final;
      array[N] int cum_rainfall_W1;
      array[N] int cum_rainfall_W5;
      matrix[N_dim_day, N_dim_day] dist_day;
    }
    
    parameters {
      /////////////
      ///////////// imputed variables
      vector[N_naSwarmBio] SBiomass_impute;
      real mu_sb;
      real<lower = 0> sigma_sb;
      vector[N_naSwarmINI] SwarmINI_impute;
      real mu_sbINI;
      real<lower = 0> sigma_sbINI;
      vector[N_naSwarmFIN] SwarmFIN_impute;
      real mu_sbFIN;
      real<lower = 0> sigma_sbFIN;
    
      //////////////
      ///////////// rain_i+n -> rain_i
      real a_e1;
      real beta_rainW2_e1;
      real<lower = 0> sigma_e1;
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm
      matrix[N_site, N_season] a_e2;
      matrix[N_site, N_season] beta_rainW1_e2;
      real<lower = 0> sigma_e2;
    
      vector[N_day] z_theta_e2;
      real<lower = 0> eta_theta_e2;
      real<lower = 0> rho_theta_e2;
    
      matrix[N_season, N_month] z_tau_e2;
      real mu_tau_e2;
      real<lower = 0> sigma_tau_e2;
    
      matrix[N_site, N_month] z_psi_e2;
      real mu_psi_e2;
      real<lower = 0> sigma_psi_e2;
      
      ////////////////////
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      matrix[N_site, N_season] a_e3;
      matrix[N_site, N_season] beta_rainW1_e3;
      matrix[N_site, N_season] beta_sawrA_e3;
      real<lower = 0> sigma_e3;
    
      vector[N_day] z_theta_e3;
      real<lower = 0> eta_theta_e3;
      real<lower = 0> rho_theta_e3;
    
      matrix[N_season, N_month] z_tau_e3;
      real mu_tau_e3;
      real<lower = 0> sigma_tau_e3;
    
      matrix[N_site, N_month] z_psi_e3;
      real mu_psi_e3;
      real<lower = 0> sigma_psi_e3;
      
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      matrix[N_site, N_season] a_e4;
      matrix[N_site, N_season] beta_rainW1_e4;
      matrix[N_site, N_season] beta_sawrA_e4;
      matrix[N_site, N_season] beta_swarmB_e4;
      real<lower = 0> sigma_e4;
    
      vector[N_day] z_theta_e4;
      real<lower = 0> eta_theta_e4;
      real<lower = 0> rho_theta_e4;
    
      matrix[N_season, N_month] z_tau_e4;
      real mu_tau_e4;
      real<lower = 0> sigma_tau_e4;
    
      matrix[N_site, N_month] z_psi_e4;
      real mu_psi_e4;
      real<lower = 0> sigma_psi_e4;
      
      ////////////////////
    
      
    }
    
    transformed parameters{
      
      ///////////////////////
      ///////////////////////// imputed variables
      vector[N] swarm_area;
      vector[N] SBiomass_merge;
      SBiomass_merge = merge_missing(SwarmB_missindx, 
                                     to_vector(swarm_biomass), 
                                     SBiomass_impute);
      vector[N] swarmINI_merge;
      swarmINI_merge = merge_missing(SwarmINI_missindx, 
                                     to_vector(swarm_area_inital), 
                                     SwarmINI_impute);
      vector[N] swarmFIN_merge;
      swarmFIN_merge = merge_missing(SwarmFIN_missindx, 
                                     to_vector(swarm_area_final), 
                                     SwarmFIN_impute);
      swarm_area = (swarmINI_merge + swarmFIN_merge) / 2;
      // swarm_area = scale(swarm_area);
      // SBiomass_merge = scale(SBiomass_merge);
    
      ///////////////////
      ///////////////////////// rain_i -> swarm
      
      vector[N_day] theta_e2;
      matrix[N_dim_day, N_dim_day] sigma_theta_e2;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e2;
      sigma_theta_e2 = cov_GPL2(dist_day, eta_theta_e2, rho_theta_e2, 0.01);
      L_sigma_theta_e2 = cholesky_decompose(sigma_theta_e2);
      theta_e2 = L_sigma_theta_e2 * z_theta_e2;
    
      matrix[N_season, N_month] tau_e2;
      matrix[N_site, N_month] psi_e2;
      tau_e2 = mu_tau_e2 + z_tau_e2 * sigma_tau_e2;
      psi_e2 = mu_psi_e2 + z_psi_e2 * sigma_psi_e2;
      
      ///////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      
      vector[N_day] theta_e3;
      matrix[N_dim_day, N_dim_day] sigma_theta_e3;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e3;
      sigma_theta_e3 = cov_GPL2(dist_day, eta_theta_e3, rho_theta_e3, 0.01);
      L_sigma_theta_e3 = cholesky_decompose(sigma_theta_e3);
      theta_e3 = L_sigma_theta_e3 * z_theta_e3;
    
      matrix[N_season, N_month] tau_e3;
      matrix[N_site, N_month] psi_e3;
      tau_e3 = mu_tau_e3 + z_tau_e3 * sigma_tau_e3;
      psi_e3 = mu_psi_e3 + z_psi_e3 * sigma_psi_e3;
    
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      
      vector[N_day] theta_e4;
      matrix[N_dim_day, N_dim_day] sigma_theta_e4;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e4;
      sigma_theta_e4 = cov_GPL2(dist_day, eta_theta_e4, rho_theta_e4, 0.01);
      L_sigma_theta_e4 = cholesky_decompose(sigma_theta_e4);
      theta_e4 = L_sigma_theta_e4 * z_theta_e4;
    
      matrix[N_season, N_month] tau_e4;
      matrix[N_site, N_month] psi_e4;
      tau_e4 = mu_tau_e4 + z_tau_e4 * sigma_tau_e4;
      psi_e4 = mu_psi_e4 + z_psi_e4 * sigma_psi_e4;
    
      ///////////////////
    }
    
    model {
      
      ///////////////////////
      /////////////////////// imputed variables
      mu_sb ~ normal(3.5, 1);
      sigma_sb ~ exponential(1);
      SBiomass_merge ~ normal(mu_sb, sigma_sb);
      mu_sbINI ~ normal(3.5, 1);
      sigma_sbINI ~ exponential(1);
      swarmINI_merge ~ normal(mu_sbINI, sigma_sbINI);
      mu_sbFIN ~ normal(3.5, 1);
      sigma_sbFIN ~ exponential(1);
      swarmFIN_merge ~ normal(mu_sbFIN, sigma_sbFIN);
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      vector[N] mu_e1;
      a_e1 ~ normal(0, 1);
      beta_rainW2_e1 ~ normal(0, 0.5);
      sigma_e1 ~ exponential(1);
      
      ///////////////////
      /////////////////// rain_i -> swarm
      to_vector(a_e2) ~ normal(3, 1);
      sigma_e2 ~ exponential(1);
      to_vector(beta_rainW1_e2) ~ normal(0, 0.25);
    
      z_theta_e2 ~ normal(0, 0.5);     
      eta_theta_e2 ~ exponential(3);   
      rho_theta_e2 ~ exponential(0.5); 
      
      to_vector(z_tau_e2) ~ normal(0, 0.5);
      mu_tau_e2 ~ normal(0, 0.5);
      sigma_tau_e2 ~ exponential(1);
    
      to_vector(z_psi_e2) ~ normal(0, 0.5);
      mu_psi_e2 ~ normal(0, 0.5);
      sigma_psi_e2 ~ exponential(1);
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      to_vector(a_e3) ~ normal(2.5, 1);
      sigma_e3 ~ exponential(1);
      to_vector(beta_rainW1_e3) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e3) ~ normal(0, 3);
    
      z_theta_e3 ~ normal(0, 1);
      eta_theta_e3 ~ exponential(3);
      rho_theta_e3 ~ exponential(0.5);
      
      to_vector(z_tau_e3) ~ normal(0, 0.5);
      mu_tau_e3 ~ normal(0, 0.5);
      sigma_tau_e3 ~ exponential(1);
    
      to_vector(z_psi_e3) ~ normal(0, 0.5);
      mu_psi_e3 ~ normal(0, 0.5);
      sigma_psi_e3 ~ exponential(1);
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      to_vector(a_e4) ~ normal(0.25, 0.5);
      sigma_e4 ~ exponential(1);
      to_vector(beta_rainW1_e4) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e4) ~ normal(0, 0.5);
      to_vector(beta_swarmB_e4) ~ normal(0, 0.5);
    
      z_theta_e4 ~ normal(0, 0.5);
      eta_theta_e4 ~ exponential(3);
      rho_theta_e4 ~ exponential(0.5);
      
      to_vector(z_tau_e4) ~ normal(0, 0.5);
      mu_tau_e4 ~ normal(0, 0.5);
      sigma_tau_e4 ~ exponential(1);
    
      to_vector(z_psi_e4) ~ normal(0, 0.5);
      mu_psi_e4 ~ normal(0, 0.5);
      sigma_psi_e4 ~ exponential(1);
      
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      for (i in 1:N) {
        cum_rainfall_W1[i] ~ normal(a_e1 + beta_rainW2_e1 * cum_rainfall_W5[i], 
                                    sigma_e1);
      }
    
      ///////////////////
      /////////////////// rain_i -> swarm
      for (i in 1:N) {
        swarm_area[i] ~ student_t(2,
                                  a_e2[site[i], season[i]] + 
                                  beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W1[i] +
                                  theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                                  psi_e2[site[i], month[i]], 
                                  sigma_e2);
      }
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      for (i in 1:N) {
        SBiomass_merge[i] ~ student_t(2,
                                     a_e3[site[i], season[i]] + 
                                     beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W1[i] +
                                     beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                                     theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                                     psi_e3[site[i], month[i]], 
                                     sigma_e3);
      }
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      for (i in 1:N) {
         skewness[i] ~ normal(a_e4[site[i], season[i]] + 
                              beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W1[i] +
                              beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                              beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                              theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                              psi_e4[site[i], month[i]], sigma_e4);
      }
    
    }
    
    generated quantities {
      vector[N] mu_e1;
      vector[N] mu_e2;
      vector[N] mu_e3;
      vector[N] mu_e4;
      array[N] real ppcheck_e1;
      array[N] real ppcheck_e2;
      array[N] real ppcheck_e3;
      array[N] real ppcheck_e4;
      
      for (i in 1:N) {
        mu_e1[i] = a_e1 + beta_rainW2_e1 * cum_rainfall_W5[i]; 
      }
    
      ppcheck_e1 = normal_rng(mu_e1, sigma_e1);
    
      for (i in 1:N) {
        mu_e2[i] = a_e2[site[i], season[i]] + 
                  beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W1[i] +
                  theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                  psi_e2[site[i], month[i]];
      }
      
      ppcheck_e2 = student_t_rng(2, mu_e2, sigma_e2);
    
    
      for (i in 1:N) {
        mu_e3[i] = a_e3[site[i], season[i]] + 
                   beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W1[i] +
                   beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                   theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                   psi_e3[site[i], month[i]];
      }
      
      ppcheck_e3 = student_t_rng(2, mu_e3, sigma_e3);
    
      for (i in 1:N) {
         mu_e4[i] = a_e4[site[i], season[i]] + 
                    beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W1[i] +
                    beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                    beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                    theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                    psi_e4[site[i], month[i]];
      }
    
      ppcheck_e4 = normal_rng(mu_e4, sigma_e4);
    
    }
    
    ")
    
```

#### Running MCMC algorith

```{r, eval=FALSE}
file <- paste(getwd(), '/w1_skewness.stan', sep ='')

fit_skewnessW1 <- cmdstan_model(file, compile = T)

mod_skewnessW1_obs <- 
  fit_skewnessW1$sample(
    data = network_metrics_obs2.1, 
    chains = 3, 
    parallel_chains = 3, 
    iter_sampling = 8e3, 
    iter_warmup = 500, 
    thin = 10, 
    seed = 123
  )
```


```{r, echo=FALSE}
mod_skewnessW1_obs <- readRDS('causal_mod_skewnessW1.rds')
```

#### Model diagnostic

```{r, fig.height=15, fig.cap="Rhat values and ess of group-level parameters from the generative model explaining the effect of cumulative rainfall during W1, on skewness of normalized degree of ant-followers interaction networks."}


par(mfrow = c(5, 2), mar = c(4, 4, 1.5, 1))
mod_diagnostics(mod_skewnessW1_obs, 
                mod_skewnessW1_obs$summary(
                  unique(paste('psi_e2[', 
                               network_metrics_obs2.1$site,
                               ',',
                               network_metrics_obs2.1$month, ']', 
                               sep = '')))) 

mod_diagnostics(mod_skewnessW1_obs, 
                mod_skewnessW1_obs$summary(
                  unique(paste('psi_e3[', 
                               network_metrics_obs2.1$site,
                               ',',
                               network_metrics_obs2.1$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_skewnessW1_obs, 
                mod_skewnessW1_obs$summary(
                  unique(paste('psi_e4[', 
                               network_metrics_obs2.1$site,
                               ',',
                               network_metrics_obs2.1$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_skewnessW1_obs, 
                mod_skewnessW1_obs$summary(
                  unique(paste('tau_e4[', 
                               network_metrics_obs2.1$year,
                               ',',
                               network_metrics_obs2.1$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_skewnessW1_obs, 
                mod_skewnessW1_obs$summary(
                  unique(paste('tau_e2[', 
                               network_metrics_obs2.1$year,
                               ',',
                               network_metrics_obs2.1$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_skewnessW1_obs, 
                mod_skewnessW1_obs$summary(
                  unique(paste('tau_e3[', 
                               network_metrics_obs2.1$year,
                               ',',
                               network_metrics_obs2.1$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_skewnessW1_obs, 
                mod_skewnessW1_obs$summary(paste('theta_e4[', 
                                                 1:network_metrics_obs2.1$N_day, ']', 
                                                 sep = '')))
mod_diagnostics(mod_skewnessW1_obs, 
                mod_skewnessW1_obs$summary(paste('theta_e3[', 
                                                 1:network_metrics_obs2.1$N_day, ']', 
                                                 sep = '')))

mod_diagnostics(mod_skewnessW1_obs, 
                mod_skewnessW1_obs$summary(paste('theta_e2[', 
                                                 1:network_metrics_obs2.1$N_day, ']', 
                                                 sep = '')))
par(mfrow = c(1, 1))
```


```{r, fig.cap="Rhat values and ess of slope, intercept, and dispersion parameters  from the generative model explaining the effect of cumulative rainfall during W1, on skewness of ant followers birds."}
summary_skewnessW1 <- mod_skewnessW1_obs$summary(c('beta_rainW2_e1', 
                                                   'beta_rainW1_e2',
                                                   'beta_rainW1_e3',
                                                   'beta_rainW1_e4',
                                                   'beta_sawrA_e3',
                                                   'beta_sawrA_e4',
                                                   'beta_swarmB_e4', 
                                                   'a_e1', 'a_e2', 
                                                   'a_e3', 'a_e4',
                                                   'sigma_e1', 'sigma_e2', 
                                                   'sigma_e3', 'sigma_e4', 
                                                   'swarm_area',
                                                   'SBiomass_merge',
                                                   'lp__'))


mod_diagnostics(mod_skewnessW1_obs, summary_skewnessW1)

```

```{r, fig.cap= "Posterior predictive checks of cumulative rainfall W1"}
post_skewnessW1_obs <- mod_skewnessW1_obs$draws(c('beta_rainW2_e1', 
                                                  'beta_rainW1_e2',
                                                  'beta_rainW1_e3',
                                                  'beta_rainW1_e4',
                                                  'beta_sawrA_e3',
                                                  'beta_sawrA_e4',
                                                  'beta_swarmB_e4', 
                                                  'a_e1', 'a_e2', 'a_e3', 'a_e4',
                                                  'sigma_e1', 'sigma_e2', 
                                                  'sigma_e3', 'sigma_e4',
                                                  'swarm_area',
                                                  'SBiomass_merge'
), 
format = 'df')

swarm_area <- apply(post_skewnessW1_obs[, grep('swarm_area', colnames(post_skewnessW1_obs))], 
                    2, mean)

swarm_BM <- 
  apply(post_skewnessW1_obs[, grep('SBiomass_merge', colnames(post_skewnessW1_obs))], 
        2, mean)

ppcheck_swarmA <- mod_skewnessW1_obs$draws('ppcheck_e2', format = 'matrix')
ppcheck_swarmB <- mod_skewnessW1_obs$draws('ppcheck_e3', format = 'matrix')
ppcheck_skewness <- mod_skewnessW1_obs$draws('ppcheck_e4', format = 'matrix')
ppcheck_R1 <- mod_skewnessW1_obs$draws('ppcheck_e1', format = 'matrix')



par(mfrow = c(2, 2), mar = c(4, 4, 1, 1))
plot(density(network_metrics_obs2.1$cum_rainfall_W1), 
     main = '', xlab = 'Cum rainfall W1')
for(i in 1:100) lines(density(ppcheck_R1[i, ]), lwd = 0.1)
lines(density(network_metrics_obs2.1[-3]$cum_rainfall_W1), col = 'red')

plot(density(swarm_area), main = '', xlab = 'Swarm area')
for(i in 1:100) lines(density(ppcheck_swarmA[i, ]), lwd = 0.1)
lines(density(swarm_area), col = 'red')

plot(density(swarm_BM), main = '', xlab = 'Arthropod biomass')
for(i in 1:500) lines(density(ppcheck_swarmB[i, ]), lwd = 0.1)
lines(density(swarm_BM), col = 'red')

plot(density(network_metrics_obs2.1$skewness), 
     main = '', xlab = 'skewness')
for(i in 1:100) lines(density(ppcheck_skewness[i, ]), lwd = 0.1)
lines(density(network_metrics_obs2.1[-3]$norm_degree), col = 'red')


plot(density(swarm_area), main = '', xlab = 'Swarm area')
for(i in 1:100) lines(density(ppcheck_swarmA[i, ]), lwd = 0.1)


plot(density(swarm_BM), main = '', xlab = 'Arthropod biomass')
for(i in 1:100) lines(density(ppcheck_swarmB[i, ]), lwd = 0.1)


plot(density(network_metrics_obs2[-3]$norm_degree), 
     main = '', xlab = 'Net size')
for(i in 1:100) lines(density(ppcheck_norm_degree[i, ]), lwd = 0.1)


post_beta_skewnessW1 <- gather(post_skewnessW1_obs[, grep('beta', colnames(post_skewnessW1_obs))])

post_beta_skewnessW1$key <- as.factor(post_beta_skewnessW1$key)


```

### Window 5 model

#### Stan code

```{r, eval=FALSE}
cat(file = 'w5_skewness.stan', 
    "
    
    functions {
    
      vector scale(vector x) {
        int N = dims(x)[1];
        real mu = mean(x);
        real sigma = sd(x);
        vector[N] scaled_v;
    
        for (i in 1:N) {
          scaled_v[i] = (x[i] - mu) / sigma;
        }
        return scaled_v;
      }  
    
      vector merge_missing(int[] miss_indxex, vector x_obs, vector x_miss) {
                int N = dims(x_obs)[1];
                int N_miss = dims(x_miss)[1];
                vector[N] merge;
                merge = x_obs;
                for (i in 1:N_miss) {
                    merge[miss_indxex[i]] = x_miss[i];
                }
            return merge;
          }
    
    
      matrix cov_GPL2(matrix x,
                      real eta,
                      real rho,
                      real delta) {
                      
                      int N = dims(x)[1];
                      matrix[N, N] K;
    
                      for (i in 1:(N-1)) {
                        K[i, i] = eta + delta;
                        for (j in (i + 1):N) {
                          K[i, j] = eta * exp(-rho * square(x[i, j]));
                          K[j, i] = K[i, j];
                        }
                      }
                      K[N, N] = eta + delta;
                      return K;
                      }
    }
    
    data {
      int N;
      int N_day;
      int N_month;
      int N_season;
      int N_site;
      int N_dim_day;
      int N_naSwarmBio;
      int N_naSwarmINI;
      int N_naSwarmFIN;
      array[N_naSwarmBio] int SwarmB_missindx;
      array[N_naSwarmINI] int SwarmINI_missindx;
      array[N_naSwarmFIN] int SwarmFIN_missindx;
      vector[N] skewness;
      array[N] int day;
      array[N] int month;
      array[N] int season;
      array[N] int site;
      vector[N] swarm_biomass;
      vector[N] swarm_area_inital;
      vector[N] swarm_area_final;
      array[N] int cum_rainfall_W10;
      array[N] int cum_rainfall_W5;
      matrix[N_dim_day, N_dim_day] dist_day;
    }
    
    parameters {
      /////////////
      ///////////// imputed variables
      vector[N_naSwarmBio] SBiomass_impute;
      real mu_sb;
      real<lower = 0> sigma_sb;
      vector[N_naSwarmINI] SwarmINI_impute;
      real mu_sbINI;
      real<lower = 0> sigma_sbINI;
      vector[N_naSwarmFIN] SwarmFIN_impute;
      real mu_sbFIN;
      real<lower = 0> sigma_sbFIN;
    
      //////////////
      ///////////// rain_i+n -> rain_i
      real a_e1;
      real beta_rainW2_e1;
      real<lower = 0> sigma_e1;
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm
      matrix[N_site, N_season] a_e2;
      matrix[N_site, N_season] beta_rainW1_e2;
      real<lower = 0> sigma_e2;
    
      vector[N_day] z_theta_e2;
      real<lower = 0> eta_theta_e2;
      real<lower = 0> rho_theta_e2;
    
      matrix[N_season, N_month] z_tau_e2;
      real mu_tau_e2;
      real<lower = 0> sigma_tau_e2;
    
      matrix[N_site, N_month] z_psi_e2;
      real mu_psi_e2;
      real<lower = 0> sigma_psi_e2;
      
      ////////////////////
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      matrix[N_site, N_season] a_e3;
      matrix[N_site, N_season] beta_rainW1_e3;
      matrix[N_site, N_season] beta_sawrA_e3;
      real<lower = 0> sigma_e3;
    
      vector[N_day] z_theta_e3;
      real<lower = 0> eta_theta_e3;
      real<lower = 0> rho_theta_e3;
    
      matrix[N_season, N_month] z_tau_e3;
      real mu_tau_e3;
      real<lower = 0> sigma_tau_e3;
    
      matrix[N_site, N_month] z_psi_e3;
      real mu_psi_e3;
      real<lower = 0> sigma_psi_e3;
      
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      matrix[N_site, N_season] a_e4;
      matrix[N_site, N_season] beta_rainW1_e4;
      matrix[N_site, N_season] beta_sawrA_e4;
      matrix[N_site, N_season] beta_swarmB_e4;
      real<lower = 0> sigma_e4;
    
      vector[N_day] z_theta_e4;
      real<lower = 0> eta_theta_e4;
      real<lower = 0> rho_theta_e4;
    
      matrix[N_season, N_month] z_tau_e4;
      real mu_tau_e4;
      real<lower = 0> sigma_tau_e4;
    
      matrix[N_site, N_month] z_psi_e4;
      real mu_psi_e4;
      real<lower = 0> sigma_psi_e4;
      
      ////////////////////
    
      
    }
    
    transformed parameters{
      
      ///////////////////////
      ///////////////////////// imputed variables
      vector[N] swarm_area;
      vector[N] SBiomass_merge;
      SBiomass_merge = merge_missing(SwarmB_missindx, 
                                     to_vector(swarm_biomass), 
                                     SBiomass_impute);
      vector[N] swarmINI_merge;
      swarmINI_merge = merge_missing(SwarmINI_missindx, 
                                     to_vector(swarm_area_inital), 
                                     SwarmINI_impute);
      vector[N] swarmFIN_merge;
      swarmFIN_merge = merge_missing(SwarmFIN_missindx, 
                                     to_vector(swarm_area_final), 
                                     SwarmFIN_impute);
      swarm_area = (swarmINI_merge + swarmFIN_merge) / 2;
      // swarm_area = scale(swarm_area);
      // SBiomass_merge = scale(SBiomass_merge);
    
      ///////////////////
      ///////////////////////// rain_i -> swarm
      
      vector[N_day] theta_e2;
      matrix[N_dim_day, N_dim_day] sigma_theta_e2;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e2;
      sigma_theta_e2 = cov_GPL2(dist_day, eta_theta_e2, rho_theta_e2, 0.01);
      L_sigma_theta_e2 = cholesky_decompose(sigma_theta_e2);
      theta_e2 = L_sigma_theta_e2 * z_theta_e2;
    
      matrix[N_season, N_month] tau_e2;
      matrix[N_site, N_month] psi_e2;
      tau_e2 = mu_tau_e2 + z_tau_e2 * sigma_tau_e2;
      psi_e2 = mu_psi_e2 + z_psi_e2 * sigma_psi_e2;
      
      ///////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      
      vector[N_day] theta_e3;
      matrix[N_dim_day, N_dim_day] sigma_theta_e3;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e3;
      sigma_theta_e3 = cov_GPL2(dist_day, eta_theta_e3, rho_theta_e3, 0.01);
      L_sigma_theta_e3 = cholesky_decompose(sigma_theta_e3);
      theta_e3 = L_sigma_theta_e3 * z_theta_e3;
    
      matrix[N_season, N_month] tau_e3;
      matrix[N_site, N_month] psi_e3;
      tau_e3 = mu_tau_e3 + z_tau_e3 * sigma_tau_e3;
      psi_e3 = mu_psi_e3 + z_psi_e3 * sigma_psi_e3;
    
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      
      vector[N_day] theta_e4;
      matrix[N_dim_day, N_dim_day] sigma_theta_e4;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e4;
      sigma_theta_e4 = cov_GPL2(dist_day, eta_theta_e4, rho_theta_e4, 0.01);
      L_sigma_theta_e4 = cholesky_decompose(sigma_theta_e4);
      theta_e4 = L_sigma_theta_e4 * z_theta_e4;
    
      matrix[N_season, N_month] tau_e4;
      matrix[N_site, N_month] psi_e4;
      tau_e4 = mu_tau_e4 + z_tau_e4 * sigma_tau_e4;
      psi_e4 = mu_psi_e4 + z_psi_e4 * sigma_psi_e4;
    
      ///////////////////
    }
    
    model {
      
      ///////////////////////
      /////////////////////// imputed variables
      mu_sb ~ normal(3.5, 1);
      sigma_sb ~ exponential(1);
      SBiomass_merge ~ normal(mu_sb, sigma_sb);
      mu_sbINI ~ normal(3.5, 1);
      sigma_sbINI ~ exponential(1);
      swarmINI_merge ~ normal(mu_sbINI, sigma_sbINI);
      mu_sbFIN ~ normal(3.5, 1);
      sigma_sbFIN ~ exponential(1);
      swarmFIN_merge ~ normal(mu_sbFIN, sigma_sbFIN);
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      vector[N] mu_e1;
      a_e1 ~ normal(0, 1);
      beta_rainW2_e1 ~ normal(0, 0.5);
      sigma_e1 ~ exponential(1);
      
      ///////////////////
      /////////////////// rain_i -> swarm
      to_vector(a_e2) ~ normal(3, 1);
      sigma_e2 ~ exponential(1);
      to_vector(beta_rainW1_e2) ~ normal(0, 0.25);
    
      z_theta_e2 ~ normal(0, 0.5);     
      eta_theta_e2 ~ exponential(3);   
      rho_theta_e2 ~ exponential(0.5); 
      
      to_vector(z_tau_e2) ~ normal(0, 0.5);
      mu_tau_e2 ~ normal(0, 0.5);
      sigma_tau_e2 ~ exponential(1);
    
      to_vector(z_psi_e2) ~ normal(0, 0.5);
      mu_psi_e2 ~ normal(0, 0.5);
      sigma_psi_e2 ~ exponential(1);
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      to_vector(a_e3) ~ normal(2.5, 1);
      sigma_e3 ~ exponential(1);
      to_vector(beta_rainW1_e3) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e3) ~ normal(0, 3);
    
      z_theta_e3 ~ normal(0, 1);
      eta_theta_e3 ~ exponential(3);
      rho_theta_e3 ~ exponential(0.5);
      
      to_vector(z_tau_e3) ~ normal(0, 0.5);
      mu_tau_e3 ~ normal(0, 0.5);
      sigma_tau_e3 ~ exponential(1);
    
      to_vector(z_psi_e3) ~ normal(0, 0.5);
      mu_psi_e3 ~ normal(0, 0.5);
      sigma_psi_e3 ~ exponential(1);
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      to_vector(a_e4) ~ normal(0.25, 0.5);
      sigma_e4 ~ exponential(1);
      to_vector(beta_rainW1_e4) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e4) ~ normal(0, 0.5);
      to_vector(beta_swarmB_e4) ~ normal(0, 0.5);
    
      z_theta_e4 ~ normal(0, 0.5);
      eta_theta_e4 ~ exponential(3);
      rho_theta_e4 ~ exponential(0.5);
      
      to_vector(z_tau_e4) ~ normal(0, 0.5);
      mu_tau_e4 ~ normal(0, 0.5);
      sigma_tau_e4 ~ exponential(1);
    
      to_vector(z_psi_e4) ~ normal(0, 0.5);
      mu_psi_e4 ~ normal(0, 0.5);
      sigma_psi_e4 ~ exponential(1);
      
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      for (i in 1:N) {
        cum_rainfall_W5[i] ~ normal(a_e1 + beta_rainW2_e1 * cum_rainfall_W10[i], 
                                    sigma_e1);
      }
    
      ///////////////////
      /////////////////// rain_i -> swarm
      for (i in 1:N) {
        swarm_area[i] ~ student_t(2,
                                  a_e2[site[i], season[i]] + 
                                  beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W5[i] +
                                  theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                                  psi_e2[site[i], month[i]], 
                                  sigma_e2);
      }
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      for (i in 1:N) {
        SBiomass_merge[i] ~ student_t(2,
                                     a_e3[site[i], season[i]] + 
                                     beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W5[i] +
                                     beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                                     theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                                     psi_e3[site[i], month[i]], 
                                     sigma_e3);
      }
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      for (i in 1:N) {
         skewness[i] ~ normal(a_e4[site[i], season[i]] + 
                              beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W5[i] +
                              beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                              beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                              theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                              psi_e4[site[i], month[i]], sigma_e4);
      }
    
    }
    
    generated quantities {
      vector[N] mu_e1;
      vector[N] mu_e2;
      vector[N] mu_e3;
      vector[N] mu_e4;
      array[N] real ppcheck_e1;
      array[N] real ppcheck_e2;
      array[N] real ppcheck_e3;
      array[N] real ppcheck_e4;
      
      for (i in 1:N) {
        mu_e1[i] = a_e1 + beta_rainW2_e1 * cum_rainfall_W10[i]; 
      }
    
      ppcheck_e1 = normal_rng(mu_e1, sigma_e1);
    
      for (i in 1:N) {
        mu_e2[i] = a_e2[site[i], season[i]] + 
                  beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W5[i] +
                  theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                  psi_e2[site[i], month[i]];
      }
      
      ppcheck_e2 = student_t_rng(2, mu_e2, sigma_e2);
    
    
      for (i in 1:N) {
        mu_e3[i] = a_e3[site[i], season[i]] + 
                   beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W5[i] +
                   beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                   theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                   psi_e3[site[i], month[i]];
      }
      
      ppcheck_e3 = student_t_rng(2, mu_e3, sigma_e3);
    
      for (i in 1:N) {
         mu_e4[i] = a_e4[site[i], season[i]] + 
                    beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W5[i] +
                    beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                    beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                    theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                    psi_e4[site[i], month[i]];
      }
    
      ppcheck_e4 = normal_rng(mu_e4, sigma_e4);
    
    }
    
    ")

```

#### Running MCMC algorithm


```{r, eval=FALSE}
file <- paste(getwd(), '/w5_skewness.stan', sep ='')

fit_skewnessW5 <- cmdstan_model(file, compile = T)

mod_skewnessW5_obs <- 
  fit_skewnessW5$sample(
    data = network_metrics_obs2.1, 
    chains = 3, 
    parallel_chains = 3, 
    iter_sampling = 8e3, 
    iter_warmup = 500, 
    thin = 10, 
    seed = 123
  )

```

```{r, echo=FALSE, eval=TRUE}
mod_skewnessW5_obs <- readRDS('causal_mod_skewnessW5.rds')
```

#### Model diagnostics

```{r, fig.height=15, fig.cap="Rhat values and ess of group-level parameters from the generative model explaining the effect of cumulative rainfall during W5, on skewness of normalized degree of ant-followers interaction networks."}

par(mfrow = c(5, 2), mar = c(4, 4, 1.5, 1))
mod_diagnostics(mod_skewnessW5_obs, 
                mod_skewnessW5_obs$summary(
                  unique(paste('psi_e2[', 
                               network_metrics_obs2.1$site,
                               ',',
                               network_metrics_obs2.1$month, ']', 
                               sep = '')))) 

mod_diagnostics(mod_skewnessW5_obs, 
                mod_skewnessW5_obs$summary(
                  unique(paste('psi_e3[', 
                               network_metrics_obs2.1$site,
                               ',',
                               network_metrics_obs2.1$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_skewnessW5_obs, 
                mod_skewnessW5_obs$summary(
                  unique(paste('psi_e4[', 
                               network_metrics_obs2.1$site,
                               ',',
                               network_metrics_obs2.1$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_skewnessW5_obs, 
                mod_skewnessW5_obs$summary(
                  unique(paste('tau_e4[', 
                               network_metrics_obs2.1$year,
                               ',',
                               network_metrics_obs2.1$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_skewnessW5_obs, 
                mod_skewnessW5_obs$summary(
                  unique(paste('tau_e2[', 
                               network_metrics_obs2.1$year,
                               ',',
                               network_metrics_obs2.1$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_skewnessW5_obs, 
                mod_skewnessW5_obs$summary(
                  unique(paste('tau_e3[', 
                               network_metrics_obs2.1$year,
                               ',',
                               network_metrics_obs2.1$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_skewnessW5_obs, 
                mod_skewnessW5_obs$summary(paste('theta_e4[', 
                                                 1:network_metrics_obs2.1$N_day, ']', 
                                                 sep = '')))
mod_diagnostics(mod_skewnessW5_obs, 
                mod_skewnessW5_obs$summary(paste('theta_e3[', 
                                                 1:network_metrics_obs2.1$N_day, ']', 
                                                 sep = '')))

mod_diagnostics(mod_skewnessW5_obs, 
                mod_skewnessW5_obs$summary(paste('theta_e2[', 
                                                 1:network_metrics_obs2.1$N_day, ']', 
                                                 sep = '')))
par(mfrow = c(1, 1))
```

```{r, fig.cap="Rhat values and ess of slope, intercept, and dispersion parameters  from the generative model explaining the effect of cumulative rainfall during W5, on skewness degree of ant followers birds."}
summary_skewnessW5 <- mod_skewnessW5_obs$summary(c('beta_rainW2_e1', 
                                                   'beta_rainW1_e2',
                                                   'beta_rainW1_e3',
                                                   'beta_rainW1_e4',
                                                   'beta_sawrA_e3',
                                                   'beta_sawrA_e4',
                                                   'beta_swarmB_e4', 
                                                   'a_e1', 'a_e2', 
                                                   'a_e3', 'a_e4',
                                                   'sigma_e1', 'sigma_e2', 
                                                   'sigma_e3', 'sigma_e4', 
                                                   'swarm_area',
                                                   'SBiomass_merge',
                                                   'lp__'))

mod_diagnostics(mod_skewnessW5_obs, summary_skewnessW5)

```


```{r, fig.cap= "Posterior predictive checks"}
post_skewnessW5_obs <- mod_skewnessW5_obs$draws(c('beta_rainW2_e1', 
                                                  'beta_rainW1_e2',
                                                  'beta_rainW1_e3',
                                                  'beta_rainW1_e4',
                                                  'beta_sawrA_e3',
                                                  'beta_sawrA_e4',
                                                  'beta_swarmB_e4', 
                                                  'a_e1', 'a_e2', 'a_e3', 'a_e4',
                                                  'sigma_e1', 'sigma_e2', 
                                                  'sigma_e3', 'sigma_e4',
                                                  'swarm_area',
                                                  'SBiomass_merge'
), 
format = 'df')

swarm_area <- apply(post_skewnessW5_obs[, grep('swarm_area', colnames(post_skewnessW5_obs))], 
                    2, mean)

swarm_BM <- 
  apply(post_skewnessW5_obs[, grep('SBiomass_merge', colnames(post_skewnessW5_obs))], 
        2, mean)

ppcheck_swarmA <- mod_skewnessW5_obs$draws('ppcheck_e2', format = 'matrix')
ppcheck_swarmB <- mod_skewnessW5_obs$draws('ppcheck_e3', format = 'matrix')
ppcheck_skewness <- mod_skewnessW5_obs$draws('ppcheck_e4', format = 'matrix')
ppcheck_R1 <- mod_skewnessW5_obs$draws('ppcheck_e1', format = 'matrix')

par(mfrow = c(2, 2), mar = c(4, 4, 1, 1))
plot(density(network_metrics_obs2.1$cum_rainfall_W5), 
     main = '', xlab = 'Cum rainfall W5')
for(i in 1:100) lines(density(ppcheck_R1[i, ]), lwd = 0.1)
lines(density(network_metrics_obs2.1$cum_rainfall_W5), col = 'red')

plot(density(swarm_area), main = '', xlab = 'Swarm area')
for(i in 1:100) lines(density(ppcheck_swarmA[i, ]), lwd = 0.1)
lines(density(swarm_area), col = 'red')

plot(density(swarm_BM), main = '', xlab = 'Arthropod biomass')
for(i in 1:100) lines(density(ppcheck_swarmB[i, ]), lwd = 0.1)
lines(density(swarm_BM), col = 'red')

plot(density(network_metrics_obs2.1$skewness), 
     main = '', xlab = 'Net size')
for(i in 1:100) lines(density(ppcheck_skewness[i, ]), lwd = 0.1)
lines(density(network_metrics_obs2.1$skewness), col = 'red')

post_beta_skewnessW5 <- gather(post_skewnessW5_obs[, grep('beta', colnames(post_skewnessW5_obs))])

post_beta_skewnessW5$key <- as.factor(post_beta_skewnessW5$key)

```

### Window 10 model

#### Stan code

```{r, eval=FALSE}
cat(file = 'w10_skewness.stan', 
    "
    
    functions {
    
      vector scale(vector x) {
        int N = dims(x)[1];
        real mu = mean(x);
        real sigma = sd(x);
        vector[N] scaled_v;
    
        for (i in 1:N) {
          scaled_v[i] = (x[i] - mu) / sigma;
        }
        return scaled_v;
      }  
    
      vector merge_missing(int[] miss_indxex, vector x_obs, vector x_miss) {
                int N = dims(x_obs)[1];
                int N_miss = dims(x_miss)[1];
                vector[N] merge;
                merge = x_obs;
                for (i in 1:N_miss) {
                    merge[miss_indxex[i]] = x_miss[i];
                }
            return merge;
          }
    
    
      matrix cov_GPL2(matrix x,
                      real eta,
                      real rho,
                      real delta) {
                      
                      int N = dims(x)[1];
                      matrix[N, N] K;
    
                      for (i in 1:(N-1)) {
                        K[i, i] = eta + delta;
                        for (j in (i + 1):N) {
                          K[i, j] = eta * exp(-rho * square(x[i, j]));
                          K[j, i] = K[i, j];
                        }
                      }
                      K[N, N] = eta + delta;
                      return K;
                      }
    }
    
    data {
      int N;
      int N_day;
      int N_month;
      int N_season;
      int N_site;
      int N_dim_day;
      int N_naSwarmBio;
      int N_naSwarmINI;
      int N_naSwarmFIN;
      array[N_naSwarmBio] int SwarmB_missindx;
      array[N_naSwarmINI] int SwarmINI_missindx;
      array[N_naSwarmFIN] int SwarmFIN_missindx;
      vector[N] skewness;
      array[N] int day;
      array[N] int month;
      array[N] int season;
      array[N] int site;
      vector[N] swarm_biomass;
      vector[N] swarm_area_inital;
      vector[N] swarm_area_final;
      array[N] int cum_rainfall_W10;
      array[N] int cum_rainfall_W15;
      matrix[N_dim_day, N_dim_day] dist_day;
    }
    
    parameters {
      /////////////
      ///////////// imputed variables
      vector[N_naSwarmBio] SBiomass_impute;
      real mu_sb;
      real<lower = 0> sigma_sb;
      vector[N_naSwarmINI] SwarmINI_impute;
      real mu_sbINI;
      real<lower = 0> sigma_sbINI;
      vector[N_naSwarmFIN] SwarmFIN_impute;
      real mu_sbFIN;
      real<lower = 0> sigma_sbFIN;
    
      //////////////
      ///////////// rain_i+n -> rain_i
      real a_e1;
      real beta_rainW2_e1;
      real<lower = 0> sigma_e1;
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm
      matrix[N_site, N_season] a_e2;
      matrix[N_site, N_season] beta_rainW1_e2;
      real<lower = 0> sigma_e2;
    
      vector[N_day] z_theta_e2;
      real<lower = 0> eta_theta_e2;
      real<lower = 0> rho_theta_e2;
    
      matrix[N_season, N_month] z_tau_e2;
      real mu_tau_e2;
      real<lower = 0> sigma_tau_e2;
    
      matrix[N_site, N_month] z_psi_e2;
      real mu_psi_e2;
      real<lower = 0> sigma_psi_e2;
      
      ////////////////////
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      matrix[N_site, N_season] a_e3;
      matrix[N_site, N_season] beta_rainW1_e3;
      matrix[N_site, N_season] beta_sawrA_e3;
      real<lower = 0> sigma_e3;
    
      vector[N_day] z_theta_e3;
      real<lower = 0> eta_theta_e3;
      real<lower = 0> rho_theta_e3;
    
      matrix[N_season, N_month] z_tau_e3;
      real mu_tau_e3;
      real<lower = 0> sigma_tau_e3;
    
      matrix[N_site, N_month] z_psi_e3;
      real mu_psi_e3;
      real<lower = 0> sigma_psi_e3;
      
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      matrix[N_site, N_season] a_e4;
      matrix[N_site, N_season] beta_rainW1_e4;
      matrix[N_site, N_season] beta_sawrA_e4;
      matrix[N_site, N_season] beta_swarmB_e4;
      real<lower = 0> sigma_e4;
    
      vector[N_day] z_theta_e4;
      real<lower = 0> eta_theta_e4;
      real<lower = 0> rho_theta_e4;
    
      matrix[N_season, N_month] z_tau_e4;
      real mu_tau_e4;
      real<lower = 0> sigma_tau_e4;
    
      matrix[N_site, N_month] z_psi_e4;
      real mu_psi_e4;
      real<lower = 0> sigma_psi_e4;
      
      ////////////////////
    
      
    }
    
    transformed parameters{
      
      ///////////////////////
      ///////////////////////// imputed variables
      vector[N] swarm_area;
      vector[N] SBiomass_merge;
      SBiomass_merge = merge_missing(SwarmB_missindx, 
                                     to_vector(swarm_biomass), 
                                     SBiomass_impute);
      vector[N] swarmINI_merge;
      swarmINI_merge = merge_missing(SwarmINI_missindx, 
                                     to_vector(swarm_area_inital), 
                                     SwarmINI_impute);
      vector[N] swarmFIN_merge;
      swarmFIN_merge = merge_missing(SwarmFIN_missindx, 
                                     to_vector(swarm_area_final), 
                                     SwarmFIN_impute);
      swarm_area = (swarmINI_merge + swarmFIN_merge) / 2;
      // swarm_area = scale(swarm_area);
      // SBiomass_merge = scale(SBiomass_merge);
    
      ///////////////////
      ///////////////////////// rain_i -> swarm
      
      vector[N_day] theta_e2;
      matrix[N_dim_day, N_dim_day] sigma_theta_e2;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e2;
      sigma_theta_e2 = cov_GPL2(dist_day, eta_theta_e2, rho_theta_e2, 0.01);
      L_sigma_theta_e2 = cholesky_decompose(sigma_theta_e2);
      theta_e2 = L_sigma_theta_e2 * z_theta_e2;
    
      matrix[N_season, N_month] tau_e2;
      matrix[N_site, N_month] psi_e2;
      tau_e2 = mu_tau_e2 + z_tau_e2 * sigma_tau_e2;
      psi_e2 = mu_psi_e2 + z_psi_e2 * sigma_psi_e2;
      
      ///////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      
      vector[N_day] theta_e3;
      matrix[N_dim_day, N_dim_day] sigma_theta_e3;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e3;
      sigma_theta_e3 = cov_GPL2(dist_day, eta_theta_e3, rho_theta_e3, 0.01);
      L_sigma_theta_e3 = cholesky_decompose(sigma_theta_e3);
      theta_e3 = L_sigma_theta_e3 * z_theta_e3;
    
      matrix[N_season, N_month] tau_e3;
      matrix[N_site, N_month] psi_e3;
      tau_e3 = mu_tau_e3 + z_tau_e3 * sigma_tau_e3;
      psi_e3 = mu_psi_e3 + z_psi_e3 * sigma_psi_e3;
    
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      
      vector[N_day] theta_e4;
      matrix[N_dim_day, N_dim_day] sigma_theta_e4;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e4;
      sigma_theta_e4 = cov_GPL2(dist_day, eta_theta_e4, rho_theta_e4, 0.01);
      L_sigma_theta_e4 = cholesky_decompose(sigma_theta_e4);
      theta_e4 = L_sigma_theta_e4 * z_theta_e4;
    
      matrix[N_season, N_month] tau_e4;
      matrix[N_site, N_month] psi_e4;
      tau_e4 = mu_tau_e4 + z_tau_e4 * sigma_tau_e4;
      psi_e4 = mu_psi_e4 + z_psi_e4 * sigma_psi_e4;
    
      ///////////////////
    }
    
    model {
      
      ///////////////////////
      /////////////////////// imputed variables
      mu_sb ~ normal(3.5, 1);
      sigma_sb ~ exponential(1);
      SBiomass_merge ~ normal(mu_sb, sigma_sb);
      mu_sbINI ~ normal(3.5, 1);
      sigma_sbINI ~ exponential(1);
      swarmINI_merge ~ normal(mu_sbINI, sigma_sbINI);
      mu_sbFIN ~ normal(3.5, 1);
      sigma_sbFIN ~ exponential(1);
      swarmFIN_merge ~ normal(mu_sbFIN, sigma_sbFIN);
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      vector[N] mu_e1;
      a_e1 ~ normal(0, 1);
      beta_rainW2_e1 ~ normal(0, 0.5);
      sigma_e1 ~ exponential(1);
      
      ///////////////////
      /////////////////// rain_i -> swarm
      to_vector(a_e2) ~ normal(3, 1);
      sigma_e2 ~ exponential(1);
      to_vector(beta_rainW1_e2) ~ normal(0, 0.25);
    
      z_theta_e2 ~ normal(0, 0.5);     
      eta_theta_e2 ~ exponential(3);   
      rho_theta_e2 ~ exponential(0.5); 
      
      to_vector(z_tau_e2) ~ normal(0, 0.5);
      mu_tau_e2 ~ normal(0, 0.5);
      sigma_tau_e2 ~ exponential(1);
    
      to_vector(z_psi_e2) ~ normal(0, 0.5);
      mu_psi_e2 ~ normal(0, 0.5);
      sigma_psi_e2 ~ exponential(1);
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      to_vector(a_e3) ~ normal(2.5, 1);
      sigma_e3 ~ exponential(1);
      to_vector(beta_rainW1_e3) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e3) ~ normal(0, 3);
    
      z_theta_e3 ~ normal(0, 1);
      eta_theta_e3 ~ exponential(3);
      rho_theta_e3 ~ exponential(0.5);
      
      to_vector(z_tau_e3) ~ normal(0, 0.5);
      mu_tau_e3 ~ normal(0, 0.5);
      sigma_tau_e3 ~ exponential(1);
    
      to_vector(z_psi_e3) ~ normal(0, 0.5);
      mu_psi_e3 ~ normal(0, 0.5);
      sigma_psi_e3 ~ exponential(1);
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      to_vector(a_e4) ~ normal(0.25, 0.5);
      sigma_e4 ~ exponential(1);
      to_vector(beta_rainW1_e4) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e4) ~ normal(0, 0.5);
      to_vector(beta_swarmB_e4) ~ normal(0, 0.5);
    
      z_theta_e4 ~ normal(0, 0.5);
      eta_theta_e4 ~ exponential(3);
      rho_theta_e4 ~ exponential(0.5);
      
      to_vector(z_tau_e4) ~ normal(0, 0.5);
      mu_tau_e4 ~ normal(0, 0.5);
      sigma_tau_e4 ~ exponential(1);
    
      to_vector(z_psi_e4) ~ normal(0, 0.5);
      mu_psi_e4 ~ normal(0, 0.5);
      sigma_psi_e4 ~ exponential(1);
      
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      for (i in 1:N) {
        cum_rainfall_W10[i] ~ normal(a_e1 + beta_rainW2_e1 * cum_rainfall_W15[i], 
                                    sigma_e1);
      }
    
      ///////////////////
      /////////////////// rain_i -> swarm
      for (i in 1:N) {
        swarm_area[i] ~ student_t(2,
                                  a_e2[site[i], season[i]] + 
                                  beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W10[i] +
                                  theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                                  psi_e2[site[i], month[i]], 
                                  sigma_e2);
      }
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      for (i in 1:N) {
        SBiomass_merge[i] ~ student_t(2,
                                     a_e3[site[i], season[i]] + 
                                     beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W10[i] +
                                     beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                                     theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                                     psi_e3[site[i], month[i]], 
                                     sigma_e3);
      }
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      for (i in 1:N) {
         skewness[i] ~ normal(a_e4[site[i], season[i]] + 
                              beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W10[i] +
                              beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                              beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                              theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                              psi_e4[site[i], month[i]], sigma_e4);
      }
    
    }
    
    generated quantities {
      vector[N] mu_e1;
      vector[N] mu_e2;
      vector[N] mu_e3;
      vector[N] mu_e4;
      array[N] real ppcheck_e1;
      array[N] real ppcheck_e2;
      array[N] real ppcheck_e3;
      array[N] real ppcheck_e4;
      
      for (i in 1:N) {
        mu_e1[i] = a_e1 + beta_rainW2_e1 * cum_rainfall_W15[i]; 
      }
    
      ppcheck_e1 = normal_rng(mu_e1, sigma_e1);
    
      for (i in 1:N) {
        mu_e2[i] = a_e2[site[i], season[i]] + 
                  beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W10[i] +
                  theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                  psi_e2[site[i], month[i]];
      }
      
      ppcheck_e2 = student_t_rng(2, mu_e2, sigma_e2);
    
    
      for (i in 1:N) {
        mu_e3[i] = a_e3[site[i], season[i]] + 
                   beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W10[i] +
                   beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                   theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                   psi_e3[site[i], month[i]];
      }
      
      ppcheck_e3 = student_t_rng(2, mu_e3, sigma_e3);
    
      for (i in 1:N) {
         mu_e4[i] = a_e4[site[i], season[i]] + 
                    beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W10[i] +
                    beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                    beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                    theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                    psi_e4[site[i], month[i]];
      }
    
      ppcheck_e4 = normal_rng(mu_e4, sigma_e4);
    
    }
    
    ")

```

#### Running MCMC algorithm


```{r, eval=FALSE}
file <- paste(getwd(), '/w10_skewness.stan', sep ='')

fit_skewnessW10 <- cmdstan_model(file, compile = T)

mod_skewnessW10_obs <- 
  fit_skewnessW10$sample(
    data = network_metrics_obs2.1, 
    chains = 3, 
    parallel_chains = 3, 
    iter_sampling = 8e3, 
    iter_warmup = 500, 
    thin = 10, 
    seed = 123
  )

```

```{r, echo=FALSE, eval=TRUE}
mod_skewnessW10_obs <- readRDS('causal_mod_skewnessW10.rds')
```

#### Model diagnostics

```{r, fig.height=15, fig.cap="Rhat values and ess of group-level parameters from the generative model explaining the effect of cumulative rainfall during W10, on skewness of normalized degree of ant-followers interaction networks."}

par(mfrow = c(5, 2), mar = c(4, 4, 1.5, 1))
mod_diagnostics(mod_skewnessW10_obs, 
                mod_skewnessW10_obs$summary(
                  unique(paste('psi_e2[', 
                               network_metrics_obs2.1$site,
                               ',',
                               network_metrics_obs2.1$month, ']', 
                               sep = '')))) 

mod_diagnostics(mod_skewnessW10_obs, 
                mod_skewnessW10_obs$summary(
                  unique(paste('psi_e3[', 
                               network_metrics_obs2.1$site,
                               ',',
                               network_metrics_obs2.1$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_skewnessW10_obs, 
                mod_skewnessW10_obs$summary(
                  unique(paste('psi_e4[', 
                               network_metrics_obs2.1$site,
                               ',',
                               network_metrics_obs2.1$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_skewnessW10_obs, 
                mod_skewnessW10_obs$summary(
                  unique(paste('tau_e4[', 
                               network_metrics_obs2.1$year,
                               ',',
                               network_metrics_obs2.1$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_skewnessW10_obs, 
                mod_skewnessW10_obs$summary(
                  unique(paste('tau_e2[', 
                               network_metrics_obs2.1$year,
                               ',',
                               network_metrics_obs2.1$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_skewnessW10_obs, 
                mod_skewnessW10_obs$summary(
                  unique(paste('tau_e3[', 
                               network_metrics_obs2.1$year,
                               ',',
                               network_metrics_obs2.1$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_skewnessW10_obs, 
                mod_skewnessW10_obs$summary(paste('theta_e4[', 
                                                  1:network_metrics_obs2.1$N_day, ']', 
                                                  sep = '')))
mod_diagnostics(mod_skewnessW10_obs, 
                mod_skewnessW10_obs$summary(paste('theta_e3[', 
                                                  1:network_metrics_obs2.1$N_day, ']', 
                                                  sep = '')))

mod_diagnostics(mod_skewnessW10_obs, 
                mod_skewnessW10_obs$summary(paste('theta_e2[', 
                                                  1:network_metrics_obs2.1$N_day, ']', 
                                                  sep = '')))
par(mfrow = c(1, 1))
```

```{r, fig.cap="Rhat values and ess of slope, intercept, and dispersion parameters  from the generative model explaining the effect of cumulative rainfall during W10, on skewness of normalized degree of ant-followers interaction networks."}
summary_skewnessW10 <- mod_skewnessW10_obs$summary(c('beta_rainW2_e1', 
                                                     'beta_rainW1_e2',
                                                     'beta_rainW1_e3',
                                                     'beta_rainW1_e4',
                                                     'beta_sawrA_e3',
                                                     'beta_sawrA_e4',
                                                     'beta_swarmB_e4', 
                                                     'a_e1', 'a_e2', 
                                                     'a_e3', 'a_e4',
                                                     'sigma_e1', 'sigma_e2', 
                                                     'sigma_e3', 'sigma_e4', 
                                                     'swarm_area',
                                                     'SBiomass_merge',
                                                     'lp__'))

mod_diagnostics(mod_skewnessW10_obs, summary_skewnessW10)

```


```{r, fig.cap= "Posterior predictive checks"}
post_skewnessW10_obs <- mod_skewnessW10_obs$draws(c('beta_rainW2_e1', 
                                                    'beta_rainW1_e2',
                                                    'beta_rainW1_e3',
                                                    'beta_rainW1_e4',
                                                    'beta_sawrA_e3',
                                                    'beta_sawrA_e4',
                                                    'beta_swarmB_e4', 
                                                    'a_e1', 'a_e2', 'a_e3', 'a_e4',
                                                    'sigma_e1', 'sigma_e2', 
                                                    'sigma_e3', 'sigma_e4',
                                                    'swarm_area',
                                                    'SBiomass_merge'
), 
format = 'df')

swarm_area <- apply(post_skewnessW10_obs[, grep('swarm_area', colnames(post_skewnessW10_obs))], 
                    2, mean)

swarm_BM <- 
  apply(post_skewnessW10_obs[, grep('SBiomass_merge', colnames(post_skewnessW10_obs))], 
        2, mean)

ppcheck_swarmA <- mod_skewnessW10_obs$draws('ppcheck_e2', format = 'matrix')
ppcheck_swarmB <- mod_skewnessW10_obs$draws('ppcheck_e3', format = 'matrix')
ppcheck_skewness <- mod_skewnessW10_obs$draws('ppcheck_e4', format = 'matrix')
ppcheck_R1 <- mod_skewnessW10_obs$draws('ppcheck_e1', format = 'matrix')

par(mfrow = c(2, 2))
plot(density(network_metrics_obs2.1$cum_rainfall_W10), 
     main = '', xlab = 'Cum rainfall W10')
for(i in 1:100) lines(density(ppcheck_R1[i, ]), lwd = 0.1)
lines(density(network_metrics_obs2.1$cum_rainfall_W10), col = 'red')

plot(density(swarm_area), main = '', xlab = 'Swarm area')
for(i in 1:100) lines(density(ppcheck_swarmA[i, ]), lwd = 0.1)
lines(density(swarm_area), col = 'red')

plot(density(swarm_BM), main = '', xlab = 'Arthropod biomass')
for(i in 1:500) lines(density(ppcheck_swarmB[i, ]), lwd = 0.1)
lines(density(swarm_BM), col = 'red')

plot(density(network_metrics_obs2.1$skewness), 
     main = '', xlab = 'skewness')
for(i in 1:100) lines(density(ppcheck_skewness[i, ]), lwd = 0.1)
lines(density(network_metrics_obs2.1$skewness), col = 'red')
par(mfrow = c(1, 1))

post_beta_skewnessW10 <- gather(post_skewnessW10_obs[, grep('beta', colnames(post_skewnessW10_obs))])

post_beta_skewnessW10$key <- as.factor(post_beta_skewnessW10$key)


```

### Window 15 model

#### Stan code

```{r, eval=FALSE}
cat(file = 'w15_skewness.stan', 
    "
    
    functions {
    
      vector scale(vector x) {
        int N = dims(x)[1];
        real mu = mean(x);
        real sigma = sd(x);
        vector[N] scaled_v;
    
        for (i in 1:N) {
          scaled_v[i] = (x[i] - mu) / sigma;
        }
        return scaled_v;
      }  
    
      vector merge_missing(int[] miss_indxex, vector x_obs, vector x_miss) {
                int N = dims(x_obs)[1];
                int N_miss = dims(x_miss)[1];
                vector[N] merge;
                merge = x_obs;
                for (i in 1:N_miss) {
                    merge[miss_indxex[i]] = x_miss[i];
                }
            return merge;
          }
    
    
      matrix cov_GPL2(matrix x,
                      real eta,
                      real rho,
                      real delta) {
                      
                      int N = dims(x)[1];
                      matrix[N, N] K;
    
                      for (i in 1:(N-1)) {
                        K[i, i] = eta + delta;
                        for (j in (i + 1):N) {
                          K[i, j] = eta * exp(-rho * square(x[i, j]));
                          K[j, i] = K[i, j];
                        }
                      }
                      K[N, N] = eta + delta;
                      return K;
                      }
    }
    
    data {
      int N;
      int N_day;
      int N_month;
      int N_season;
      int N_site;
      int N_dim_day;
      int N_naSwarmBio;
      int N_naSwarmINI;
      int N_naSwarmFIN;
      array[N_naSwarmBio] int SwarmB_missindx;
      array[N_naSwarmINI] int SwarmINI_missindx;
      array[N_naSwarmFIN] int SwarmFIN_missindx;
      vector[N] skewness;
      array[N] int day;
      array[N] int month;
      array[N] int season;
      array[N] int site;
      vector[N] swarm_biomass;
      vector[N] swarm_area_inital;
      vector[N] swarm_area_final;
      array[N] int cum_rainfall_W20;
      array[N] int cum_rainfall_W15;
      matrix[N_dim_day, N_dim_day] dist_day;
    }
    
    parameters {
      /////////////
      ///////////// imputed variables
      vector[N_naSwarmBio] SBiomass_impute;
      real mu_sb;
      real<lower = 0> sigma_sb;
      vector[N_naSwarmINI] SwarmINI_impute;
      real mu_sbINI;
      real<lower = 0> sigma_sbINI;
      vector[N_naSwarmFIN] SwarmFIN_impute;
      real mu_sbFIN;
      real<lower = 0> sigma_sbFIN;
    
      //////////////
      ///////////// rain_i+n -> rain_i
      real a_e1;
      real beta_rainW2_e1;
      real<lower = 0> sigma_e1;
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm
      matrix[N_site, N_season] a_e2;
      matrix[N_site, N_season] beta_rainW1_e2;
      real<lower = 0> sigma_e2;
    
      vector[N_day] z_theta_e2;
      real<lower = 0> eta_theta_e2;
      real<lower = 0> rho_theta_e2;
    
      matrix[N_season, N_month] z_tau_e2;
      real mu_tau_e2;
      real<lower = 0> sigma_tau_e2;
    
      matrix[N_site, N_month] z_psi_e2;
      real mu_psi_e2;
      real<lower = 0> sigma_psi_e2;
      
      ////////////////////
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      matrix[N_site, N_season] a_e3;
      matrix[N_site, N_season] beta_rainW1_e3;
      matrix[N_site, N_season] beta_sawrA_e3;
      real<lower = 0> sigma_e3;
    
      vector[N_day] z_theta_e3;
      real<lower = 0> eta_theta_e3;
      real<lower = 0> rho_theta_e3;
    
      matrix[N_season, N_month] z_tau_e3;
      real mu_tau_e3;
      real<lower = 0> sigma_tau_e3;
    
      matrix[N_site, N_month] z_psi_e3;
      real mu_psi_e3;
      real<lower = 0> sigma_psi_e3;
      
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      matrix[N_site, N_season] a_e4;
      matrix[N_site, N_season] beta_rainW1_e4;
      matrix[N_site, N_season] beta_sawrA_e4;
      matrix[N_site, N_season] beta_swarmB_e4;
      real<lower = 0> sigma_e4;
    
      vector[N_day] z_theta_e4;
      real<lower = 0> eta_theta_e4;
      real<lower = 0> rho_theta_e4;
    
      matrix[N_season, N_month] z_tau_e4;
      real mu_tau_e4;
      real<lower = 0> sigma_tau_e4;
    
      matrix[N_site, N_month] z_psi_e4;
      real mu_psi_e4;
      real<lower = 0> sigma_psi_e4;
      
      ////////////////////
    
      
    }
    
    transformed parameters{
      
      ///////////////////////
      ///////////////////////// imputed variables
      vector[N] swarm_area;
      vector[N] SBiomass_merge;
      SBiomass_merge = merge_missing(SwarmB_missindx, 
                                     to_vector(swarm_biomass), 
                                     SBiomass_impute);
      vector[N] swarmINI_merge;
      swarmINI_merge = merge_missing(SwarmINI_missindx, 
                                     to_vector(swarm_area_inital), 
                                     SwarmINI_impute);
      vector[N] swarmFIN_merge;
      swarmFIN_merge = merge_missing(SwarmFIN_missindx, 
                                     to_vector(swarm_area_final), 
                                     SwarmFIN_impute);
      swarm_area = (swarmINI_merge + swarmFIN_merge) / 2;
      // swarm_area = scale(swarm_area);
      // SBiomass_merge = scale(SBiomass_merge);
    
      ///////////////////
      ///////////////////////// rain_i -> swarm
      
      vector[N_day] theta_e2;
      matrix[N_dim_day, N_dim_day] sigma_theta_e2;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e2;
      sigma_theta_e2 = cov_GPL2(dist_day, eta_theta_e2, rho_theta_e2, 0.01);
      L_sigma_theta_e2 = cholesky_decompose(sigma_theta_e2);
      theta_e2 = L_sigma_theta_e2 * z_theta_e2;
    
      matrix[N_season, N_month] tau_e2;
      matrix[N_site, N_month] psi_e2;
      tau_e2 = mu_tau_e2 + z_tau_e2 * sigma_tau_e2;
      psi_e2 = mu_psi_e2 + z_psi_e2 * sigma_psi_e2;
      
      ///////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      
      vector[N_day] theta_e3;
      matrix[N_dim_day, N_dim_day] sigma_theta_e3;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e3;
      sigma_theta_e3 = cov_GPL2(dist_day, eta_theta_e3, rho_theta_e3, 0.01);
      L_sigma_theta_e3 = cholesky_decompose(sigma_theta_e3);
      theta_e3 = L_sigma_theta_e3 * z_theta_e3;
    
      matrix[N_season, N_month] tau_e3;
      matrix[N_site, N_month] psi_e3;
      tau_e3 = mu_tau_e3 + z_tau_e3 * sigma_tau_e3;
      psi_e3 = mu_psi_e3 + z_psi_e3 * sigma_psi_e3;
    
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      
      vector[N_day] theta_e4;
      matrix[N_dim_day, N_dim_day] sigma_theta_e4;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e4;
      sigma_theta_e4 = cov_GPL2(dist_day, eta_theta_e4, rho_theta_e4, 0.01);
      L_sigma_theta_e4 = cholesky_decompose(sigma_theta_e4);
      theta_e4 = L_sigma_theta_e4 * z_theta_e4;
    
      matrix[N_season, N_month] tau_e4;
      matrix[N_site, N_month] psi_e4;
      tau_e4 = mu_tau_e4 + z_tau_e4 * sigma_tau_e4;
      psi_e4 = mu_psi_e4 + z_psi_e4 * sigma_psi_e4;
    
      ///////////////////
    }
    
    model {
      
      ///////////////////////
      /////////////////////// imputed variables
      mu_sb ~ normal(3.5, 1);
      sigma_sb ~ exponential(1);
      SBiomass_merge ~ normal(mu_sb, sigma_sb);
      mu_sbINI ~ normal(3.5, 1);
      sigma_sbINI ~ exponential(1);
      swarmINI_merge ~ normal(mu_sbINI, sigma_sbINI);
      mu_sbFIN ~ normal(3.5, 1);
      sigma_sbFIN ~ exponential(1);
      swarmFIN_merge ~ normal(mu_sbFIN, sigma_sbFIN);
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      vector[N] mu_e1;
      a_e1 ~ normal(0, 1);
      beta_rainW2_e1 ~ normal(0, 0.5);
      sigma_e1 ~ exponential(1);
      
      ///////////////////
      /////////////////// rain_i -> swarm
      to_vector(a_e2) ~ normal(3, 1);
      sigma_e2 ~ exponential(1);
      to_vector(beta_rainW1_e2) ~ normal(0, 0.25);
    
      z_theta_e2 ~ normal(0, 0.5);     
      eta_theta_e2 ~ exponential(3);   
      rho_theta_e2 ~ exponential(0.5); 
      
      to_vector(z_tau_e2) ~ normal(0, 0.5);
      mu_tau_e2 ~ normal(0, 0.5);
      sigma_tau_e2 ~ exponential(1);
    
      to_vector(z_psi_e2) ~ normal(0, 0.5);
      mu_psi_e2 ~ normal(0, 0.5);
      sigma_psi_e2 ~ exponential(1);
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      to_vector(a_e3) ~ normal(2.5, 1);
      sigma_e3 ~ exponential(1);
      to_vector(beta_rainW1_e3) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e3) ~ normal(0, 3);
    
      z_theta_e3 ~ normal(0, 1);
      eta_theta_e3 ~ exponential(3);
      rho_theta_e3 ~ exponential(0.5);
      
      to_vector(z_tau_e3) ~ normal(0, 0.5);
      mu_tau_e3 ~ normal(0, 0.5);
      sigma_tau_e3 ~ exponential(1);
    
      to_vector(z_psi_e3) ~ normal(0, 0.5);
      mu_psi_e3 ~ normal(0, 0.5);
      sigma_psi_e3 ~ exponential(1);
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      to_vector(a_e4) ~ normal(0.25, 0.5);
      sigma_e4 ~ exponential(1);
      to_vector(beta_rainW1_e4) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e4) ~ normal(0, 0.5);
      to_vector(beta_swarmB_e4) ~ normal(0, 0.5);
    
      z_theta_e4 ~ normal(0, 0.5);
      eta_theta_e4 ~ exponential(3);
      rho_theta_e4 ~ exponential(0.5);
      
      to_vector(z_tau_e4) ~ normal(0, 0.5);
      mu_tau_e4 ~ normal(0, 0.5);
      sigma_tau_e4 ~ exponential(1);
    
      to_vector(z_psi_e4) ~ normal(0, 0.5);
      mu_psi_e4 ~ normal(0, 0.5);
      sigma_psi_e4 ~ exponential(1);
      
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      for (i in 1:N) {
        cum_rainfall_W15[i] ~ normal(a_e1 + beta_rainW2_e1 * cum_rainfall_W20[i], 
                                    sigma_e1);
      }
    
      ///////////////////
      /////////////////// rain_i -> swarm
      for (i in 1:N) {
        swarm_area[i] ~ student_t(2,
                                  a_e2[site[i], season[i]] + 
                                  beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W15[i] +
                                  theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                                  psi_e2[site[i], month[i]], 
                                  sigma_e2);
      }
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      for (i in 1:N) {
        SBiomass_merge[i] ~ student_t(2,
                                     a_e3[site[i], season[i]] + 
                                     beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W15[i] +
                                     beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                                     theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                                     psi_e3[site[i], month[i]], 
                                     sigma_e3);
      }
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      for (i in 1:N) {
         skewness[i] ~ normal(a_e4[site[i], season[i]] + 
                              beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W15[i] +
                              beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                              beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                              theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                              psi_e4[site[i], month[i]], sigma_e4);
      }
    
    }
    
    generated quantities {
      vector[N] mu_e1;
      vector[N] mu_e2;
      vector[N] mu_e3;
      vector[N] mu_e4;
      array[N] real ppcheck_e1;
      array[N] real ppcheck_e2;
      array[N] real ppcheck_e3;
      array[N] real ppcheck_e4;
      
      for (i in 1:N) {
        mu_e1[i] = a_e1 + beta_rainW2_e1 * cum_rainfall_W20[i]; 
      }
    
      ppcheck_e1 = normal_rng(mu_e1, sigma_e1);
    
      for (i in 1:N) {
        mu_e2[i] = a_e2[site[i], season[i]] + 
                  beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W15[i] +
                  theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                  psi_e2[site[i], month[i]];
      }
      
      ppcheck_e2 = student_t_rng(2, mu_e2, sigma_e2);
    
    
      for (i in 1:N) {
        mu_e3[i] = a_e3[site[i], season[i]] + 
                   beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W15[i] +
                   beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                   theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                   psi_e3[site[i], month[i]];
      }
      
      ppcheck_e3 = student_t_rng(2, mu_e3, sigma_e3);
    
      for (i in 1:N) {
         mu_e4[i] = a_e4[site[i], season[i]] + 
                    beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W15[i] +
                    beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                    beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                    theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                    psi_e4[site[i], month[i]];
      }
    
      ppcheck_e4 = normal_rng(mu_e4, sigma_e4);
    
    }
    
    ")

```

#### Running MCMC algorithm


```{r, eval=FALSE}
file <- paste(getwd(), '/w15_skewness.stan', sep ='')

fit_skewnessW15 <- cmdstan_model(file, compile = T)

mod_skewnessW15_obs <- 
  fit_skewnessW15$sample(
    data = network_metrics_obs2.1, 
    chains = 3, 
    parallel_chains = 3, 
    iter_sampling = 8e3, 
    iter_warmup = 500, 
    thin = 10, 
    seed = 123
  )

```

```{r, echo=FALSE, eval=TRUE}
mod_skewnessW15_obs <- readRDS('causal_mod_skewnessW15.rds')
```

#### Model diagnostics

```{r, fig.height=15, fig.cap="Rhat values and ess of group-level parameters from the generative model explaining the effect of cumulative rainfall during W15, on skewness of ant followers interaction network."}

par(mfrow = c(5, 2), mar = c(4, 4, 1.5, 1))
mod_diagnostics(mod_skewnessW15_obs, 
                mod_skewnessW15_obs$summary(
                  unique(paste('psi_e2[', 
                               network_metrics_obs2.1$site,
                               ',',
                               network_metrics_obs2.1$month, ']', 
                               sep = '')))) 

mod_diagnostics(mod_skewnessW15_obs, 
                mod_skewnessW15_obs$summary(
                  unique(paste('psi_e3[', 
                               network_metrics_obs2.1$site,
                               ',',
                               network_metrics_obs2.1$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_skewnessW15_obs, 
                mod_skewnessW15_obs$summary(
                  unique(paste('psi_e4[', 
                               network_metrics_obs2.1$site,
                               ',',
                               network_metrics_obs2.1$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_skewnessW15_obs, 
                mod_skewnessW15_obs$summary(
                  unique(paste('tau_e4[', 
                               network_metrics_obs2.1$year,
                               ',',
                               network_metrics_obs2.1$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_skewnessW15_obs, 
                mod_skewnessW15_obs$summary(
                  unique(paste('tau_e2[', 
                               network_metrics_obs2.1$year,
                               ',',
                               network_metrics_obs2.1$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_skewnessW15_obs, 
                mod_skewnessW15_obs$summary(
                  unique(paste('tau_e3[', 
                               network_metrics_obs2.1$year,
                               ',',
                               network_metrics_obs2.1$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_skewnessW15_obs, 
                mod_skewnessW15_obs$summary(paste('theta_e4[', 
                                                  1:network_metrics_obs2.1$N_day, ']', 
                                                  sep = '')))
mod_diagnostics(mod_skewnessW15_obs, 
                mod_skewnessW15_obs$summary(paste('theta_e3[', 
                                                  1:network_metrics_obs2.1$N_day, ']', 
                                                  sep = '')))

mod_diagnostics(mod_skewnessW15_obs, 
                mod_skewnessW15_obs$summary(paste('theta_e2[', 
                                                  1:network_metrics_obs2.1$N_day, ']', 
                                                  sep = '')))
par(mfrow = c(1, 1))
```

```{r, fig.cap="Rhat values and ess of slope, intercept, and dispersion parameters  from the generative model explaining the effect of cumulative rainfall during W15, on skewness of ant followers interaction networks."}
summary_skewnessW15 <- mod_skewnessW15_obs$summary(c('beta_rainW2_e1', 
                                                     'beta_rainW1_e2',
                                                     'beta_rainW1_e3',
                                                     'beta_rainW1_e4',
                                                     'beta_sawrA_e3',
                                                     'beta_sawrA_e4',
                                                     'beta_swarmB_e4', 
                                                     'a_e1', 'a_e2', 
                                                     'a_e3', 'a_e4',
                                                     'sigma_e1', 'sigma_e2', 
                                                     'sigma_e3', 'sigma_e4', 
                                                     'swarm_area',
                                                     'SBiomass_merge',
                                                     'lp__'))


mod_diagnostics(mod_skewnessW15_obs, summary_skewnessW15)

```


```{r, fig.cap= "Posterior predictive checks"}
post_skewnessW15_obs <- mod_skewnessW15_obs$draws(c('beta_rainW2_e1', 
                                                    'beta_rainW1_e2',
                                                    'beta_rainW1_e3',
                                                    'beta_rainW1_e4',
                                                    'beta_sawrA_e3',
                                                    'beta_sawrA_e4',
                                                    'beta_swarmB_e4', 
                                                    'a_e1', 'a_e2', 'a_e3', 'a_e4',
                                                    'sigma_e1', 'sigma_e2', 
                                                    'sigma_e3', 'sigma_e4',
                                                    'swarm_area',
                                                    'SBiomass_merge'
), 
format = 'df')

swarm_area <- apply(post_skewnessW15_obs[, grep('swarm_area', colnames(post_skewnessW15_obs))], 
                    2, mean)

swarm_BM <- 
  apply(post_skewnessW15_obs[, grep('SBiomass_merge', colnames(post_skewnessW15_obs))], 
        2, mean)

ppcheck_swarmA <- mod_skewnessW15_obs$draws('ppcheck_e2', format = 'matrix')
ppcheck_swarmB <- mod_skewnessW15_obs$draws('ppcheck_e3', format = 'matrix')
ppcheck_skewness <- mod_skewnessW15_obs$draws('ppcheck_e4', format = 'matrix')
ppcheck_R1 <- mod_skewnessW15_obs$draws('ppcheck_e1', format = 'matrix')


par(mfrow = c(2, 2), mar = c(4, 4, 1, 1))
plot(density(network_metrics_obs2.1$cum_rainfall_W15), 
     main = '', xlab = 'Cum rainfall W15')
for(i in 1:100) lines(density(ppcheck_R1[i, ]), lwd = 0.1)
lines(density(network_metrics_obs2.1$cum_rainfall_W15), col = 'red')

plot(density(swarm_area), main = '', xlab = 'Swarm area')
for(i in 1:100) lines(density(ppcheck_swarmA[i, ]), lwd = 0.1)
lines(density(swarm_area), main = '', xlab = 'Swarm area', col = 'red')

plot(density(swarm_BM), main = '', xlab = 'Arthropod biomass')
for(i in 1:500) lines(density(ppcheck_swarmB[i, ]), lwd = 0.1)
lines(density(swarm_BM), col = 'red')

plot(density(network_metrics_obs2.1$skewness), 
     main = '', xlab = 'skewness')
for(i in 1:100) lines(density(ppcheck_skewness[i, ]), lwd = 0.1)
lines(density(network_metrics_obs2.1$skewness), col = 'red')

post_beta_skewnessW15 <- gather(post_skewnessW15_obs[, grep('beta', colnames(post_skewnessW15_obs))])

post_beta_skewnessW15$key <- as.factor(post_beta_skewnessW15$key)


```

### Window 20 model

#### Stan code

```{r, eval=FALSE}
cat(file = 'w20_skewness.stan', 
    "
    
    functions {
    
      vector scale(vector x) {
        int N = dims(x)[1];
        real mu = mean(x);
        real sigma = sd(x);
        vector[N] scaled_v;
    
        for (i in 1:N) {
          scaled_v[i] = (x[i] - mu) / sigma;
        }
        return scaled_v;
      }  
    
      vector merge_missing(int[] miss_indxex, vector x_obs, vector x_miss) {
                int N = dims(x_obs)[1];
                int N_miss = dims(x_miss)[1];
                vector[N] merge;
                merge = x_obs;
                for (i in 1:N_miss) {
                    merge[miss_indxex[i]] = x_miss[i];
                }
            return merge;
          }
    
    
      matrix cov_GPL2(matrix x,
                      real eta,
                      real rho,
                      real delta) {
                      
                      int N = dims(x)[1];
                      matrix[N, N] K;
    
                      for (i in 1:(N-1)) {
                        K[i, i] = eta + delta;
                        for (j in (i + 1):N) {
                          K[i, j] = eta * exp(-rho * square(x[i, j]));
                          K[j, i] = K[i, j];
                        }
                      }
                      K[N, N] = eta + delta;
                      return K;
                      }
    }
    
    data {
      int N;
      int N_day;
      int N_month;
      int N_season;
      int N_site;
      int N_dim_day;
      int N_naSwarmBio;
      int N_naSwarmINI;
      int N_naSwarmFIN;
      array[N_naSwarmBio] int SwarmB_missindx;
      array[N_naSwarmINI] int SwarmINI_missindx;
      array[N_naSwarmFIN] int SwarmFIN_missindx;
      vector[N] skewness;
      array[N] int day;
      array[N] int month;
      array[N] int season;
      array[N] int site;
      vector[N] swarm_biomass;
      vector[N] swarm_area_inital;
      vector[N] swarm_area_final;
      array[N] int cum_rainfall_W20;
      array[N] int cum_rainfall_W25;
      matrix[N_dim_day, N_dim_day] dist_day;
    }
    
    parameters {
      /////////////
      ///////////// imputed variables
      vector[N_naSwarmBio] SBiomass_impute;
      real mu_sb;
      real<lower = 0> sigma_sb;
      vector[N_naSwarmINI] SwarmINI_impute;
      real mu_sbINI;
      real<lower = 0> sigma_sbINI;
      vector[N_naSwarmFIN] SwarmFIN_impute;
      real mu_sbFIN;
      real<lower = 0> sigma_sbFIN;
    
      //////////////
      ///////////// rain_i+n -> rain_i
      real a_e1;
      real beta_rainW2_e1;
      real<lower = 0> sigma_e1;
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm
      matrix[N_site, N_season] a_e2;
      matrix[N_site, N_season] beta_rainW1_e2;
      real<lower = 0> sigma_e2;
    
      vector[N_day] z_theta_e2;
      real<lower = 0> eta_theta_e2;
      real<lower = 0> rho_theta_e2;
    
      matrix[N_season, N_month] z_tau_e2;
      real mu_tau_e2;
      real<lower = 0> sigma_tau_e2;
    
      matrix[N_site, N_month] z_psi_e2;
      real mu_psi_e2;
      real<lower = 0> sigma_psi_e2;
      
      ////////////////////
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      matrix[N_site, N_season] a_e3;
      matrix[N_site, N_season] beta_rainW1_e3;
      matrix[N_site, N_season] beta_sawrA_e3;
      real<lower = 0> sigma_e3;
    
      vector[N_day] z_theta_e3;
      real<lower = 0> eta_theta_e3;
      real<lower = 0> rho_theta_e3;
    
      matrix[N_season, N_month] z_tau_e3;
      real mu_tau_e3;
      real<lower = 0> sigma_tau_e3;
    
      matrix[N_site, N_month] z_psi_e3;
      real mu_psi_e3;
      real<lower = 0> sigma_psi_e3;
      
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      matrix[N_site, N_season] a_e4;
      matrix[N_site, N_season] beta_rainW1_e4;
      matrix[N_site, N_season] beta_sawrA_e4;
      matrix[N_site, N_season] beta_swarmB_e4;
      real<lower = 0> sigma_e4;
    
      vector[N_day] z_theta_e4;
      real<lower = 0> eta_theta_e4;
      real<lower = 0> rho_theta_e4;
    
      matrix[N_season, N_month] z_tau_e4;
      real mu_tau_e4;
      real<lower = 0> sigma_tau_e4;
    
      matrix[N_site, N_month] z_psi_e4;
      real mu_psi_e4;
      real<lower = 0> sigma_psi_e4;
      
      ////////////////////
    
      
    }
    
    transformed parameters{
      
      ///////////////////////
      ///////////////////////// imputed variables
      vector[N] swarm_area;
      vector[N] SBiomass_merge;
      SBiomass_merge = merge_missing(SwarmB_missindx, 
                                     to_vector(swarm_biomass), 
                                     SBiomass_impute);
      vector[N] swarmINI_merge;
      swarmINI_merge = merge_missing(SwarmINI_missindx, 
                                     to_vector(swarm_area_inital), 
                                     SwarmINI_impute);
      vector[N] swarmFIN_merge;
      swarmFIN_merge = merge_missing(SwarmFIN_missindx, 
                                     to_vector(swarm_area_final), 
                                     SwarmFIN_impute);
      swarm_area = (swarmINI_merge + swarmFIN_merge) / 2;
      // swarm_area = scale(swarm_area);
      // SBiomass_merge = scale(SBiomass_merge);
    
      ///////////////////
      ///////////////////////// rain_i -> swarm
      
      vector[N_day] theta_e2;
      matrix[N_dim_day, N_dim_day] sigma_theta_e2;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e2;
      sigma_theta_e2 = cov_GPL2(dist_day, eta_theta_e2, rho_theta_e2, 0.01);
      L_sigma_theta_e2 = cholesky_decompose(sigma_theta_e2);
      theta_e2 = L_sigma_theta_e2 * z_theta_e2;
    
      matrix[N_season, N_month] tau_e2;
      matrix[N_site, N_month] psi_e2;
      tau_e2 = mu_tau_e2 + z_tau_e2 * sigma_tau_e2;
      psi_e2 = mu_psi_e2 + z_psi_e2 * sigma_psi_e2;
      
      ///////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      
      vector[N_day] theta_e3;
      matrix[N_dim_day, N_dim_day] sigma_theta_e3;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e3;
      sigma_theta_e3 = cov_GPL2(dist_day, eta_theta_e3, rho_theta_e3, 0.01);
      L_sigma_theta_e3 = cholesky_decompose(sigma_theta_e3);
      theta_e3 = L_sigma_theta_e3 * z_theta_e3;
    
      matrix[N_season, N_month] tau_e3;
      matrix[N_site, N_month] psi_e3;
      tau_e3 = mu_tau_e3 + z_tau_e3 * sigma_tau_e3;
      psi_e3 = mu_psi_e3 + z_psi_e3 * sigma_psi_e3;
    
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      
      vector[N_day] theta_e4;
      matrix[N_dim_day, N_dim_day] sigma_theta_e4;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e4;
      sigma_theta_e4 = cov_GPL2(dist_day, eta_theta_e4, rho_theta_e4, 0.01);
      L_sigma_theta_e4 = cholesky_decompose(sigma_theta_e4);
      theta_e4 = L_sigma_theta_e4 * z_theta_e4;
    
      matrix[N_season, N_month] tau_e4;
      matrix[N_site, N_month] psi_e4;
      tau_e4 = mu_tau_e4 + z_tau_e4 * sigma_tau_e4;
      psi_e4 = mu_psi_e4 + z_psi_e4 * sigma_psi_e4;
    
      ///////////////////
    }
    
    model {
      
      ///////////////////////
      /////////////////////// imputed variables
      mu_sb ~ normal(3.5, 1);
      sigma_sb ~ exponential(1);
      SBiomass_merge ~ normal(mu_sb, sigma_sb);
      mu_sbINI ~ normal(3.5, 1);
      sigma_sbINI ~ exponential(1);
      swarmINI_merge ~ normal(mu_sbINI, sigma_sbINI);
      mu_sbFIN ~ normal(3.5, 1);
      sigma_sbFIN ~ exponential(1);
      swarmFIN_merge ~ normal(mu_sbFIN, sigma_sbFIN);
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      vector[N] mu_e1;
      a_e1 ~ normal(0, 1);
      beta_rainW2_e1 ~ normal(0, 0.5);
      sigma_e1 ~ exponential(1);
      
      ///////////////////
      /////////////////// rain_i -> swarm
      to_vector(a_e2) ~ normal(3, 1);
      sigma_e2 ~ exponential(1);
      to_vector(beta_rainW1_e2) ~ normal(0, 0.25);
    
      z_theta_e2 ~ normal(0, 0.5);     
      eta_theta_e2 ~ exponential(3);   
      rho_theta_e2 ~ exponential(0.5); 
      
      to_vector(z_tau_e2) ~ normal(0, 0.5);
      mu_tau_e2 ~ normal(0, 0.5);
      sigma_tau_e2 ~ exponential(1);
    
      to_vector(z_psi_e2) ~ normal(0, 0.5);
      mu_psi_e2 ~ normal(0, 0.5);
      sigma_psi_e2 ~ exponential(1);
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      to_vector(a_e3) ~ normal(2.5, 1);
      sigma_e3 ~ exponential(1);
      to_vector(beta_rainW1_e3) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e3) ~ normal(0, 3);
    
      z_theta_e3 ~ normal(0, 1);
      eta_theta_e3 ~ exponential(3);
      rho_theta_e3 ~ exponential(0.5);
      
      to_vector(z_tau_e3) ~ normal(0, 0.5);
      mu_tau_e3 ~ normal(0, 0.5);
      sigma_tau_e3 ~ exponential(1);
    
      to_vector(z_psi_e3) ~ normal(0, 0.5);
      mu_psi_e3 ~ normal(0, 0.5);
      sigma_psi_e3 ~ exponential(1);
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      to_vector(a_e4) ~ normal(0.25, 0.5);
      sigma_e4 ~ exponential(1);
      to_vector(beta_rainW1_e4) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e4) ~ normal(0, 0.5);
      to_vector(beta_swarmB_e4) ~ normal(0, 0.5);
    
      z_theta_e4 ~ normal(0, 0.5);
      eta_theta_e4 ~ exponential(3);
      rho_theta_e4 ~ exponential(0.5);
      
      to_vector(z_tau_e4) ~ normal(0, 0.5);
      mu_tau_e4 ~ normal(0, 0.5);
      sigma_tau_e4 ~ exponential(1);
    
      to_vector(z_psi_e4) ~ normal(0, 0.5);
      mu_psi_e4 ~ normal(0, 0.5);
      sigma_psi_e4 ~ exponential(1);
      
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      for (i in 1:N) {
        cum_rainfall_W20[i] ~ normal(a_e1 + beta_rainW2_e1 * cum_rainfall_W25[i], 
                                    sigma_e1);
      }
    
      ///////////////////
      /////////////////// rain_i -> swarm
      for (i in 1:N) {
        swarm_area[i] ~ student_t(2,
                                  a_e2[site[i], season[i]] + 
                                  beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W20[i] +
                                  theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                                  psi_e2[site[i], month[i]], 
                                  sigma_e2);
      }
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      for (i in 1:N) {
        SBiomass_merge[i] ~ student_t(2,
                                     a_e3[site[i], season[i]] + 
                                     beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W20[i] +
                                     beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                                     theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                                     psi_e3[site[i], month[i]], 
                                     sigma_e3);
      }
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      for (i in 1:N) {
         skewness[i] ~ normal(a_e4[site[i], season[i]] + 
                              beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W20[i] +
                              beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                              beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                              theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                              psi_e4[site[i], month[i]], sigma_e4);
      }
    
    }
    
    generated quantities {
      vector[N] mu_e1;
      vector[N] mu_e2;
      vector[N] mu_e3;
      vector[N] mu_e4;
      array[N] real ppcheck_e1;
      array[N] real ppcheck_e2;
      array[N] real ppcheck_e3;
      array[N] real ppcheck_e4;
      
      for (i in 1:N) {
        mu_e1[i] = a_e1 + beta_rainW2_e1 * cum_rainfall_W25[i]; 
      }
    
      ppcheck_e1 = normal_rng(mu_e1, sigma_e1);
    
      for (i in 1:N) {
        mu_e2[i] = a_e2[site[i], season[i]] + 
                  beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W20[i] +
                  theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                  psi_e2[site[i], month[i]];
      }
      
      ppcheck_e2 = student_t_rng(2, mu_e2, sigma_e2);
    
    
      for (i in 1:N) {
        mu_e3[i] = a_e3[site[i], season[i]] + 
                   beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W20[i] +
                   beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                   theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                   psi_e3[site[i], month[i]];
      }
      
      ppcheck_e3 = student_t_rng(2, mu_e3, sigma_e3);
    
      for (i in 1:N) {
         mu_e4[i] = a_e4[site[i], season[i]] + 
                    beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W20[i] +
                    beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                    beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                    theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                    psi_e4[site[i], month[i]];
      }
    
      ppcheck_e4 = normal_rng(mu_e4, sigma_e4);
    
    }
    
    ")

```

#### Running MCMC algorithm


```{r, eval=FALSE}
file <- paste(getwd(), '/w20_skewness.stan', sep ='')

fit_skewnessW20 <- cmdstan_model(file, compile = T)

mod_skewnessW20_obs <- 
  fit_skewnessW20$sample(
    data = network_metrics_obs2.1, 
    chains = 3, 
    parallel_chains = 3, 
    iter_sampling = 8e3, 
    iter_warmup = 500, 
    thin = 10, 
    seed = 123
  )

```

```{r, echo=FALSE, eval=TRUE}
mod_skewnessW20_obs <- readRDS('causal_mod_skewnessW20.rds')
```

#### Model diagnostics

```{r, fig.height=15, fig.cap="Rhat values and ess of group-level parameters from the generative model explaining the effect of cumulative rainfall during W20, on skewness of normalized degree of ant followers interaction networks."}

par(mfrow = c(5, 2), mar = c(4, 4, 1.5, 1))
mod_diagnostics(mod_skewnessW20_obs, 
                mod_skewnessW20_obs$summary(
                  unique(paste('psi_e2[', 
                               network_metrics_obs2.1$site,
                               ',',
                               network_metrics_obs2.1$month, ']', 
                               sep = '')))) 

mod_diagnostics(mod_skewnessW20_obs, 
                mod_skewnessW20_obs$summary(
                  unique(paste('psi_e3[', 
                               network_metrics_obs2.1$site,
                               ',',
                               network_metrics_obs2.1$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_skewnessW20_obs, 
                mod_skewnessW20_obs$summary(
                  unique(paste('psi_e4[', 
                               network_metrics_obs2.1$site,
                               ',',
                               network_metrics_obs2.1$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_skewnessW20_obs, 
                mod_skewnessW20_obs$summary(
                  unique(paste('tau_e4[', 
                               network_metrics_obs2.1$year,
                               ',',
                               network_metrics_obs2.1$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_skewnessW20_obs, 
                mod_skewnessW20_obs$summary(
                  unique(paste('tau_e2[', 
                               network_metrics_obs2.1$year,
                               ',',
                               network_metrics_obs2.1$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_skewnessW20_obs, 
                mod_skewnessW20_obs$summary(
                  unique(paste('tau_e3[', 
                               network_metrics_obs2.1$year,
                               ',',
                               network_metrics_obs2.1$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_skewnessW20_obs, 
                mod_skewnessW20_obs$summary(paste('theta_e4[', 
                                                  1:network_metrics_obs2.1$N_day, ']', 
                                                  sep = '')))
mod_diagnostics(mod_skewnessW20_obs, 
                mod_skewnessW20_obs$summary(paste('theta_e3[', 
                                                  1:network_metrics_obs2.1$N_day, ']', 
                                                  sep = '')))

mod_diagnostics(mod_skewnessW20_obs, 
                mod_skewnessW20_obs$summary(paste('theta_e2[', 
                                                  1:network_metrics_obs2.1$N_day, ']', 
                                                  sep = '')))
par(mfrow = c(1, 1))
```

```{r, fig.cap="Rhat values and ess of slope, intercept, and dispersion parameters  from the generative model explaining the effect of cumulative rainfall during W20, on skewness of normalized degree of ant followers interaction networks."}
summary_skewnessW20 <- mod_skewnessW20_obs$summary(c('beta_rainW2_e1', 
                                                     'beta_rainW1_e2',
                                                     'beta_rainW1_e3',
                                                     'beta_rainW1_e4',
                                                     'beta_sawrA_e3',
                                                     'beta_sawrA_e4',
                                                     'beta_swarmB_e4', 
                                                     'a_e1', 'a_e2', 
                                                     'a_e3', 'a_e4',
                                                     'sigma_e1', 'sigma_e2', 
                                                     'sigma_e3', 'sigma_e4', 
                                                     'swarm_area',
                                                     'SBiomass_merge',
                                                     'lp__'))


mod_diagnostics(mod_skewnessW20_obs, summary_skewnessW20)

```


```{r, fig.cap= "Posterior predictive checks"}
post_skewnessW20_obs <- mod_skewnessW20_obs$draws(c('beta_rainW2_e1', 
                                                    'beta_rainW1_e2',
                                                    'beta_rainW1_e3',
                                                    'beta_rainW1_e4',
                                                    'beta_sawrA_e3',
                                                    'beta_sawrA_e4',
                                                    'beta_swarmB_e4', 
                                                    'a_e1', 'a_e2', 'a_e3', 'a_e4',
                                                    'sigma_e1', 'sigma_e2', 
                                                    'sigma_e3', 'sigma_e4',
                                                    'swarm_area',
                                                    'SBiomass_merge'
), 
format = 'df')

swarm_area <- apply(post_skewnessW20_obs[, grep('swarm_area', colnames(post_skewnessW20_obs))], 
                    2, mean)

swarm_BM <- 
  apply(post_skewnessW20_obs[, grep('SBiomass_merge', colnames(post_skewnessW20_obs))], 
        2, mean)

ppcheck_swarmA <- mod_skewnessW20_obs$draws('ppcheck_e2', format = 'matrix')
ppcheck_swarmB <- mod_skewnessW20_obs$draws('ppcheck_e3', format = 'matrix')
ppcheck_skewness <- mod_skewnessW20_obs$draws('ppcheck_e4', format = 'matrix')
ppcheck_R1 <- mod_skewnessW20_obs$draws('ppcheck_e1', format = 'matrix')

par(mfrow = c(2, 2), mar = c(4, 4, 1, 1))
plot(density(network_metrics_obs2.1$cum_rainfall_W20), 
     main = '', xlab = 'Cum rainfall W20')
for(i in 1:100) lines(density(ppcheck_R1[i, ]), lwd = 0.1)
lines(density(network_metrics_obs2.1$cum_rainfall_W20), col = 'red')

plot(density(swarm_area), main = '', xlab = 'Swarm area')
for(i in 1:100) lines(density(ppcheck_swarmA[i, ]), lwd = 0.1)
lines(density(swarm_area), col = 'red')

plot(density(swarm_BM), main = '', xlab = 'Arthropod biomass')
for(i in 1:500) lines(density(ppcheck_swarmB[i, ]), lwd = 0.1)
lines(density(swarm_BM), col = 'red')

plot(density(network_metrics_obs2.1$skewness), 
     main = '', xlab = 'skewness')
for(i in 1:100) lines(density(ppcheck_skewness[i, ]), lwd = 0.1)
lines(density(network_metrics_obs2.1$skewness), col = 'red')

post_beta_skewnessW20 <- gather(post_skewnessW20_obs[, grep('beta', colnames(post_skewnessW20_obs))])

post_beta_skewnessW20$key <- as.factor(post_beta_skewnessW20$key)

```

### Window 25 model

#### Stan code

```{r, eval=FALSE}
cat(file = 'w25_skewness.stan', 
    "
    
    functions {
    
      vector scale(vector x) {
        int N = dims(x)[1];
        real mu = mean(x);
        real sigma = sd(x);
        vector[N] scaled_v;
    
        for (i in 1:N) {
          scaled_v[i] = (x[i] - mu) / sigma;
        }
        return scaled_v;
      }  
    
      vector merge_missing(int[] miss_indxex, vector x_obs, vector x_miss) {
                int N = dims(x_obs)[1];
                int N_miss = dims(x_miss)[1];
                vector[N] merge;
                merge = x_obs;
                for (i in 1:N_miss) {
                    merge[miss_indxex[i]] = x_miss[i];
                }
            return merge;
          }
    
    
      matrix cov_GPL2(matrix x,
                      real eta,
                      real rho,
                      real delta) {
                      
                      int N = dims(x)[1];
                      matrix[N, N] K;
    
                      for (i in 1:(N-1)) {
                        K[i, i] = eta + delta;
                        for (j in (i + 1):N) {
                          K[i, j] = eta * exp(-rho * square(x[i, j]));
                          K[j, i] = K[i, j];
                        }
                      }
                      K[N, N] = eta + delta;
                      return K;
                      }
    }
    
    data {
      int N;
      int N_day;
      int N_month;
      int N_season;
      int N_site;
      int N_dim_day;
      int N_naSwarmBio;
      int N_naSwarmINI;
      int N_naSwarmFIN;
      array[N_naSwarmBio] int SwarmB_missindx;
      array[N_naSwarmINI] int SwarmINI_missindx;
      array[N_naSwarmFIN] int SwarmFIN_missindx;
      vector[N] skewness;
      array[N] int day;
      array[N] int month;
      array[N] int season;
      array[N] int site;
      vector[N] swarm_biomass;
      vector[N] swarm_area_inital;
      vector[N] swarm_area_final;
      array[N] int cum_rainfall_W30;
      array[N] int cum_rainfall_W25;
      matrix[N_dim_day, N_dim_day] dist_day;
    }
    
    parameters {
      /////////////
      ///////////// imputed variables
      vector[N_naSwarmBio] SBiomass_impute;
      real mu_sb;
      real<lower = 0> sigma_sb;
      vector[N_naSwarmINI] SwarmINI_impute;
      real mu_sbINI;
      real<lower = 0> sigma_sbINI;
      vector[N_naSwarmFIN] SwarmFIN_impute;
      real mu_sbFIN;
      real<lower = 0> sigma_sbFIN;
    
      //////////////
      ///////////// rain_i+n -> rain_i
      real a_e1;
      real beta_rainW2_e1;
      real<lower = 0> sigma_e1;
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm
      matrix[N_site, N_season] a_e2;
      matrix[N_site, N_season] beta_rainW1_e2;
      real<lower = 0> sigma_e2;
    
      vector[N_day] z_theta_e2;
      real<lower = 0> eta_theta_e2;
      real<lower = 0> rho_theta_e2;
    
      matrix[N_season, N_month] z_tau_e2;
      real mu_tau_e2;
      real<lower = 0> sigma_tau_e2;
    
      matrix[N_site, N_month] z_psi_e2;
      real mu_psi_e2;
      real<lower = 0> sigma_psi_e2;
      
      ////////////////////
    
      /////////////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      matrix[N_site, N_season] a_e3;
      matrix[N_site, N_season] beta_rainW1_e3;
      matrix[N_site, N_season] beta_sawrA_e3;
      real<lower = 0> sigma_e3;
    
      vector[N_day] z_theta_e3;
      real<lower = 0> eta_theta_e3;
      real<lower = 0> rho_theta_e3;
    
      matrix[N_season, N_month] z_tau_e3;
      real mu_tau_e3;
      real<lower = 0> sigma_tau_e3;
    
      matrix[N_site, N_month] z_psi_e3;
      real mu_psi_e3;
      real<lower = 0> sigma_psi_e3;
      
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      matrix[N_site, N_season] a_e4;
      matrix[N_site, N_season] beta_rainW1_e4;
      matrix[N_site, N_season] beta_sawrA_e4;
      matrix[N_site, N_season] beta_swarmB_e4;
      real<lower = 0> sigma_e4;
    
      vector[N_day] z_theta_e4;
      real<lower = 0> eta_theta_e4;
      real<lower = 0> rho_theta_e4;
    
      matrix[N_season, N_month] z_tau_e4;
      real mu_tau_e4;
      real<lower = 0> sigma_tau_e4;
    
      matrix[N_site, N_month] z_psi_e4;
      real mu_psi_e4;
      real<lower = 0> sigma_psi_e4;
      
      ////////////////////
    
      
    }
    
    transformed parameters{
      
      ///////////////////////
      ///////////////////////// imputed variables
      vector[N] swarm_area;
      vector[N] SBiomass_merge;
      SBiomass_merge = merge_missing(SwarmB_missindx, 
                                     to_vector(swarm_biomass), 
                                     SBiomass_impute);
      vector[N] swarmINI_merge;
      swarmINI_merge = merge_missing(SwarmINI_missindx, 
                                     to_vector(swarm_area_inital), 
                                     SwarmINI_impute);
      vector[N] swarmFIN_merge;
      swarmFIN_merge = merge_missing(SwarmFIN_missindx, 
                                     to_vector(swarm_area_final), 
                                     SwarmFIN_impute);
      swarm_area = (swarmINI_merge + swarmFIN_merge) / 2;
      // swarm_area = scale(swarm_area);
      // SBiomass_merge = scale(SBiomass_merge);
    
      ///////////////////
      ///////////////////////// rain_i -> swarm
      
      vector[N_day] theta_e2;
      matrix[N_dim_day, N_dim_day] sigma_theta_e2;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e2;
      sigma_theta_e2 = cov_GPL2(dist_day, eta_theta_e2, rho_theta_e2, 0.01);
      L_sigma_theta_e2 = cholesky_decompose(sigma_theta_e2);
      theta_e2 = L_sigma_theta_e2 * z_theta_e2;
    
      matrix[N_season, N_month] tau_e2;
      matrix[N_site, N_month] psi_e2;
      tau_e2 = mu_tau_e2 + z_tau_e2 * sigma_tau_e2;
      psi_e2 = mu_psi_e2 + z_psi_e2 * sigma_psi_e2;
      
      ///////////////////
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      
      vector[N_day] theta_e3;
      matrix[N_dim_day, N_dim_day] sigma_theta_e3;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e3;
      sigma_theta_e3 = cov_GPL2(dist_day, eta_theta_e3, rho_theta_e3, 0.01);
      L_sigma_theta_e3 = cholesky_decompose(sigma_theta_e3);
      theta_e3 = L_sigma_theta_e3 * z_theta_e3;
    
      matrix[N_season, N_month] tau_e3;
      matrix[N_site, N_month] psi_e3;
      tau_e3 = mu_tau_e3 + z_tau_e3 * sigma_tau_e3;
      psi_e3 = mu_psi_e3 + z_psi_e3 * sigma_psi_e3;
    
      ////////////////////
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      
      vector[N_day] theta_e4;
      matrix[N_dim_day, N_dim_day] sigma_theta_e4;
      matrix[N_dim_day, N_dim_day] L_sigma_theta_e4;
      sigma_theta_e4 = cov_GPL2(dist_day, eta_theta_e4, rho_theta_e4, 0.01);
      L_sigma_theta_e4 = cholesky_decompose(sigma_theta_e4);
      theta_e4 = L_sigma_theta_e4 * z_theta_e4;
    
      matrix[N_season, N_month] tau_e4;
      matrix[N_site, N_month] psi_e4;
      tau_e4 = mu_tau_e4 + z_tau_e4 * sigma_tau_e4;
      psi_e4 = mu_psi_e4 + z_psi_e4 * sigma_psi_e4;
    
      ///////////////////
    }
    
    model {
      
      ///////////////////////
      /////////////////////// imputed variables
      mu_sb ~ normal(3.5, 1);
      sigma_sb ~ exponential(1);
      SBiomass_merge ~ normal(mu_sb, sigma_sb);
      mu_sbINI ~ normal(3.5, 1);
      sigma_sbINI ~ exponential(1);
      swarmINI_merge ~ normal(mu_sbINI, sigma_sbINI);
      mu_sbFIN ~ normal(3.5, 1);
      sigma_sbFIN ~ exponential(1);
      swarmFIN_merge ~ normal(mu_sbFIN, sigma_sbFIN);
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      vector[N] mu_e1;
      a_e1 ~ normal(0, 1);
      beta_rainW2_e1 ~ normal(0, 0.5);
      sigma_e1 ~ exponential(1);
      
      ///////////////////
      /////////////////// rain_i -> swarm
      to_vector(a_e2) ~ normal(3, 1);
      sigma_e2 ~ exponential(1);
      to_vector(beta_rainW1_e2) ~ normal(0, 0.25);
    
      z_theta_e2 ~ normal(0, 0.5);     
      eta_theta_e2 ~ exponential(3);   
      rho_theta_e2 ~ exponential(0.5); 
      
      to_vector(z_tau_e2) ~ normal(0, 0.5);
      mu_tau_e2 ~ normal(0, 0.5);
      sigma_tau_e2 ~ exponential(1);
    
      to_vector(z_psi_e2) ~ normal(0, 0.5);
      mu_psi_e2 ~ normal(0, 0.5);
      sigma_psi_e2 ~ exponential(1);
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      to_vector(a_e3) ~ normal(2.5, 1);
      sigma_e3 ~ exponential(1);
      to_vector(beta_rainW1_e3) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e3) ~ normal(0, 3);
    
      z_theta_e3 ~ normal(0, 1);
      eta_theta_e3 ~ exponential(3);
      rho_theta_e3 ~ exponential(0.5);
      
      to_vector(z_tau_e3) ~ normal(0, 0.5);
      mu_tau_e3 ~ normal(0, 0.5);
      sigma_tau_e3 ~ exponential(1);
    
      to_vector(z_psi_e3) ~ normal(0, 0.5);
      mu_psi_e3 ~ normal(0, 0.5);
      sigma_psi_e3 ~ exponential(1);
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      to_vector(a_e4) ~ normal(0.25, 0.5);
      sigma_e4 ~ exponential(1);
      to_vector(beta_rainW1_e4) ~ normal(0, 0.5);
      to_vector(beta_sawrA_e4) ~ normal(0, 0.5);
      to_vector(beta_swarmB_e4) ~ normal(0, 0.5);
    
      z_theta_e4 ~ normal(0, 0.5);
      eta_theta_e4 ~ exponential(3);
      rho_theta_e4 ~ exponential(0.5);
      
      to_vector(z_tau_e4) ~ normal(0, 0.5);
      mu_tau_e4 ~ normal(0, 0.5);
      sigma_tau_e4 ~ exponential(1);
    
      to_vector(z_psi_e4) ~ normal(0, 0.5);
      mu_psi_e4 ~ normal(0, 0.5);
      sigma_psi_e4 ~ exponential(1);
      
    
      /////////////////////////
      ///////////////////// rain_i+n -> rain i
      for (i in 1:N) {
        cum_rainfall_W25[i] ~ normal(a_e1 + beta_rainW2_e1 * cum_rainfall_W30[i], 
                                    sigma_e1);
      }
    
      ///////////////////
      /////////////////// rain_i -> swarm
      for (i in 1:N) {
        swarm_area[i] ~ student_t(2,
                                  a_e2[site[i], season[i]] + 
                                  beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W25[i] +
                                  theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                                  psi_e2[site[i], month[i]], 
                                  sigma_e2);
      }
    
      ///////////////////////// rain_i -> swarm -> insects biomass
      ///////////////////////// rain_i ->  insects biomass
      for (i in 1:N) {
        SBiomass_merge[i] ~ student_t(2,
                                     a_e3[site[i], season[i]] + 
                                     beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W25[i] +
                                     beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                                     theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                                     psi_e3[site[i], month[i]], 
                                     sigma_e3);
      }
    
    
      ///////////////////////// rain_i -> swarm -> insects biomass -> network
      ///////////////////////// rain_i -> network
      ///////////////////////// swarm -> network
      for (i in 1:N) {
         skewness[i] ~ normal(a_e4[site[i], season[i]] + 
                              beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W25[i] +
                              beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                              beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                              theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                              psi_e4[site[i], month[i]], sigma_e4);
      }
    
    }
    
    generated quantities {
      vector[N] mu_e1;
      vector[N] mu_e2;
      vector[N] mu_e3;
      vector[N] mu_e4;
      array[N] real ppcheck_e1;
      array[N] real ppcheck_e2;
      array[N] real ppcheck_e3;
      array[N] real ppcheck_e4;
      
      for (i in 1:N) {
        mu_e1[i] = a_e1 + beta_rainW2_e1 * cum_rainfall_W25[i]; 
      }
    
      ppcheck_e1 = normal_rng(mu_e1, sigma_e1);
    
      for (i in 1:N) {
        mu_e2[i] = a_e2[site[i], season[i]] + 
                  beta_rainW1_e2[site[i], season[i]]*cum_rainfall_W30[i] +
                  theta_e2[day[i]] + tau_e2[season[i], month[i]] + 
                  psi_e2[site[i], month[i]];
      }
      
      ppcheck_e2 = student_t_rng(2, mu_e2, sigma_e2);
    
    
      for (i in 1:N) {
        mu_e3[i] = a_e3[site[i], season[i]] + 
                   beta_rainW1_e3[site[i], season[i]]*cum_rainfall_W25[i] +
                   beta_sawrA_e3[site[i], season[i]]*swarm_area[i] +
                   theta_e3[day[i]] + tau_e3[season[i], month[i]] + 
                   psi_e3[site[i], month[i]];
      }
      
      ppcheck_e3 = student_t_rng(2, mu_e3, sigma_e3);
    
      for (i in 1:N) {
         mu_e4[i] = a_e4[site[i], season[i]] + 
                    beta_rainW1_e4[site[i], season[i]]*cum_rainfall_W25[i] +
                    beta_sawrA_e4[site[i], season[i]]*swarm_area[i] +
                    beta_swarmB_e4[site[i], season[i]]*SBiomass_merge[i] +
                    theta_e4[day[i]] + tau_e4[season[i], month[i]] + 
                    psi_e4[site[i], month[i]];
      }
    
      ppcheck_e4 = normal_rng(mu_e4, sigma_e4);
    
    }
    
    ")
```

#### Running MCMC algorithm


```{r, eval=FALSE}
file <- paste(getwd(), '/w25_skewness.stan', sep ='')

fit_skewnessW25 <- cmdstan_model(file, compile = T)

mod_skewnessW25_obs <- 
  fit_skewnessW25$sample(
    data = network_metrics_obs2.1, 
    chains = 3, 
    parallel_chains = 3, 
    iter_sampling = 8e3, 
    iter_warmup = 500, 
    thin = 10, 
    seed = 123
  )

```

```{r, echo=FALSE, eval=TRUE}
mod_skewnessW25_obs <- readRDS('causal_mod_skewnessW25.rds')
```

#### Model diagnostics

```{r, fig.height=15, fig.cap="Rhat values and ess of group-level parameters from the generative model explaining the effect of cumulative rainfall during W25, on skewness normalized degree of ant followers interaction networks."}

par(mfrow = c(5, 2), mar = c(4, 4, 1.5, 1))
mod_diagnostics(mod_skewnessW25_obs, 
                mod_skewnessW25_obs$summary(
                  unique(paste('psi_e2[', 
                               network_metrics_obs2.1$site,
                               ',',
                               network_metrics_obs2.1$month, ']', 
                               sep = '')))) 

mod_diagnostics(mod_skewnessW25_obs, 
                mod_skewnessW25_obs$summary(
                  unique(paste('psi_e3[', 
                               network_metrics_obs2.1$site,
                               ',',
                               network_metrics_obs2.1$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_skewnessW25_obs, 
                mod_skewnessW25_obs$summary(
                  unique(paste('psi_e4[', 
                               network_metrics_obs2.1$site,
                               ',',
                               network_metrics_obs2.1$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_skewnessW25_obs, 
                mod_skewnessW25_obs$summary(
                  unique(paste('tau_e4[', 
                               network_metrics_obs2.1$year,
                               ',',
                               network_metrics_obs2.1$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_skewnessW25_obs, 
                mod_skewnessW25_obs$summary(
                  unique(paste('tau_e2[', 
                               network_metrics_obs2.1$year,
                               ',',
                               network_metrics_obs2.1$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_skewnessW25_obs, 
                mod_skewnessW25_obs$summary(
                  unique(paste('tau_e3[', 
                               network_metrics_obs2.1$year,
                               ',',
                               network_metrics_obs2.1$month, ']', 
                               sep = ''))))

mod_diagnostics(mod_skewnessW25_obs, 
                mod_skewnessW25_obs$summary(paste('theta_e4[', 
                                                  1:network_metrics_obs2.1$N_day, ']', 
                                                  sep = '')))
mod_diagnostics(mod_skewnessW25_obs, 
                mod_skewnessW25_obs$summary(paste('theta_e3[', 
                                                  1:network_metrics_obs2.1$N_day, ']', 
                                                  sep = '')))

mod_diagnostics(mod_skewnessW25_obs, 
                mod_skewnessW25_obs$summary(paste('theta_e2[', 
                                                  1:network_metrics_obs2.1$N_day, ']', 
                                                  sep = '')))
par(mfrow = c(1, 1))
```

```{r, fig.cap="Rhat values and ess of slope, intercept, and dispersion parameters  from the generative model explaining the effect of cumulative rainfall during W25, on skewness of network normalized degree of ant followers interaction networks."}
summary_skewnessW25 <- mod_skewnessW25_obs$summary(c('beta_rainW2_e1', 
                                                     'beta_rainW1_e2',
                                                     'beta_rainW1_e3',
                                                     'beta_rainW1_e4',
                                                     'beta_sawrA_e3',
                                                     'beta_sawrA_e4',
                                                     'beta_swarmB_e4', 
                                                     'a_e1', 'a_e2', 
                                                     'a_e3', 'a_e4',
                                                     'sigma_e1', 'sigma_e2', 
                                                     'sigma_e3', 'sigma_e4', 
                                                     'swarm_area',
                                                     'SBiomass_merge',
                                                     'lp__'))


mod_diagnostics(mod_skewnessW25_obs, summary_skewnessW25)

```


```{r, fig.cap= "Posterior predictive checks"}
post_skewnessW25_obs <- mod_skewnessW25_obs$draws(c('beta_rainW2_e1', 
                                                    'beta_rainW1_e2',
                                                    'beta_rainW1_e3',
                                                    'beta_rainW1_e4',
                                                    'beta_sawrA_e3',
                                                    'beta_sawrA_e4',
                                                    'beta_swarmB_e4', 
                                                    'a_e1', 'a_e2', 'a_e3', 'a_e4',
                                                    'sigma_e1', 'sigma_e2', 
                                                    'sigma_e3', 'sigma_e4',
                                                    'swarm_area',
                                                    'SBiomass_merge'
), 
format = 'df')

swarm_area <- apply(post_skewnessW25_obs[, grep('swarm_area', colnames(post_skewnessW25_obs))], 
                    2, mean)

swarm_BM <- 
  apply(post_skewnessW25_obs[, grep('SBiomass_merge', colnames(post_skewnessW25_obs))], 
        2, mean)

ppcheck_swarmA <- mod_skewnessW25_obs$draws('ppcheck_e2', format = 'matrix')
ppcheck_swarmB <- mod_skewnessW25_obs$draws('ppcheck_e3', format = 'matrix')
ppcheck_skewness <- mod_skewnessW25_obs$draws('ppcheck_e4', format = 'matrix')
ppcheck_R1 <- mod_skewnessW25_obs$draws('ppcheck_e1', format = 'matrix')

par(mfrow = c(2, 2), mar = c(4, 4, 1, 1))
plot(density(network_metrics_obs2.1$cum_rainfall_W25), 
     main = '', xlab = 'Cum rainfall W25')
for(i in 1:100) lines(density(ppcheck_R1[i, ]), lwd = 0.1)
lines(density(network_metrics_obs2.1$cum_rainfall_W25), col = 'red')

plot(density(swarm_area), main = '', xlab = 'Swarm area')
for(i in 1:100) lines(density(ppcheck_swarmA[i, ]), lwd = 0.1)
lines(density(swarm_area), col = 'red')

plot(density(swarm_BM), main = '', xlab = 'Arthropod biomass')
for(i in 1:500) lines(density(ppcheck_swarmB[i, ]), lwd = 0.1)
lines(density(swarm_BM), col = 'red')

plot(density(network_metrics_obs2.1$skewness), 
     main = '', xlab = 'skewness')
for(i in 1:100) lines(density(ppcheck_skewness[i, ]), lwd = 0.1)
lines(density(network_metrics_obs2.1$skewness), col = 'red')

post_beta_skewnessW25 <- gather(post_skewnessW25_obs[, grep('beta', colnames(post_skewnessW25_obs))])

post_beta_skewnessW25$key <- as.factor(post_beta_skewnessW25$key)

```

## Plotting skewness models

### Main effects

```{r}
t <- paste('W', c(1, seq(5, 25, by = 5)), sep = '')

plot_beta_skewness <- vector('list', length(t))

for (i in seq_along(t)) {
  cadena <- paste('^(.*)beta_skewness(.*)', t[i], '$', sep = '')
  cadena2 <- paste('post_skewness', t[i], '_obs', sep = '')
  df <- get(ls()[grepl(cadena, ls())])
  temp <- get(ls()[grepl(cadena2, ls())])
  
  temp <- temp[, grep('^beta', colnames(temp))]
  
  temp <- apply(temp, 2, function(x) mean(x > 0))
  
  temp <- tibble(p = temp, key = names(temp))
  
  df <- 
    df |> 
    group_by(key) |> 
    transmute(li = quantile(value, 0.025), 
              ls = quantile(value, 0.975), 
              mu = mean(value), 
              window = t[i]) |> 
    unique()
  
  n <- c(1, seq(5, 25, by = 5))[i]
  
  df <- df[!grepl(n + 4, df$key), ]
  
  df <- full_join(df, temp, by = 'key')
  
  plot_beta_skewness[[i]] <- df
  print(i)
}

plot_beta_skewness <- do.call('rbind', plot_beta_skewness)

plot_beta_skewness <- plot_beta_skewness[!grepl('W2', plot_beta_skewness$key),]

plot_beta_skewness$window <- as.factor(plot_beta_skewness$window)

plot_beta_skewness$season <- 
  ifelse(grepl('^(.*)(..,1.)$', plot_beta_skewness$key), 'Dry', 'Wet')

plot_beta_skewness$site <- 
  ifelse(grepl('^(.*)(.1,..)$', plot_beta_skewness$key), '1', 
         ifelse(grepl('^(.*)(.2,..)$', plot_beta_skewness$key), '2', 
                ifelse(grepl('^(.*)(.3,..)$', plot_beta_skewness$key), '3', '4')))

plot_beta_skewness$site <- as.factor(plot_beta_skewness$site)

plot_beta_skewness$site <- 
  factor(plot_beta_skewness$site, 
         labels = levels(network_metrics_INDX$obs_all$site))

plot_beta_skewness$rainfall_level <- 
  factor(plot_beta_skewness$site, 
         labels = c('Medium-high rainfall', 'Medium-low rainfall', 
                    'Low rainfall', 'High rainfall'))

plot_beta_skewness$rainfall_level <- 
  factor(plot_beta_skewness$rainfall_level, 
         levels = c('Low rainfall', 'Medium-low rainfall', 
                    'Medium-high rainfall', 'High rainfall'))


plot_beta_skewness$key <- gsub('^(.*)(.....)$', '\\1', plot_beta_skewness$key)

plot_beta_skewnessWET <- plot_beta_skewness[plot_beta_skewness$season == 'Wet',]

plot_beta_skewnessWET$key <- factor(plot_beta_skewnessWET$key) 

plot_beta_skewnessWET$code <- 
  plot_beta_skewnessWET %$% paste(key, window, rainfall_level, sep = '_')

sum(plot_beta_skewnessWET$code == "beta_rainW1_e2_W15_Medium-low rainfall" |
      plot_beta_skewnessWET$code == "beta_sawrA_e4_W15_Medium-low rainfall")

plot_beta_skewnessWET$key <- 
  factor(plot_beta_skewnessWET$key, 
         levels = 
           c("beta_rainW1_e2", 
             "beta_rainW1_e3",
             "beta_sawrA_e3", 
             "beta_rainW1_e4",
             "beta_sawrA_e4",
             "beta_swarmB_e4"))


plot_effects_skewnessWET <- 
  plot_beta_skewnessWET |> 
  ggplot() +
  geom_vline(xintercept = 0, linetype = 3, col = 'red') +
  geom_errorbar(aes(y = key, xmin = li, 
                    xmax = ls, color = window), 
                width = 0, position = position_dodge(width = 0.8)) +
  geom_point(aes(mu, key, color = window, shape = window), 
             position = position_dodge(width = 0.8)) +
  scale_color_manual(values = c(rep('lightblue3', 2), 
                                'lightblue3', 
                                rep('lightblue3', 3))) +
  facet_wrap(~ rainfall_level, ncol = 1) +
  scale_y_discrete(limits =
                     c(
                       "beta_swarmB_e4",
                       "beta_sawrA_e4",
                       "beta_rainW1_e4",
                       "beta_sawrA_e3",
                       "beta_rainW1_e3",
                       "beta_rainW1_e2"),
                   labels = c(expression('Arthropod biomass' %->% 'Norm. degree'),
                              expression('Swarm area' %->% 'Norm. degree'),
                              expression('Rainfall' %->% 'Norm. degree'),
                              expression('Swarm area' %->% 'Arthropod biomass'),
                              expression('Rainfall' %->% 'Arthropod biomass'),
                              expression('Rainfall' %->% 'Swarm area'))) +
  labs(x = expression(beta), y = 'Effect', title = 'Wet season') +
  theme_bw() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    strip.background = element_blank(),
    panel.border = element_rect(colour = "black", fill = NA),
    legend.title = element_blank(),
    legend.background = element_blank(),
    legend.position = c(0.10, 0.09), 
    legend.box.background = element_blank(), 
    legend.key.size = unit(2.5, 'mm')
  )


plot_beta_skewnessDRY <- plot_beta_skewness[plot_beta_skewness$season == 'Dry',]

plot_beta_skewnessDRY$key <- factor(plot_beta_skewnessDRY$key)

plot_beta_skewnessDRY$key <- 
  factor(plot_beta_skewnessDRY$key, 
         levels = 
           c("beta_rainW1_e2", 
             "beta_rainW1_e3",
             "beta_sawrA_e3", 
             "beta_rainW1_e4",
             "beta_sawrA_e4",
             "beta_swarmB_e4"))

plot_effects_skewnessDRY <- 
  plot_beta_skewnessDRY |> 
  ggplot() +
  geom_vline(xintercept = 0, linetype = 3, col = 'red') +
  geom_errorbar(aes(y = key, xmin = li, 
                    xmax = ls, color = window), 
                width = 0, position = position_dodge(width = 0.8)) +
  geom_point(aes(mu, key, color = window, shape = window), 
             position = position_dodge(width = 0.8)) +
  scale_color_manual(values = c(rep('lightblue3', 2), 
                                'lightblue3', 
                                rep('lightblue3', 3))) +
  facet_wrap(~ rainfall_level, ncol = 1) +
  scale_y_discrete(limits =
                     c(
                       "beta_swarmB_e4",
                       "beta_sawrA_e4",
                       "beta_rainW1_e4",
                       "beta_sawrA_e3",
                       "beta_rainW1_e3",
                       "beta_rainW1_e2"),
                   labels = c(expression('Arthropod biomass' %->% 'Norm. degree'),
                              expression('Swarm area' %->% 'Norm. degree'),
                              expression('Rainfall' %->% 'Norm. degree'),
                              expression('Swarm area' %->% 'Arthropod biomass'),
                              expression('Rainfall' %->% 'Arthropod biomass'),
                              expression('Rainfall' %->% 'Swarm area'))) +
  labs(x = expression(beta), y = NULL, title = 'Dry season') +
  theme_bw() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    strip.background = element_blank(),
    panel.border = element_rect(colour = "black", fill = NA),
    legend.title = element_blank(),
    legend.background = element_blank(),
    legend.position = c(0.10, 0.10), 
    legend.box.background = element_blank(), 
    legend.key.size = unit(2.5, 'mm'),
    axis.text.y = element_blank()
  )


```



```{r, fig.cap="Slope coeficients of causal models explaining the effect of biotic and abiotic factors on the structure of ant-followers interaction networks", fig.height=20, fig.width=15}
plot_effects_skewnessWET | plot_effects_skewnessDRY +
  plot_layout(ncol = 1)
```

### Conditional effect of rainfall (W15) and arthropod biomass on skewness

```{r, warning=FALSE, message=FALSE}
s <- network_metrics_INDX$obs_all
s <- s[, -c(2, 4)]

s$season <- 
  ifelse(as.numeric(as.character(s$month)) <= 4, 1, 2)

s <- 
  s %$% 
  aggregate(skewness ~ season + site, FUN = length)

s

s2 <- network_metrics_INDX$obs_all
s2 <- s2[, -c(2, 4)]
s2$obs_ID <- as.factor(s2$obs_ID)

unique(tibble(x = network_metrics_INDX$obs_all$site, 
              x1 = as.numeric(network_metrics_INDX$obs_all$site)))

plot_beta_skewness[plot_beta_skewness$p >= 0.9 |
                     plot_beta_skewness$p <= 0.1, ] |> print(n = 100)

effects_skewness <- 
  plot_beta_skewness[plot_beta_skewness$p >= 0.9 |
                       plot_beta_skewness$p <= 0.1, ]

effects_skewness <- split(effects_skewness, 
                          list(effects_skewness$window, 
                               effects_skewness$season, 
                               effects_skewness$site))

effects_skewness <- effects_skewness[unlist(lapply(effects_skewness, function(x) nrow(x) > 0), 
                                            use.names = F)]


for (i in grep('PLRD', names(effects_skewness))) print(effects_skewness[[i]])
# PLRD swarm area --> net size (independent of the window)

swarm_area <- 
  sapply(ls()[grep('post_skewness', ls())], FUN = 
           function(x) {
             df <- get(x)
             sa <- df[, grep('swarm_area', colnames(df))]
             apply(sa, 2, mean)
           }, simplify = 'matrix')

swarm_area <- as.vector(apply(swarm_area, 1, mean))

swarm_BM <- 
  sapply(ls()[grep('post_skewness', ls())], FUN = 
           function(x) {
             df <- get(x)
             sa <- df[, grep('SBiomass_merge', colnames(df))]
             apply(sa, 2, mean)
           }, simplify = 'matrix')

swarm_BM <- as.vector(apply(swarm_BM, 1, mean))


# counterfactual (medium-high rainfall - JUAN)

sites <- 
  tibble(site = network_metrics_obs2.1$site, 
         day = network_metrics_obs2.1$day, 
         month = network_metrics_obs2.1$month, 
         season = network_metrics_obs2.1$season)

day <- unique(sites[, c('day', 'site', 'month', 'season')])

day <- day[day$site == 3 & 
             day$season == 2, ]

day2 <- unique(day[, -1])

psi_e4W15LR <- 
  mod_skewnessW15_obs$draws(
    unique(paste('psi_e4[', 
                 3,
                 ',',
                 day2$month, ']', 
                 sep = '')), format = 'matrix') |> 
  apply(1, mean)

psi_e3W15LR <- 
  mod_skewnessW15_obs$draws(
    unique(paste('psi_e3[', 
                 3,
                 ',',
                 day2$month, ']', 
                 sep = '')), format = 'matrix') |> 
  apply(1, mean)


tau_e4W15LR <- 
  mod_skewnessW15_obs$draws(
    unique(paste('tau_e4[', 
                 2,
                 ',',
                 day2$month, ']', 
                 sep = '')), format = 'matrix') |> 
  apply(1, mean)

tau_e3W15LR <- 
  mod_skewnessW15_obs$draws(
    unique(paste('tau_e3[', 
                 2,
                 ',',
                 day2$month, ']', 
                 sep = '')), format = 'matrix') |> 
  apply(1, mean)


theta_e4W15LR <- 
  mod_skewnessW15_obs$draws(paste('theta_e4[', 
                                  day$day, ']', 
                                  sep = ''), format = 'matrix') |> 
  apply(1, mean)

theta_e3W15LR <- 
  mod_skewnessW15_obs$draws(paste('theta_e3[', 
                                  day$day, ']', 
                                  sep = ''), format = 'matrix') |> 
  apply(1, mean)

x_W15 <- seq(min(network_metrics_obs2.1$cum_rainfall_W15), 
             max(network_metrics_obs2.1$cum_rainfall_W15),
             length.out = 1000)

est_counterNS_e3 <- 
  sapply(x_W15, FUN = 
           function(x) {
             
             NS <- 
               post_skewnessW15_obs$`a_e3[3,2]` + 
               post_skewnessW15_obs$`beta_rainW1_e3[3,2]`*x +
               post_skewnessW15_obs$`beta_sawrA_e3[3,2]`*mean(swarm_area) +
               psi_e3W15LR + theta_e3W15LR + tau_e3W15LR
             
             rstudent(length(NS), mu = NS, sigma = post_skewnessW15_obs$sigma_e3)
             
           })


est_counterNS_e3MU <- 
  sapply(x_W15, FUN = 
           function(x) {
             
             NS <- 
               post_skewnessW15_obs$`a_e3[3,2]` + 
               post_skewnessW15_obs$`beta_rainW1_e3[3,2]`*x +
               post_skewnessW15_obs$`beta_sawrA_e3[3,2]`*mean(swarm_area) +
               psi_e3W15LR + theta_e3W15LR + tau_e3W15LR
             
             NS
             
           })

est_counterNS_e3 <- 
  do.call('rbind', 
          apply(est_counterNS_e3, 2, function(x) {
            tibble(li = quantile(x, 0.025), 
                   ls = quantile(x, 0.975))
          }, simplify = 'list'))

est_counterNS_e3$x <- x_W15
est_counterNS_e3$season <- 'Wet season'
est_counterNS_e3$mu <- apply(est_counterNS_e3MU, 2, mean)

dat <- tibble(x = swarm_area, 
              y = swarm_BM, 
              season = network_metrics_obs2.1$season, 
              site = network_metrics_obs2.1$site, 
              skewness = network_metrics_obs2.1$skewness, 
              rain = network_metrics_obs2.1$cum_rainfall_W15)


plot_rain_skewness_PLR <- 
  ggplot() +
  geom_point(
    data = dat[dat$site == 3 & dat$season == 2,],
    aes(rain, y), color = 'lightblue3'
  ) + 
  geom_ribbon(
    data = est_counterNS_e3, 
    aes(x, ymin = li, ymax = ls), alpha = 0.25, 
    fill = 'tomato3'
  ) +
  geom_line(
    data = est_counterNS_e3, 
    aes(x, mu), linewidth = 1, 
    color = 'tomato3'
  ) +
  labs(x = 'Rainfall W15', 
       y = 'Arthropod biomass') +
  scale_y_continuous(breaks = seq(2, 10, by = 2)) +
  theme_bw() +
  theme(panel.grid = element_blank(),
        legend.background = element_blank(), 
        legend.position = 'none', 
        axis.text = element_text(size = 11), 
        axis.title = element_text(size = 16))


x_W15_2 <- seq(min(swarm_area), 
               max(swarm_area),
               length.out = 1000)

est_counterNS_e3_2 <- 
  sapply(x_W15_2, FUN = 
           function(x) {
             
             NS <- 
               post_skewnessW15_obs$`a_e3[3,2]` + 
               post_skewnessW15_obs$`beta_rainW1_e3[3,2]`*0 +
               post_skewnessW15_obs$`beta_sawrA_e3[3,2]`*x +
               psi_e3W15LR + theta_e3W15LR + tau_e3W15LR
             
             rstudent(length(NS), mu = NS, sigma = post_skewnessW15_obs$sigma_e3)
             
           })


est_counterNS_e3MU2 <- 
  sapply(x_W15_2, FUN = 
           function(x) {
             
             NS <- 
               post_skewnessW15_obs$`a_e3[3,2]` + 
               post_skewnessW15_obs$`beta_rainW1_e3[3,2]`*0 +
               post_skewnessW15_obs$`beta_sawrA_e3[3,2]`*x +
               psi_e3W15LR + theta_e3W15LR + tau_e3W15LR
             
             NS
             
           })

est_counterNS_e3_2 <- 
  do.call('rbind', 
          apply(est_counterNS_e3_2, 2, function(x) {
            tibble(li = quantile(x, 0.025), 
                   ls = quantile(x, 0.975))
          }, simplify = 'list'))

est_counterNS_e3_2$x <- x_W15_2
est_counterNS_e3_2$season <- 'Wet season'
est_counterNS_e3_2$mu <- apply(est_counterNS_e3MU2, 2, mean)


plot_SA_skewness_PLR <- 
  ggplot() +
  geom_point(
    data = dat[dat$site == 3 & dat$season == 2,],
    aes(x, y), color = 'lightblue3'
  ) + 
  geom_ribbon(
    data = est_counterNS_e3_2, 
    aes(x, ymin = li, ymax = ls), alpha = 0.25, 
    fill = 'tomato3'
  ) +
  geom_line(
    data = est_counterNS_e3_2, 
    aes(x, mu), linewidth = 1, 
    color = 'tomato3'
  ) +
  labs(x = 'Swarm area', 
       y = NULL) +
  theme_bw() +
  theme(panel.grid = element_blank(),
        legend.background = element_blank(), 
        legend.position = 'none', 
        axis.text = element_text(size = 11), 
        axis.title = element_text(size = 16))


x_W15_3 <- seq(min(swarm_BM), 
             max(swarm_BM),
             length.out = 1000)

est_counterNS_e3_3 <- 
  sapply(x_W15_3, FUN = 
           function(x) {
             
             NS <- 
               post_skewnessW15_obs$`a_e4[3,2]` + 
               post_skewnessW15_obs$`beta_rainW1_e4[3,2]`*0 +
               post_skewnessW15_obs$`beta_sawrA_e4[3,2]`*mean(swarm_area) +
               post_skewnessW15_obs$`beta_swarmB_e4[3,2]`*x +
               psi_e4W15LR + theta_e4W15LR + tau_e4W15LR
             
             rnorm(length(NS), mean = NS, sd = post_skewnessW15_obs$sigma_e3)
             
           })


est_counterNS_e3MU3 <- 
  sapply(x_W15_3, FUN = 
           function(x) {
             
             NS <- 
               post_skewnessW15_obs$`a_e4[3,2]` + 
               post_skewnessW15_obs$`beta_rainW1_e4[3,2]`*0 +
               post_skewnessW15_obs$`beta_sawrA_e4[3,2]`*mean(swarm_area) +
               post_skewnessW15_obs$`beta_swarmB_e4[3,2]`*x + 
               psi_e4W15LR + theta_e4W15LR + tau_e4W15LR
             
             NS
             
           })

est_counterNS_e3_3 <- 
  do.call('rbind', 
          apply(est_counterNS_e3_3, 2, function(x) {
            tibble(li = quantile(x, 0.025), 
                   ls = quantile(x, 0.975))
          }, simplify = 'list'))

est_counterNS_e3_3$x <- x_W15_3
est_counterNS_e3_3$season <- 'Wet season'
est_counterNS_e3_3$mu <- apply(est_counterNS_e3MU3, 2, mean)


plot_sekewness_PLR <- 
  ggplot() +
  geom_point(
    data = dat[dat$site == 3 & dat$season == 2,],
    aes(y, skewness), color = 'lightblue3'
  ) + 
  geom_ribbon(
    data = est_counterNS_e3_3, 
    aes(x, ymin = li, ymax = ls), alpha = 0.25, 
    fill = 'tomato3'
  ) +
  geom_line(
    data = est_counterNS_e3_3, 
    aes(x, mu), linewidth = 1, 
    color = 'tomato3'
  ) +
  labs(x = 'Arthropod biomass', 
       y = 'Skewness') +
  theme_bw() +
  theme(panel.grid = element_blank(),
        legend.background = element_blank(), 
        legend.position = 'none', 
        axis.text = element_text(size = 11), 
        axis.title = element_text(size = 16))

```

```{r, fig.cap='Conditional plots of main biotic and abiotic predictors affecting skewness of normalized degree of ant-followers interaction networks'}
plot_rain_skewness_PLR +
  plot_SA_skewness_PLR + 
  plot_sekewness_PLR +
  plot_layout(ncol = 3)
```

$\beta$ parameter of $rainfall~W15 \rightarrow arthropod~biomass$

```{r}
mean(post_skewnessW15_obs$`beta_rainW1_e3[3,2]`)
sd(post_skewnessW15_obs$`beta_rainW1_e3[3,2]`)
mean(post_skewnessW15_obs$`beta_rainW1_e3[3,2]` > 0)
```

$\beta$ parameter of $arthropod~biomass \rightarrow skewness$

```{r}
mean(post_skewnessW15_obs$`beta_swarmB_e4[3,2]`)
sd(post_skewnessW15_obs$`beta_swarmB_e4[3,2]`)
mean(post_skewnessW15_obs$`beta_swarmB_e4[3,2]` > 0)
```

### Contrast between seasons

```{r}
posteriors <- ls()[grep('^(post_skewness)(W[0-9]*)', ls())]

df_seasons <- 
  lapply(posteriors, FUN = 
           function(draws) {
             
             p <- get(draws)
             
             w <- gsub('^(.*)(W[0-9]*)(.*)$', '\\2', draws)
             
             post_season <- 
               p[, colnames(p)[grep('^a_e4', colnames(post_net_sizeW1_obs))]] |> 
               gather() 
             
             post_season <- split(post_season, post_season$key)  
             
             sites <- rep(c('Medium-high rainfall', 
                            'Medium-low rainfall', 
                            'low rainfall', 
                            'High rainfall'), each = 2)
             
             season <- rep(c('Dry', 'Wet'), 4)
             
             for (i in seq_along(sites)) {
               post_season[[i]]$site <- sites[[i]]
               post_season[[i]]$season <- season[[i]]
               post_season[[i]] <- post_season[[i]][, -1]
             }
             
             post_season <- do.call('rbind', post_season)
             post_season <- split(post_season, post_season$site)
             
             post_season <- 
               lapply(post_season, FUN = 
                        function(x) {
                          j <- 
                            x[x$season == 'Dry', ]$value - 
                            x[x$season == 'Wet', ]$value
                          
                          tibble(site = x$site[1], 
                                 contrast = j, 
                                 p = mean(j > 0))
                        })
             
             post_season <- do.call('rbind', post_season)
             
             post_season$model <- w
             
             post_season
           })

df_seasons <- do.call('rbind', df_seasons)

```

```{r, fig.cap="Contrast of posterior distributions of skewness of normalized degree during the wet and dry seasons at the sites with different levels of annual rainfall. Each panel shows the contrast for each model at temporal windows of cumulative rainfall: (i.e. from 1, 5, 10, 15, 20 and 25 days after sampling)"}

df_seasons |> 
  ggplot(aes(contrast, fill = site)) +
  geom_density(alpha = 0.5) +
  geom_vline(xintercept = 0, linetype = 3, col = 'red') +
  labs(x = 'Skewness\n (contrast between wet and dry season)') +
  #lims(x = c(-40, 80)) +
  facet_wrap(~model)

```


### Causal effect of rainfall (W15) and arthropod biomass on skewness

```{r, warning=FALSE}
counterfact_skewness_PRL <- 
  function(.fun = mean, mu = T, year = 2022, var = 'rainfall') {
    
    rain <- network_metrics_obs2.1$cum_rainfall_W15
    
    SA <- swarm_BM
    
    if (var == 'rainfall') {
      
      AB <- 
        post_skewnessW15_obs$`a_e3[3,2]` + 
        post_skewnessW15_obs$`beta_rainW1_e3[3,2]`*.fun(rain) +
        post_skewnessW15_obs$`beta_sawrA_e3[3,2]`*mean(swarm_area) +
        psi_e3W15LR + theta_e3W15LR + tau_e3W15LR
      
      NS <- 
        post_skewnessW15_obs$`a_e4[3,2]` + 
        post_skewnessW15_obs$`beta_rainW1_e4[3,2]`*0 +
        post_skewnessW15_obs$`beta_sawrA_e4[3,2]`*mean(swarm_area) +
        post_skewnessW15_obs$`beta_swarmB_e4[3,2]`*AB +
        psi_e4W15LR + theta_e4W15LR + tau_e4W15LR
      
    } 
    
    if (var == 'n') {
      NS <- 
        post_skewnessW15_obs$`a_e4[3,2]` + 
        post_skewnessW15_obs$`beta_rainW1_e4[3,2]`*0 +
        post_skewnessW15_obs$`beta_sawrA_e4[3,2]`*mean(swarm_area) +
        post_skewnessW15_obs$`beta_swarmB_e4[3,2]`*.fun(swarm_BM) +
        psi_e4W15LR + theta_e4W15LR + tau_e4W15LR
    }
    
    if (var == 'swarm') {
      NS <- 
        post_skewnessW15_obs$`a_e4[3,2]` + 
        post_skewnessW15_obs$`beta_rainW1_e4[3,2]`*0 +
        post_skewnessW15_obs$`beta_sawrA_e4[3,2]`*.fun(swarm_area) +
        post_skewnessW15_obs$`beta_swarmB_e4[3,2]`*mean(swarm_BM) +
        psi_e4W15LR + theta_e4W15LR + tau_e4W15LR
    }
    
    if (mu) {
      NS
    } else {
      set.seed(123)
      rnorm(length(NS), mean = NS, sd = post_skewnessW15_obs$sigma_e4)
    }
  } 


skewness_counter_PRL <- 
  tibble(mu_val = c(counterfact_skewness_PRL(max, F, var = 'rainfall') - 
                      counterfact_skewness_PRL(min, F, var = 'rainfall')), 
         Intervention = 'Causal effect of\n rainfall W15  ')

skewness_counter_PRL2 <- 
  tibble(mu_val = c(counterfact_skewness_PRL(max, F, var = 'n') - 
                      counterfact_skewness_PRL(min, F, var = 'n')), 
         Intervention = 'Causal effect of  \n Arthropod biomass')

skewness_counter_PRL3 <- 
  tibble(mu_val = c(counterfact_skewness_PRL(max, F, var = 'swarm') - 
                      counterfact_skewness_PRL(min, F, var = 'swarm')), 
         Intervention = 'Causal effect of  \n swarm area')

skewness_counter_PRL <- rbind(skewness_counter_PRL, 
                              skewness_counter_PRL2, 
                              skewness_counter_PRL3)

plot_contrast_skewness_sawrm_PRL <- 
  ggplot() +
  geom_boxplot(data = skewness_counter_PRL, 
               aes(x = mu_val, y = Intervention), 
               alpha = 0.3, color = 'tomato3', 
               fill = 'tomato3', width = 0.2) +
  geom_vline(xintercept = 0, linetype = 2, color = 'red') +
  labs(x = 'Contrast between\n interventions (min - max)', 
       y = NULL) +
  theme_bw() +
  theme(panel.grid = element_blank(), 
        legend.title = element_blank(), 
        legend.position = c(0.2, 0.8), 
        legend.background = element_blank(), 
        legend.key.size = unit(2, 'mm'), 
        axis.text = element_text(size = 15), 
        axis.title = element_text(size = 16))



```

```{r, fig.cap='Causal effect of intervening arthropod biomass and rainfall (W15) on skewness of normalized degree of ant-followers'}
plot_contrast_skewness_sawrm_PRL
```

Probability of the causal effect being above zero, average increase, SD, and percentage of increase given the cumulative rainfall (W15) intervention (indirect effect)
```{r}
mean(skewness_counter_PRL$mu_val < 0)
mean(skewness_counter_PRL$mu_val)
sd(skewness_counter_PRL$mu_val)
```


Probability of the causal effect being above zero, average increase, SD, and percentage of increase given the arthropod biomass intervention.
```{r}
mean(skewness_counter_PRL2$mu_val < 0)
mean(skewness_counter_PRL2$mu_val)
sd(skewness_counter_PRL2$mu_val)
```

Probability of tan effect by swarm area on skwness

```{r}
mean(skewness_counter_PRL3$mu_val)
mean(skewness_counter_PRL3$mu_val > 0)
```


### Conditional effect of rainfall (W20) 

```{r, warning=FALSE}
for (i in grep('LIMB', names(effects_skewness))) print(effects_skewness[[i]])
# LIMB Rain W20 --> swarm area --> skewness


unique(tibble(x = network_metrics_INDX$obs_all$site, 
              x1 = as.numeric(network_metrics_INDX$obs_all$site)))

swarm_area <- 
  sapply(ls()[grep('post_skewness', ls())], FUN = 
           function(x) {
             df <- get(x)
             sa <- df[, grep('swarm_area', colnames(df))]
             apply(sa, 2, mean)
           }, simplify = 'matrix')

swarm_area <- as.vector(apply(swarm_area, 1, mean))

swarm_BM <- 
  sapply(ls()[grep('post_skewness', ls())], FUN = 
           function(x) {
             df <- get(x)
             sa <- df[, grep('SBiomass_merge', colnames(df))]
             apply(sa, 2, mean)
           }, simplify = 'matrix')

swarm_BM <- as.vector(apply(swarm_BM, 1, mean))


# counterfactual (medium-high rainfall - JUAN)

sites <- 
  tibble(site = network_metrics_obs2.1$site, 
         day = network_metrics_obs2.1$day, 
         month = network_metrics_obs2.1$month, 
         season = network_metrics_obs2.1$season)

day <- unique(sites[, c('day', 'site', 'month', 'season')])

day <- day[day$site == 2 & 
             day$season == 2, ]

day2 <- unique(day[, -1])

psi_e4W20LR <- 
  mod_skewnessW20_obs$draws(
    unique(paste('psi_e4[', 
                 2,
                 ',',
                 day2$month, ']', 
                 sep = '')), format = 'matrix') |> 
  apply(1, mean)


tau_e4W20LR <- 
  mod_skewnessW20_obs$draws(
    unique(paste('tau_e4[', 
                 2,
                 ',',
                 day2$month, ']', 
                 sep = '')), format = 'matrix') |> 
  apply(1, mean)


theta_e4W20LR <- 
  mod_skewnessW20_obs$draws(paste('theta_e4[', 
                                  day$day, ']', 
                                  sep = ''), format = 'matrix') |> 
  apply(1, mean)


x_W20 <- seq(min(network_metrics_obs2.1$cum_rainfall_W20), 
             max(network_metrics_obs2.1$cum_rainfall_W20),
             length.out = 1000)

est_counter_skewness_e4 <- 
  sapply(x_W20, FUN = 
           function(x) {
             
             NS <- 
               post_skewnessW20_obs$`a_e4[2,2]` + 
               post_skewnessW20_obs$`beta_rainW1_e4[2,2]`*x +
               post_skewnessW20_obs$`beta_sawrA_e4[2,2]`*mean(swarm_area) +
               post_skewnessW20_obs$`beta_swarmB_e4[2,2]`*mean(swarm_BM) +
               psi_e4W20LR + theta_e4W20LR + tau_e4W20LR
             
             rnorm(length(NS), mean = NS, sd = post_skewnessW15_obs$sigma_e4)
             
           })


est_counter_skewness_e4MU <- 
  sapply(x_W20, FUN = 
           function(x) {
             
             NS <- 
               post_skewnessW20_obs$`a_e4[2,2]` + 
               post_skewnessW20_obs$`beta_rainW1_e4[2,2]`*x +
               post_skewnessW20_obs$`beta_sawrA_e4[2,2]`*mean(swarm_area) +
               post_skewnessW20_obs$`beta_swarmB_e4[2,2]`*mean(swarm_BM) +
               psi_e4W20LR + theta_e4W20LR + tau_e4W20LR
             
             NS
             
           })

est_counter_skewness_e4 <- 
  do.call('rbind', 
          apply(est_counter_skewness_e4, 2, function(x) {
            tibble(li = quantile(x, 0.025), 
                   ls = quantile(x, 0.975))
          }, simplify = 'list'))

est_counter_skewness_e4$x <- x_W20
est_counter_skewness_e4$season <- 'Wet season'
est_counter_skewness_e4$mu <- apply(est_counter_skewness_e4MU, 2, mean)

dat <- tibble(x = swarm_area, 
              y = swarm_BM, 
              season = network_metrics_obs2.1$season, 
              site = network_metrics_obs2.1$site, 
              skewness = network_metrics_obs2.1$skewness, 
              rain = network_metrics_obs2.1$cum_rainfall_W20)


plot_rain_skewness_PLR <- 
  ggplot() +
  geom_point(
    data = dat[dat$site == 2 & dat$season == 2,],
    aes(rain, skewness), color = 'lightblue3'
  ) + 
  geom_ribbon(
    data = est_counter_skewness_e4, 
    aes(x, ymin = li, ymax = ls), alpha = 0.25, 
    fill = 'purple4'
  ) +
  geom_line(
    data = est_counter_skewness_e4, 
    aes(x, mu), linewidth = 1, 
    color = 'purple4'
  ) +
  labs(x = 'Rainfall W20', 
       y = 'Skewness') +
  theme_bw() +
  theme(panel.grid = element_blank(),
        legend.background = element_blank(), 
        legend.position = 'none', 
        axis.text = element_text(size = 15), 
        axis.title = element_text(size = 20))
```

```{r, fig.cap='Conditional plots of main biotic and abiotic predictors affecting skewness of normalized degree of ant-followers interaction networks'}
plot_rain_skewness_PLR
```

$\beta$ parameter of $rainfall~W20 \rightarrow clustering$

```{r}
mean(post_skewnessW20_obs$`beta_rainW1_e4[2,2]`)
sd(post_skewnessW20_obs$`beta_rainW1_e4[2,2]`)
mean(post_skewnessW20_obs$`beta_rainW1_e4[2,2]` > 0)
```


### Causal effect of rainfall (W20)

```{r}
counterfact_skewness_LIMB <- 
  function(.fun = mean, mu = T) {
    
    rain <- network_metrics_obs2.1$cum_rainfall_W25
    
    NS <- 
      post_skewnessW20_obs$`a_e4[2,2]` + 
      post_skewnessW20_obs$`beta_rainW1_e4[2,2]`*.fun(rain) +
      post_skewnessW20_obs$`beta_sawrA_e4[2,2]`*mean(swarm_area) +
      post_skewnessW20_obs$`beta_swarmB_e4[2,2]`*mean(swarm_BM) +
      psi_e4W20LR + theta_e4W20LR + tau_e4W20LR
    
    if (mu) {
      NS
    } else {
      set.seed(123)
      rnorm(length(NS), mean = NS, sd = post_skewnessW15_obs$sigma_e4)
    }
  } 

skewness_counter_LIMB <- 
  tibble(mu_val = c(counterfact_skewness_LIMB(max, F) - counterfact_skewness_LIMB(min, F)), 
         Intervention = 'Causal effect of    \n rainfall W20')

plot_contrast_net_sawrm_LIMB <- 
  ggplot() +
  geom_boxplot(data = skewness_counter_LIMB, 
               aes(x = mu_val, y = Intervention), 
               alpha = 0.3, color = 'purple4', 
               fill = 'purple4', width = 0.2) +
  geom_vline(xintercept = 0, linetype = 2, color = 'red') +
  labs(x = 'Contrast between\n interventions (min - max)', 
       y = NULL) +
  theme_bw() +
  theme(panel.grid = element_blank(), 
        legend.title = element_blank(), 
        legend.position = c(0.2, 0.8), 
        legend.background = element_blank(), 
        legend.key.size = unit(2, 'mm'), 
        axis.text = element_text(size = 15), 
        axis.title = element_text(size = 16))

```

```{r, fig.cap= 'Causal effect of intervening arthropod biomass and rainfall (W15) on network size of ant-followers'}
plot_contrast_net_sawrm_LIMB
```

Probability of the causal effect being above zero, average increase, SD, and percentage of increase given the cumulative rainfall (W20) intervention.
```{r}
mean(skewness_counter_LIMB$mu_val < 0)
mean(skewness_counter_LIMB$mu_val)
sd(skewness_counter_LIMB$mu_val)
```

### Non-relevant effects
```{r, warning=FALSE}
# ==== site JUAN ====
for (i in grep('JUAN', names(effects_skewness))) print(effects_skewness[[i]])
# NO effects


# ======= site PLRD =======

for (i in grep('PLRD', names(effects_skewness))) print(effects_skewness[[i]])
# PLRD swarm area --> net size (independent of the window)


# ======= site SHER ======

for (i in grep('SHER', names(effects_skewness))) print(effects_skewness[[i]])

# NOO EFFECTS in this site
```

# Swarm area and arthropod biomass across sites and seasons

Here we use the structure and posterior distributions of the generative models to estimate the how swarm area and arthropod biomass varies along  the SL-rainfall localities and seasons.
```{r}
post_swar_art <- mod_norm_degreeW25_obs$draws(c('a_e3', 'beta_rainW1_e3', 
                                                'beta_sawrA_e3', 
                                                'theta_e3', 'tau_e3',
                                                'psi_e3',
                                                'a_e2', 'beta_rainW1_e2', 
                                                'theta_e2', 'tau_e2',
                                                'psi_e2'), format = 'df')

post_swar_art <- 
  lapply(c('a_e3', 'beta_rainW1_e3', 
           'beta_sawrA_e3', 
           'theta_e3', 'tau_e3',
           'psi_e3',
           'a_e2', 'beta_rainW1_e2', 
           'theta_e2', 'tau_e2',
           'psi_e2'), FUN = 
           function(x) {
             x <- paste0('^', x)
             post_swar_art[, grep(x, colnames(post_swar_art))]
           })

names(post_swar_art) <- c('a_e3', 'beta_rainW1_e3', 
                          'beta_sawrA_e3', 
                          'theta_e3', 'tau_e3',
                          'psi_e3',
                          'a_e2', 'beta_rainW1_e2', 
                          'theta_e2', 'tau_e2',
                          'psi_e2')

sites_codes <- 
  full_join(unique(tibble(site = network_metrics_INDX$obs_all$site, 
                        code = as.numeric(network_metrics_INDX$obs_all$site), 
                        month = as.numeric(network_metrics_INDX$obs_all$month), 
                        day = as.numeric(network_metrics_INDX$obs_all$date_fct))), 
          unique(plot_beta_norm_degree[, c("site", "rainfall_level")]), 
          by = 'site')

sites_codes

post_swarm_AB <- 
  lapply(1:2, FUN = 
         function(i) {
           
           est <- 
           lapply(1:4, FUN = 
                    function(x) {
                      
                      psi <- 
                        sites_codes |> 
                        filter(code == x) |> 
                        select(code, month) |> 
                        mutate(a = paste0('psi_e2[', code, ',', month, ']')) |> 
                        unique()
                      psi <- psi$a
                      psi <- colnames(post_swar_art$psi_e2) %in% psi
                      
                      tau <- which(i == temp_data$season)
                      tau <- unique(paste0('tau_e2[', i, ',', 
                                           temp_data$month[tau], ']'))
                      
                      theta <- 
                        sites_codes |> 
                        filter(code == x) |> 
                        select(code, day) |> 
                        mutate(a = paste0('theta_e2[', day, ']')) |> 
                        unique()
                      theta <- theta$a
                      theta <- colnames(post_swar_art$theta_e2) %in% theta
                      
                      a_ <- unique(paste0('a_e2[', x, ',', i, ']'))
                      b <- unique(paste0('beta_rainW1_e2[', x, ',', i, ']'))
                      
                      
                      mu_SA <-
                        with(post_swar_art,
                           {
                             a_e2[, a_, drop = T] +
                               beta_rainW1_e2[, b, drop = T] * mean(temp_data$cum_rainfall_W25) +
                               apply(theta_e2[, theta], 1, mean) +
                               apply(psi_e2[, psi], 1, mean) +
                               apply(tau_e2[, tau], 1, mean)
                           })
                      
                      d1 <- 
                        tibble(mu = mu_SA, 
                             code = x, 
                             season = i, 
                             effect = 'Swarm area')
                      
                      
                      psi <- 
                        sites_codes |> 
                        filter(code == x) |> 
                        select(code, month) |> 
                        mutate(a = paste0('psi_e3[', code, ',', month, ']')) |> 
                        unique()
                      psi <- psi$a
                      psi <- colnames(post_swar_art$psi_e3) %in% psi
                      
                      tau <- which(i == temp_data$season)
                      tau <- unique(paste0('tau_e3[', i, ',', 
                                           temp_data$month[tau], ']'))
                      
                      theta <- 
                        sites_codes |> 
                        filter(code == x) |> 
                        select(code, day) |> 
                        mutate(a = paste0('theta_e3[', day, ']')) |> 
                        unique()
                      theta <- theta$a
                      theta <- colnames(post_swar_art$theta_e3) %in% theta
                      
                      a_ <- unique(paste0('a_e3[', x, ',', i, ']'))
                      b <- unique(paste0('beta_rainW1_e3[', x, ',', i, ']'))
                      b2 <- unique(paste0('beta_sawrA_e3[', x, ',', i, ']'))
                      
                      
                      mu_SB <-
                        with(post_swar_art,
                             {
                               a_e3[, a_, drop = T] +
                                 beta_rainW1_e3[, b, drop = T] * mean(temp_data$cum_rainfall_W25) +
                                 beta_sawrA_e3[, b2, drop = T] * mean(swarm_area) +
                                 apply(theta_e3[, theta], 1, mean) +
                                 apply(psi_e3[, psi], 1, mean) +
                                 apply(tau_e3[, tau], 1, mean)
                             })

                      d2 <-
                        tibble(mu = mu_SB,
                               code = x,
                               season = i,
                               effect = 'Arthropod biomass')

                      rbind(d2, d1)
                      
                    })
           do.call('rbind', est)
         })

post_swarm_AB <- do.call('rbind', post_swarm_AB)

post_swarm_AB <- 
  full_join(post_swarm_AB, 
          unique(sites_codes[, c("code", "site", "rainfall_level")]), 
          by = 'code')

post_swarm_AB$season2 <- ifelse(post_swarm_AB$season == 1, 'Dry', 'Rainy')

levels(post_swarm_AB$rainfall_level)

post_swarm_AB$rainfall_level <- factor(post_swarm_AB$rainfall_level, 
                                       labels = c("Low SL rainfall",
                                                  "Medium-low SL rainfall",
                                                  "Medium-high SL rainfall",
                                                  "High SL rainfall"  ))


```

```{r, fig.cap="Posterior distribution of swarm area and arthropod biomass across site-level (SL) rainfall localities and seasons"}
plot_grid(post_swarm_AB |> 
            filter(effect == 'Arthropod biomass') |> 
            ggplot(aes(rainfall_level, mu, fill = season2, color = season2)) +
            geom_boxplot(outlier.alpha = 0, 
                         position = position_dodge(width = 0.9), 
                         alpha = 0.2) +
            theme_classic() +
            labs(y = 'Arthropod biomass (log)', x = NULL) +
            theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1), 
                  legend.title = element_blank(), 
                  legend.position = 'top'),
          post_swarm_AB |> 
            filter(effect != 'Arthropod biomass') |> 
            ggplot(aes(rainfall_level, mu, fill = season2, color = season2)) +
            geom_boxplot(outlier.alpha = 0, 
                         position = position_dodge(width = 0.9), 
                         alpha = 0.2) +
            theme_classic() +
            labs(y = 'Swarm area (log)', x = NULL) +
            theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1), 
                  legend.title = element_blank(), 
                  legend.position = 'top') 
          )
```


```{r}
# Tables (probability of effect)

table1 <- 
  lapply(unique(post_swarm_AB$effect), FUN = 
         function(i) {
           
           z <- 
           lapply(unique(post_swarm_AB$rainfall_level), FUN = 
                    function(x) {
                      d <- 
                        post_swarm_AB |> 
                        filter(rainfall_level == x)
                      
                      d <- d[d$effect == i, ]
                      
                      d1 <- d[d$season2 == 'Dry', ]$mu
                      d2 <- d[d$season2 == 'Rainy', ]$mu
                      
                      r <- ((d2 - d1)/d1) * 100
                      
                      tibble(Variable = i,
                             site = x, 
                             `P(Dry < Rainy)` = mean(d1 < d2), 
                             `Relative difference (mu)` = mean(r), 
                             `Relative difference (sd)` = sd(r)/sqrt(length(r)))
                      
                    })
           do.call('rbind', z)
         })

```

```{r}

text <- 
  'Probability of swarm area and arthropod biomass being 
higher during the rainy season rainy, average relative difference and its SD'

knitr::kable(do.call('rbind', table1), 
             digits = 2, 
             caption = text)
```


The function `tables_swarm_AB_EFFECT` estimated contrast of either arthropod biomass or swarm area between sites and at specific seasons.
```{r,}

tables_swarm_AB_EFFECT <- 
  function(eff = 'Arthropod biomass', season = 'Dry', p = T, .fun = mean) {
    
    if (p) {
      m <- 
      sapply(levels(post_swarm_AB$rainfall_level), FUN = 
               function(i) {
                 sapply(levels(post_swarm_AB$rainfall_level), FUN = 
                          function(j) {
                            d <- 
                              post_swarm_AB |> 
                              filter(effect == eff)
                            d <- d[d$season2 == season,]
                            
                            s1 <- d[d$rainfall_level == i, ]$mu
                            s_i <- d[d$rainfall_level == j, ]$mu
                            mean(s1 > s_i)
                            
                          })
               })
      m[(lower.tri(m))] <- NA
      m
    } else {
      m <- 
        sapply(levels(post_swarm_AB$rainfall_level), FUN = 
                 function(i) {
                   sapply(levels(post_swarm_AB$rainfall_level), FUN = 
                            function(j) {
                              d <- 
                                post_swarm_AB |> 
                                filter(effect == eff)
                              d <- d[d$season2 == season,]
                              
                              s1 <- d[d$rainfall_level == i, ]$mu
                              s_i <- d[d$rainfall_level == j, ]$mu
                              
                              z <- ((s1 - s_i)/s_i) * 100
                              
                              .fun(z)
                              
                            })
                 })
      m[(lower.tri(m))] <- NA
      m
    }
  }

```

Contrasts arthropod biomass **dry season**.
```{r}

text <- 
  'Probability that arthropod biomass in the site column *j* is 
greater than the site at row *i* durong dry season'

knitr::kable(tables_swarm_AB_EFFECT(eff = 'Arthropod biomass', 
                       season = 'Dry', 
                       p = T, 
                       .fun = mean), 
             caption = text)
```

```{r}

text <- 
  'Contras between arthropod biomass in the site column *j* 
and site at row *i* during dry season. Average value'

knitr::kable(tables_swarm_AB_EFFECT(eff = 'Arthropod biomass', 
                       season = 'Dry', 
                       p = F, 
                       .fun = mean), 
             caption = text)
```


```{r}

text <- 
  'Contras between arthropod biomass in the site 
column *j* and site at row *i* during dry season. SD'

knitr::kable(tables_swarm_AB_EFFECT(eff = 'Arthropod biomass', 
                       season = 'Dry', 
                       p = F, 
                       .fun = sd), 
             caption = text)
```

Contrasts arthropod biomass **rainy season**.
```{r}

text <- 
  'Probability that arthropod biomass in the site column *j* 
is greater than the site at row *i* durong dry season'

knitr::kable(tables_swarm_AB_EFFECT(eff = 'Arthropod biomass', 
                       season = 'Rainy', 
                       p = T, 
                       .fun = mean), 
             caption = text)
```

```{r}

text <- 'Contras between arthropod biomass in the site 
column *j* and site at row *i* during dry season. Average value'

knitr::kable(tables_swarm_AB_EFFECT(eff = 'Arthropod biomass', 
                       season = 'Rainy', 
                       p = F, 
                       .fun = mean), 
             caption = text)
```


```{r}

text <- 
  'Contras between arthropod biomass in the site 
column *j* and site at row *i* during dry season. SD'

knitr::kable(tables_swarm_AB_EFFECT(eff = 'Arthropod biomass', 
                       season = 'Rainy', 
                       p = F, 
                       .fun = sd), 
             caption = text)
```


Contrasts swarm area: **dry season**.
```{r}

text <- 
  'Probability that swarm area in the site column *j* is 
greater than the site at row *i* durong dry season'

knitr::kable(tables_swarm_AB_EFFECT(eff = 'Swarm area', 
                       season = 'Dry', 
                       p = T, 
                       .fun = mean), 
             caption = text)
```

```{r}

text <- 
  'Contras between swarm area in the site column *j* 
and site at row *i* during dry season. Average value'

knitr::kable(tables_swarm_AB_EFFECT(eff = 'Swarm area', 
                       season = 'Dry', 
                       p = F, 
                       .fun = mean), 
             caption = text)
```


```{r}

text <- 
  'Contras between swarm area in the site column 
*j* and site at row *i* during dry season. SD'

knitr::kable(tables_swarm_AB_EFFECT(eff = 'Swarm area', 
                       season = 'Dry', 
                       p = F, 
                       .fun = sd), 
             caption = text)
```

Contrasts swarm area: **rainy season**.
```{r}

text <- 
  'Probability that arthropod biomass in the site column *j* 
is greater than the site at row *i* durong dry season'

knitr::kable(tables_swarm_AB_EFFECT(eff = 'Swarm area', 
                       season = 'Rainy', 
                       p = T, 
                       .fun = mean), 
             caption = text)
```

```{r}

text <- 
  'Contras between swarm area in the site column *j* 
and site at row *i* during dry season. Average value'

knitr::kable(tables_swarm_AB_EFFECT(eff = 'Swarm area', 
                       season = 'Rainy', 
                       p = F, 
                       .fun = mean), 
             caption = text)
```


```{r}

text <- 
  'Contras between swarm area in the site column *j*
and site at row *i* during dry season. SD'

knitr::kable(tables_swarm_AB_EFFECT(eff = 'Swarm area', 
                       season = 'Rainy', 
                       p = F, 
                       .fun = sd), 
             caption = text)
```


# Similarity of species composition 

We used the Jaccard index to estimate the similarity of species composition in ant-followers interaction networks across the rainfall gradient and the wet season.

```{r}
jaccard <- 
  function(set1, set2) {
    inter <- length(base::intersect(set1, set2))
    union <- length(set1) + length(set2) - inter
    inter/union
  }

net_j <- do.call('rbind', net)

net_j1 <- net_j[, -7]
net_j2 <- net_j[, -8]

colnames(net_j1)[7] <- 'sp'
colnames(net_j2)[7] <- 'sp'

net_j <- rbind(net_j1, net_j2)

net_j$season <- 
  ifelse(as.numeric(as.character(net_j$month)) <= 4, 1, 2)

net_j <- net_j[, c(1:7, ncol(net_j))]

net_j <- net_j[net_j$season == 2, ]

net_j <- split(net_j, net_j$site)

indice_j <- vector('double', 6)

ind_jaccard <- 
  sapply(1:3, FUN = 
           function(i) {
             sapply((i+1):4, FUN = 
                      function(j) {
                        set1 <- unique(net_j[[i]]$sp)
                        set2 <- unique(net_j[[j]]$sp)
                        
                        jj <- jaccard(set1, set2)
                        message(paste('Jaccard index - ', 
                                      net_j[[i]]$site[1], 
                                      net_j[[j]]$site[1], 
                                      round(jj, 2)))
                        jj
                      })
           }) |> unlist()

mean(ind_jaccard); sd(ind_jaccard) # average and sd of Jaccard similarity
```

```{r}
sessionInfo()
```





